<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\SqlBackup" sqlbackup.php
 * mv -v SqlBackupTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-03-24 at 08:19:04.
 */
class SqlBackupTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SqlBackup
     */
    protected $objectMySQL, $objectSQLite3;
    const FILE = 'vystup.sql';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->objectMySQL = new SqlBackup(array(
            'driver' => 'MySQL',
            'dbname' => 'test',
            'user' => 'root',
            'password' => 'geniv',
            'host' => 'localhost',
            ));
        $this->objectSQLite3 = new SqlBackup(array(
            'driver' => 'SQLite3',
            'host' => 'pokus.sqlite3',
            ));
        // pokusna instance pro importy
        $this->objectSQLite3_1 = new SqlBackup(array(
            'driver' => 'SQLite3',
            'host' => 'pokus1.sqlite3',
            ));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        if (file_exists(self::FILE)) {
            unlink(self::FILE);
        }

        if (file_exists(self::FILE.'.gz')) {
            unlink(self::FILE.'.gz');
        }

        if (file_exists('pokus1.sqlite3')) {
            unlink('pokus1.sqlite3');
        }
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct1()
    {
        new SqlBackup(array());
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct2()
    {
        new SqlBackup(array(
            'driver' => 'aa',
            'dbname' => 'bb',
            'user' => 'cc',
            'password' => 'dd',
            ));
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct3()
    {
        new SqlBackup(array(
            'driver' => 'MySQL',
            // 'dbname' => 'bb',
            // 'user' => 'cc',
            // 'password' => 'dd',
            ));
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct4()
    {
        new SqlBackup(array(
            'driver' => 'MySQL',
            'dbname' => 'bb',
            // 'user' => 'cc',
            // 'password' => 'dd',
            ));
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct5()
    {
        new SqlBackup(array(
            'driver' => 'MySQL',
            'dbname' => 'bb',
            'user' => 'cc',
            // 'password' => 'dd',
            ));
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct6()
    {
        new SqlBackup(array(
            'driver' => 'SQLite2',
            'host' => null,
            ));
    }

    /**
     * @expectedException classes\ExceptionSqlBackup
     */
    public function test__construct7()
    {
        new SqlBackup(array(
            'driver' => 'SQLite3',
            'host' => null,
            ));
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExport()
    {
        $this->assertGreaterThan(1000, strlen($this->objectMySQL->export('suroviny')));
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExportNull()
    {
        $this->assertEmpty($this->objectMySQL->export('nic'));
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporMySQLFile()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectMySQL->setOutput(self::FILE);
        $this->assertEquals(self::FILE, $this->objectMySQL->export());
        $this->assertGreaterThan(1000, filesize(self::FILE));
        $this->assertFileExists(self::FILE);
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporMySQLFileNull()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectMySQL->setOutput(self::FILE);
        $this->assertEquals(self::FILE, $this->objectMySQL->export('nic'));
        $this->assertLessThan(1000, filesize(self::FILE));
        $this->assertFileExists(self::FILE);
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporMySQLFileGzip()
    {
        $this->assertFileNotExists(self::FILE.'.gz');
        $this->objectMySQL->setOutput(self::FILE)->setGzip(true);
        $this->assertEquals(self::FILE.'.gz', $this->objectMySQL->export());
        $this->assertFileExists(self::FILE.'.gz');
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporSQLite3()
    {
        $this->assertGreaterThan(1000, strlen($this->objectSQLite3->export()));
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporSQLite3Null()
    {
        $this->assertEquals('PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
COMMIT;', $this->objectSQLite3->export('nic'));
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporSQLite3File()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectSQLite3->setOutput(self::FILE);
        $this->assertEquals(self::FILE, $this->objectSQLite3->export());
        $this->assertGreaterThan(1000, filesize(self::FILE));
        $this->assertFileExists(self::FILE);
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporSQLite3FileNull()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectSQLite3->setOutput(self::FILE);
        $this->assertEquals(self::FILE, $this->objectSQLite3->export('nic'));
        $this->assertLessThan(1000, filesize(self::FILE));
        $this->assertFileExists(self::FILE);
    }

    /**
     * @covers classes\SqlBackup::export
     */
    public function testExporSQLite3FileGzip()
    {
        $this->assertFileNotExists(self::FILE.'.gz');
        $this->objectSQLite3->setOutput(self::FILE)->setGzip(true);
        $this->assertEquals(self::FILE.'.gz', $this->objectSQLite3->export());
        $this->assertGreaterThan(400, filesize(self::FILE.'.gz'));
        $this->assertFileExists(self::FILE.'.gz');
    }

    /**
     * @covers classes\SqlBackup::import
     */
    public function testImportMySQL()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectMySQL->setOutput(self::FILE);
        $path = $this->objectMySQL->export();
        $this->assertFileExists(self::FILE);
        $this->assertTrue($this->objectMySQL->import($path));
    }

    /**
     * @covers classes\SqlBackup::import
     */
    public function testImportMySQLGzip()
    {
        $this->assertFileNotExists(self::FILE.'.gz');
        $this->objectMySQL->setOutput(self::FILE)->setGzip(true);
        $path = $this->objectMySQL->export();
        $this->assertFileExists(self::FILE.'.gz');
        $this->assertTrue($this->objectMySQL->import($path));
    }

    /**
     * @covers classes\SqlBackup::import
     */
    public function testImportSQLite3()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectSQLite3->setOutput(self::FILE);
        $path = $this->objectSQLite3->export();
        $this->assertFileExists(self::FILE);
        $this->assertTrue($this->objectSQLite3_1->import($path));
        $this->assertFileExists('pokus1.sqlite3');
        $this->assertEquals(filesize('pokus.sqlite3'), filesize('pokus1.sqlite3'));
    }

    /**
     * @covers classes\SqlBackup::import
     */
    public function testImportSQLite3Gzip()
    {
        $this->assertFileNotExists(self::FILE);
        $this->objectSQLite3->setOutput(self::FILE)->setGzip(true);
        $path = $this->objectSQLite3->export();
        $this->assertFileExists(self::FILE.'.gz');
        $this->assertTrue($this->objectSQLite3_1->import($path));
        $this->assertFileExists('pokus1.sqlite3');
        $this->assertEquals(filesize('pokus.sqlite3'), filesize('pokus1.sqlite3'));
    }
}