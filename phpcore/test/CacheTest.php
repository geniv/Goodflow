<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Cache" cache.php
 * mv -v CacheTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-29 at 17:24:14.
 */
class CacheTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Cache
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //kvuli tride Router
        $_SERVER = array(
            'REQUEST_URI' => '/www/abcd/dfsds/asdffs/ds',
            'SCRIPT_NAME' => '/www/index.php',
        );

        $this->object = new Cache;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->clearAll(true);
    }

    /**
     * @covers classes\Cache::OB
     */
    public function testOB()
    {
        $factory = Cache::OB();
        $this->assertTrue($factory->isOB());
        $this->assertEquals('', $factory->getPrefix());
    }

    /**
     * @covers classes\Cache::Prefix
     */
    public function testPrefix()
    {
        $factory = Cache::Prefix();
        $this->assertFalse($factory->isOB());
        $this->assertEquals('', $factory->getPrefix());
    }

    /**
     * @covers classes\Cache::Prefix
     */
    public function testPrefix2()
    {
        $factory = Cache::Prefix('predpona');
        $this->assertFalse($factory->isOB());
        $this->assertEquals('predpona', $factory->getPrefix());
    }

    /**
     * @covers classes\Cache::OBPrefix
     */
    public function testOBPrefix()
    {
        $factory = Cache::OBPrefix('aaab');
        $this->assertTrue($factory->isOB());
        $this->assertEquals('aaab', $factory->getPrefix());
    }

    /**
     * @covers classes\Cache::getDir
     */
    public function testGetDir()
    {
        $this->assertEquals(Cache::DEFAULT_DIR, $this->object->getDir());
    }

    /**
     * @covers classes\Cache::setDir
     */
    public function testSetDir()
    {
        $this->object->setDir('.pokus');
        $this->assertEquals('.pokus', $this->object->getDir());
    }

    /**
     * @covers classes\Cache::getExpiration
     */
    public function testGetExpiration()
    {
        $this->assertEquals(Cache::DEFAULT_EXPIRE, $this->object->getExpiration());
    }

    /**
     * @covers classes\Cache::setExpiration
     */
    public function testSetExpiration()
    {
        $this->object->setExpiration('10 minutes');
        $this->assertEquals('10 minutes', $this->object->getExpiration());
    }

    /**
     * @covers classes\Cache::getRequest
     */
    public function testGetRequest()
    {
        $this->assertEquals(Router::request(), $this->object->getRequest());
    }

    /**
     * @covers classes\Cache::setRequest
     */
    public function testSetRequest()
    {
        $this->object->setRequest('a/b');
        $this->assertEquals('a/b', $this->object->getRequest());
    }

    /**
     * @covers classes\Cache::setRequest
     */
    public function testSetRequest2()
    {
        $this->object->setRequest(null);
        $this->assertEquals(Router::request(), $this->object->getRequest());
    }

    /**
     * @covers classes\Cache::setRequest
     */
    public function testSetRequest3()
    {
        $this->object->setRequest('');  //FIXME toto overit praxi!!! pac muze delat bordel
        $this->assertEquals(Router::request(), $this->object->getRequest());
    }

    /**
     * @covers classes\Cache::getName
     */
    public function testGetName()
    {
        $name = ''.basename(Router::request()).'.'.md5(Router::request());
        $this->assertEquals($name, $this->object->getName());
    }

    /**
     * @covers classes\Cache::getPrefix
     */
    public function testGetPrefix()
    {
        $this->assertEquals('', $this->object->getPrefix());
    }

    /**
     * @covers classes\Cache::setPrefix
     */
    public function testSetPrefix()
    {
        $this->object->setPrefix('pref');
        $this->assertEquals('pref', $this->object->getPrefix());
    }

    /**
     * @covers classes\Cache::setOB
     */
    public function testSetOB()
    {
        $this->object->setOB(true);
        $this->assertTrue($this->object->isOB());
    }

    /**
     * @covers classes\Cache::setOB
     */
    public function testSetOB2()
    {
        $this->object->setOB(false);
        $this->assertFalse($this->object->isOB());
    }

    /**
     * @covers classes\Cache::setOB
     * -test defaultni hodnoty!!!
     */
    public function testSetOB3()
    {
        $this->assertFalse($this->object->isOB());
    }

    /**
     * @covers classes\Cache::isOB
     */
    public function testIsOB()
    {
        $this->assertFalse($this->object->isOB());
    }

    /**
     * @covers classes\Cache::getExclude
     */
    public function testGetExclude()
    {
        $this->assertEquals(array(), $this->object->getExclude());
    }

    /**
     * @covers classes\Cache::setExclude
     */
    public function testSetExclude()
    {
        $this->object->setExclude(array('a', 'a/b', 'a/c'));
        $this->assertEquals(array('a', 'a/b', 'a/c'), $this->object->getExclude());
    }

    /**
     * @covers classes\Cache::isEnabled
     */
    public function testIsEnabled()
    {
        $this->assertFalse($this->object->isEnabled());
    }

    /**
     * @covers classes\Cache::setEnabled
     */
    public function testSetEnabled()
    {
        $this->object->setEnabled(true);
        $this->assertTrue($this->object->isEnabled());
    }

    /**
     * @covers classes\Cache::setEnabled
     */
    public function testSetEnabled2()
    {
        $this->object->setEnabled(false);
        $this->assertFalse($this->object->isEnabled());
    }

    /**
     * @covers classes\Cache::isCached
     */
    public function testIsCached()
    {
        $this->assertFalse($this->object->isCached());
    }

    /**
     * @covers classes\Cache::isCached
     */
    public function testIsCached2()
    {
        $this->assertFalse($this->object->isCached());
        $this->assertFalse($this->object->isOB());
        $this->object->setEnabled(true);
        $this->object->end('pokusny text!!');
        $this->assertTrue($this->object->isCached());
    }

    /**
     * @covers classes\Cache::isCached
     */
    public function testIsCached3()
    {
        $this->assertFalse($this->object->isCached());
        $this->assertFalse($this->object->isOB());
        $this->object->setEnabled(true)->setOB(true);
        $this->object->start();
        $this->expectOutputString('ahojkyy'); // bude ocekavat tady ten test!
        print 'ahojkyy';
        $this->object->end();
        $this->assertTrue($this->object->isCached());
    }

    /**
     * @covers classes\Cache::reload
     */
    public function testReload()
    {
        $this->object->setEnabled(true);
        $this->object->end('pokusny text!!');
        $this->assertTrue($this->object->isCached());
        $this->assertEquals(0, $this->object->getElapsedTime('%s'));
        //~ var_dump($this->object->getModifyTime());
        sleep(1);
        $this->assertEquals(1, $this->object->getElapsedTime('%s'));
        //~ $this->object->reload();  //TODO da se poradne nejak otestoat?
        //~ var_dump($this->object->getModifyTime());
        //~ var_dump($this->object->getElapsedTime());
    }

    /**
     * @covers classes\Cache::getModifyTime
     */
    public function testGetModifyTime()
    {
        $this->object->setEnabled(true);
        $this->object->end('pokusny text!!');
        $this->assertEquals(filemtime($this->object->getPath()), $this->object->getModifyTime());
    }

    /**
     * @covers classes\Cache::getModifyTime
     */
    public function testGetModifyTime2()
    {
        $this->assertNull($this->object->getModifyTime());
    }

    /**
     * @covers classes\Cache::getInfo
     */
    public function testGetInfo()
    {
        $this->object->setEnabled(true)->end('kokus text');
        $path = $this->object->getPath();
        $this->assertEquals('<br />
      state: <strong>enabled</strong><br />
      isCached: <strong>cached</strong><br />
      dir: <strong>.cache/</strong><br />
      path: <strong>.cache/ds.09d7409a794ee0ba67f320c42e710c07</strong><br />
      name: <strong>ds.09d7409a794ee0ba67f320c42e710c07</strong><br />
      size: <strong>10 b</strong><br />
      modify: <strong>'.date('Y-m-d H:i:s', filemtime($path)).'</strong><br />
      expire: <strong>1 day</strong><br />
      remain: <strong>00-0-1 00:0:0</strong><br />
      elapse: <strong>00-0-0 00:0:0</strong><br />
      sum size in dir: <strong>10 b</strong><br />
      sum count files in dir: <strong>1</strong><br />', $this->object->getInfo());

    }

    /**
     * @covers classes\Cache::getElapsedTime
     */
    public function testGetElapsedTime()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertEquals('00-0-0 00:0:0', $this->object->getElapsedTime());
    }

    /**
     * @covers classes\Cache::getRemainTime
     */
    public function testGetRemainTime()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertEquals('00-0-1 00:0:0', $this->object->getRemainTime());
    }

    /**
     * @covers classes\Cache::getContents
     */
    public function testGetContents()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertTrue($this->object->isCached());
        $this->assertEquals('test text', $this->object->getContents());
    }

    /**
     * @covers classes\Cache::start
     * @covers classes\Cache::end
     */
    public function testStart()
    {
        $this->object->setOB(true)->setEnabled(true)->start();
        $this->expectOutputString('bleee, pokusny textttt');
        echo 'bleee, pokusny textttt';
        $this->object->end();
        $this->assertTrue($this->object->isCached());
        $this->assertEquals('bleee, pokusny textttt', $this->object->getContents());
    }

    /**
     * @covers classes\Cache::end
     */
    public function testEnd()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertTrue($this->object->isCached());
        $this->assertEquals('test text', $this->object->getContents());
    }

    /**
     * @covers classes\Cache::clear
     */
    public function testClear()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertFileExists($this->object->getPath());
        $this->object->clear();
        $this->assertFileNotExists($this->object->getPath());
    }

    /**
     * @covers classes\Cache::clear
     */
    public function testClear2()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertFileExists($this->object->getPath());
        $this->object->clear($this->object->getName());
        $this->assertFileNotExists($this->object->getPath());
    }

    /**
     * @covers classes\Cache::clear
     */
    public function testClear3()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertFileExists($this->object->getPath());
        $this->object->clear('abc');
        $this->assertFileExists($this->object->getPath());
    }

    /**
     * @covers classes\Cache::clearAll
     */
    public function testClearAll()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertFileExists($this->object->getPath());
        $this->assertFileExists($this->object->getDir());
        $this->object->clearAll();
        $this->assertFileNotExists($this->object->getPath());
        $this->assertFileExists($this->object->getDir());
    }

    /**
     * @covers classes\Cache::clearAll
     */
    public function testClearAll2()
    {
        $this->object->setEnabled(true)->end('test text');
        $this->assertFileExists($this->object->getPath());
        $this->assertFileExists($this->object->getDir());
        $this->object->clearAll(true);
        $this->assertFileNotExists($this->object->getPath());
        $this->assertFileNotExists($this->object->getDir());
    }

    /**
     * @covers classes\Cache::synchronizeCron
     */
    public function testSynchronizeCron()
    {
        $this->assertEquals(0, Cache::synchronizeCron());
    }
}
