<?php
namespace classes;

/**
 * phpunit-skelgen --test -- "classes\Debugger" debugger.php
 * mv -v DebuggerTest.php ../test/
 * phpunit --bootstrap ../classes/debugger.php DebuggerTest
 */

class fooBar {}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-12 at 11:35:57.
 */
class DebuggerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new Debugger;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    //~ public function testEnable() {
      //~ //TODO dopsat test?!
    //~ }

    /**
     * Generated from @assert (null) throws ExceptionDebugger.
     *
     * @expectedException classes\ExceptionDebugger
     */
    public function testStopTime()
    {
        Debugger::stopTime(null);
    }

    /**
     * Generated from @assert ('nic') throws ExceptionDebugger.
     *
     * @expectedException classes\ExceptionDebugger
     */
    public function testStopTime2()
    {
        Debugger::stopTime('nic');
    }

    public function testTime() {
      Debugger::startTime();
      usleep(200);  //orientacni cekani ~200us
      Debugger::stopTime();
      //pozn: tento test je naprosto nerelevantni!
      $this->assertTrue(!is_null(Debugger::viewTime()));
    }

    /**
     * Generated from @assert Debugger::test()->isInt() throws ExceptionDebugger.
     *
     * @expectedException classes\ExceptionDebugger
     */
    public function test__call()
    {
        Debugger::test()->isInt();
    }

    /**
     * Generated from @assert Debugger::test()->isNeco('a') throws ExceptionDebugger.
     *
     * @expectedException classes\ExceptionDebugger
     */
    public function test__call2()
    {
        Debugger::test()->isNeco('a');
    }

    public function test__call3() {
      $this->assertFalse(Debugger::test('skupina')->isString(null));
      $this->assertTrue(Debugger::test('skupina')->isString('abc'));
      $this->assertFalse(Debugger::test('skupina')->isStr(123));
      $this->assertFalse(Debugger::test('skupina')->isInteger(null));
      $this->assertFalse(Debugger::test('skupina')->isInteger('abc'));
      $this->assertTrue(Debugger::test('skupina')->isInt(123));
      $this->assertFalse(Debugger::test('skupina')->isFloat('abc'));
      $this->assertTrue(Debugger::test('skupina')->isDouble(1.23));
      $this->assertFalse(Debugger::test('skupina')->isDouble(123));
      $this->assertFalse(Debugger::test('skupina')->isNumeric('abc'));
      $this->assertTrue(Debugger::test('skupina')->isNum(123));
      $this->assertTrue(Debugger::test('skupina')->isNum(1.23));
      $this->assertFalse(Debugger::test('skupina')->isObject(null));
      $this->assertTrue(Debugger::test('skupina')->isObject(new fooBar));
      $this->assertTrue(Debugger::test('skupina')->isObject(new \stdClass));
      $this->assertFalse(Debugger::test('skupina')->isArray(null));
      $this->assertTrue(Debugger::test('skupina')->isArray(array(1, 2, 3)));
      $this->assertFalse(Debugger::test('skupina')->isBoolean(null));
      $this->assertTrue(Debugger::test('skupina')->isBoolean(true));
      $this->assertTrue(Debugger::test('skupina')->isBool(false));

      $this->assertEquals('skupina testu: <strong>skupina</strong><br />
TEST:  <strong>isString(NULL)</strong> => false<br />
TEST:  <strong>isString(string(3) "abc")</strong> => true<br />
TEST:  <strong>isStr(int(123))</strong> => false<br />
TEST:  <strong>isInteger(NULL)</strong> => false<br />
TEST:  <strong>isInteger(string(3) "abc")</strong> => false<br />
TEST:  <strong>isInt(int(123))</strong> => true<br />
TEST:  <strong>isFloat(string(3) "abc")</strong> => false<br />
TEST:  <strong>isDouble(double(1.23))</strong> => true<br />
TEST:  <strong>isDouble(int(123))</strong> => false<br />
TEST:  <strong>isNumeric(string(3) "abc")</strong> => false<br />
TEST:  <strong>isNum(int(123))</strong> => true<br />
TEST:  <strong>isNum(double(1.23))</strong> => true<br />
TEST:  <strong>isObject(NULL)</strong> => false<br />
TEST:  <strong>isObject(object(classes\fooBar))</strong> => true<br />
TEST:  <strong>isObject(object(stdClass))</strong> => true<br />
TEST:  <strong>isArray(NULL)</strong> => false<br />
TEST:  <strong>isArray(Array
(
    [0] => int(1)
    [1] => int(2)
    [2] => int(3)
)
)</strong> => true<br />
TEST:  <strong>isBoolean(NULL)</strong> => false<br />
TEST:  <strong>isBoolean(bool(true))</strong> => true<br />
TEST:  <strong>isBool(bool(false))</strong> => true', Debugger::test('skupina')->viewTests());
    }

    /**
     * @covers Debugger::viewTime
     *
     * @expectedException classes\ExceptionDebugger
     */
    public function testViewTime()
    {
        Debugger::viewTime(null);
    }

    /**
     * @covers Debugger::viewTime
     *
     * @expectedException classes\ExceptionDebugger
     */
    public function testViewTime2()
    {
        Debugger::viewTime('nic');
    }

    /**
     * @covers Debugger::viewTests
     */
    public function testViewTests()
    {
        $this->assertTrue(Debugger::test()->isInt(12));
        $this->assertFalse(Debugger::test()->isInt('12'));
        $this->assertEquals('skupina testu: <strong>skupina</strong><br />
TEST:  <strong>isString(NULL)</strong> => false<br />
TEST:  <strong>isString(string(3) "abc")</strong> => true<br />
TEST:  <strong>isStr(int(123))</strong> => false<br />
TEST:  <strong>isInteger(NULL)</strong> => false<br />
TEST:  <strong>isInteger(string(3) "abc")</strong> => false<br />
TEST:  <strong>isInt(int(123))</strong> => true<br />
TEST:  <strong>isFloat(string(3) "abc")</strong> => false<br />
TEST:  <strong>isDouble(double(1.23))</strong> => true<br />
TEST:  <strong>isDouble(int(123))</strong> => false<br />
TEST:  <strong>isNumeric(string(3) "abc")</strong> => false<br />
TEST:  <strong>isNum(int(123))</strong> => true<br />
TEST:  <strong>isNum(double(1.23))</strong> => true<br />
TEST:  <strong>isObject(NULL)</strong> => false<br />
TEST:  <strong>isObject(object(classes\fooBar))</strong> => true<br />
TEST:  <strong>isObject(object(stdClass))</strong> => true<br />
TEST:  <strong>isArray(NULL)</strong> => false<br />
TEST:  <strong>isArray(Array
(
    [0] => int(1)
    [1] => int(2)
    [2] => int(3)
)
)</strong> => true<br />
TEST:  <strong>isBoolean(NULL)</strong> => false<br />
TEST:  <strong>isBoolean(bool(true))</strong> => true<br />
TEST:  <strong>isBool(bool(false))</strong> => true<br />
skupina testu: <strong>default</strong><br />
TEST:  <strong>isInt(int(12))</strong> => true<br />
TEST:  <strong>isInt(string(2) "12")</strong> => false', Debugger::viewTests());
    }

    public function testDump1() {
        $fp = fopen("php://temp/maxmemory", 'r+');
        $arr = array(10, 20.2, TRUE, NULL, 'hello', new \stdClass, array('a', 5), new fooBar, $fp, 'ššažě');
        $this->assertEquals('Array
(
    [0] => int(10)
    [1] => double(20.2)
    [2] => bool(true)
    [3] => NULL
    [4] => string(5) "hello"
    [5] => object(stdClass)
    [6] => array(2) { ... }
    [7] => object(classes\fooBar)
    [8] => resource(stream)
    [9] => string(9) "ššažě"
)
', Debugger::dump($arr, false));
    }

    public function testDump2() {
      $this->assertEquals('int(10)', Debugger::dump(10, false));
    }
}
