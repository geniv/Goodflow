<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Menu" menu.php
 * mv -v MenuTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-07-02 at 09:07:44.
 */
class MenuTest extends \PHPUnit_Framework_TestCase
{
  private $neon_layout = <<<T
home:
  name: domů
  js: [section1: [a.js, b.js], section2: [c.js, d.js]]
  css:
  menu:
  visible: true
  link:
sekce2:
  name: sekce2
  visible: true
  neco: hodnota
sekceX:
  name: ultra sekce
  link: http://google.cz
  visible: false
pod:
  name: podsekce
  js: d2.js
  css: s2.css
  menu:
    kontakt:
      name: kontaktik
      js: [x3.js]
      css: [d3.css]
      idmenu: kuksa
      menu:
        kuksa:
          name: kukša
          js: [a1.js, a2.js]
          css: [b1.css, b2.css]
          idmenu: ahoj
        huksa:
          name: hukšá bača
          menu:
            guksa:
              name: huhúksa
            duksa:
              name: dudukša +ěščřžýáíé
    sub-sekce:
      name: sub sekce
    sub-sub-sekce:
      name: sub sub sekce
\$ad:
  name: tajna sekce1
emptyhome:
  name: prazdny url
  link: ''

T;

    /**
     * @var Menu
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $layout = Configurator::decode($this->neon_layout);
        $this->object = new Menu($layout);  //nastaveni layoutu do menu

        $_SERVER = array(
            'REQUEST_URI' => '/www/abcd/dfsds/asdffs/ds',
            'SCRIPT_NAME' => '/www/index.php',
            'SERVER_NAME' => 'localhost',
        );
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Menu::simple
     */
    public function testSimple()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod';
        // nastaveni menu
        $m = Menu::simple(Configurator::decode($this->neon_layout), 'a/b/c/d/e/f', 'home');

        $menu = $m->getMenu();
        $this->assertCount(count($menu), $menu);
        $this->assertFalse($menu[0]->active);
        $this->assertTrue($menu[2]->active);
        $this->assertTrue($menu[2]->hasMenu());
        $this->assertEquals(array('pod' => 'podsekce'), $m->getNames());
    }

    /**
     * @covers classes\Menu::simple
     */
    public function testSimple2()
    {
        $_SERVER['REQUEST_URI'] = '/www';
        // nastaveni menu
        $m = Menu::simple(Configurator::decode($this->neon_layout), 'a/b/c/d/e/f', 'emptyhome');

        $menu = $m->getMenu();
        $this->assertFalse($menu[0]->active);
        $this->assertEquals('domů', $menu[0]->name);
        $this->assertEquals('http://localhost/www/home', $menu[0]->allurl);

        // pokud je link na: '' a jde o defaultni stranku, bude allurl = "weburl/"
        $this->assertTrue($menu[4]->active);
        $this->assertEquals('prazdny url', $menu[4]->name);
        $this->assertEquals('emptyhome', $menu[4]->url);
        $this->assertEquals('http://localhost/www/', $menu[4]->allurl);
    }

    /**
     * @covers classes\Menu::simple
     * @covers classes\Menu::getTitle
     * @covers classes\Menu::forceIterate
     * @runInSeparateProcess
     */
    public function testSimple3()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontakt/huksa/guksa';
        // nastaveni menu
        $m = Menu::simple(Configurator::decode($this->neon_layout), 'a/b/c/d/e/f', 'home');
        $this->assertEquals(array('pod' => 'podsekce', 'kontakt' => 'kontaktik', 'huksa' => 'hukšá bača', 'guksa' => 'huhúksa'), $m->getNames());
        $this->assertEquals('podsekce - kontaktik - hukšá bača - huhúksa', $m->getTitle());
        $this->assertEquals('a - podsekce - kontaktik - hukšá bača - huhúksa', $m->getTitle(array('before' => 'a')));
        $this->assertEquals('x - podsekce - kontaktik - hukšá bača - huhúksa - y', $m->getTitle(array('before' => 'x', 'after' => 'y')));
        $this->assertEquals('x / podsekce / kontaktik / hukšá bača / huhúksa / y', $m->getTitle(array('before' => 'x', 'after' => 'y', 'separator' => ' / ')));
        $this->assertEquals('1 - 2 - 3 - 4', $m->getTitle(array('source' => array('pod' => 1, 'kontakt' => 2, 'huksa' => 3, 'guksa' => 4))));
    }

    /**
     * @covers classes\Menu::simple
     * @covers classes\Menu::getTitle
     * @covers classes\Menu::forceIterate
     * @runInSeparateProcess
     */
    public function testSimple4()
    {
        $_SERVER['REQUEST_URI'] = '/www';
        $m = Menu::simple(Configurator::decode($this->neon_layout), 'a/b/c/d/e/f', 'home');
        $this->assertEquals('domů', $m->getTitle());
        $this->assertEquals('', $m->getTitle(array('show_default' => false)));
        $this->assertEquals('a', $m->getTitle(array('before' => 'a', 'show_default' => false)));
        $this->assertEquals('a - domů', $m->getTitle(array('before' => 'a')));
        $this->assertEquals('b', $m->getTitle(array('after' => 'b', 'show_default' => false)));
        $this->assertEquals('domů - b', $m->getTitle(array('after' => 'b')));
        $this->assertEquals('a - b', $m->getTitle(array('before' => 'a', 'after' => 'b', 'show_default' => false)));
        $this->assertEquals('a - domů - b', $m->getTitle(array('before' => 'a', 'after' => 'b')));
        $this->assertEquals('a - domů - b', $m->getTitle(array('before' => 'a', 'after' => 'b')));
        $this->assertEquals('a /\/ domů /\/ b', $m->getTitle(array('before' => 'a', 'after' => 'b', 'separator' => ' /\/ ')));
        $this->assertEquals('dom', $m->getTitle(array('source' => array('home' => 'dom'))));
    }

    /**
     * @covers classes\Menu::simple
     * @covers classes\Menu::getMenu
     * @ runInSeparateProcess
     */
    public function testSimple5()
    {
        $neon_layout = <<<T
prvni:
  name: domu
  link: ''
  menu:
    home:
      name: m 0 1
    sekce00:
      name: m 0 2
sekce1:
  name: sekce 1
  menu:
    home:
      name: m 1 1
    sekce11:
      name: m 1 2
sekce2:
  name: sekce 2
  menu:
    home:
      name: m 2 1
    sekce22:
      name: m 2 2
sekce3:
  name: sekce 3
  menu:
    home:
      name: m 3 1
    sekce33:
      name: m 3 2
T;

        $expectedActive0 = array(
            'prvni' => array(false, 'home' => false, 'sekce00' => false),
            'sekce1' => array(true, 'home' => false, 'sekce11' => true),
            'sekce2' => array(false, 'home' => false, 'sekce22' => false),
            'sekce3' => array(false, 'home' => false, 'sekce33' => false),
        );
        $_SERVER['REQUEST_URI'] = '/www/sekce1/sekce11';
        $m = Menu::simple(Configurator::decode($neon_layout), 'a/b/c/d/e/f', 'prvni');
        foreach ($m->getMenu() as $v0) {
          $this->assertEquals($expectedActive0[$v0->url][0], $v0->active);
          if ($v0->hasMenu()) {
            foreach ($v0->getMenu() as $v1) {
              $this->assertEquals($expectedActive0[$v0->url][$v1->url], $v1->active);
            }
          }
        }

        $expectedActive1 = array(
            'prvni' => array(false, 'home' => false, 'sekce00' => false),
            'sekce1' => array(true, 'home' => true, 'sekce11' => false),
            'sekce2' => array(false, 'home' => false, 'sekce22' => false),
            'sekce3' => array(false, 'home' => false, 'sekce33' => false),
        );
        //~ $this->assertEquals(
        $_SERVER['REQUEST_URI'] = '/www/sekce1/home';
        $m = Menu::simple(Configurator::decode($neon_layout), 'a/b/c/d/e/f', 'prvni');
        foreach ($m->getMenu() as $v0) {
          $this->assertEquals($expectedActive1[$v0->url][0], $v0->active);
          if ($v0->hasMenu()) {
            foreach ($v0->getMenu() as $v1) {
              $this->assertEquals($expectedActive1[$v0->url][$v1->url], $v1->active);
            }
          }
        }
    }

    /**
     * @covers classes\Menu::getLayout
     */
    public function testGetLayout()
    {
        $this->assertEquals(Configurator::decode($this->neon_layout), $this->object->getLayout());
        // nastaveni menu
        $m = Menu::simple(Configurator::decode($this->neon_layout), 'a/b/c/d/e/f', 'home');
    }

    /**
     * @covers classes\Menu::setRouter
     * @covers classes\Menu::getUri
     * @covers classes\Menu::getUriDefault
     */
    public function testSetRouter()
    {
        $model = 'a/b/c/d/e/f';
        $this->object->setRouter($model);
        $this->assertEquals(array('a' => 'abcd', 'b' => 'dfsds', 'c' => 'asdffs', 'd' => 'ds'), $this->object->getUri());
        $this->assertEquals('', $this->object->getUriDefault());
    }

    /**
     * @covers classes\Menu::getWebUrl
     * @covers classes\Menu::setWebUrl
     */
    public function testGetWebUrl()
    {
        $this->object->setWebUrl(Core::getUrl());
        $this->assertEquals(Core::getUrl(), $this->object->getWebUrl());
    }

    /**
     * @covers classes\Menu::setDefaultPage
     * @covers classes\Menu::getDefaultPage
     * @covers classes\Menu::setAutoDefaultPage
     * @covers classes\Menu::isAutoDefaultPage
     */
    public function testSetDefaultPage()
    {
        $this->assertNull($this->object->getDefaultPage());
        $this->object->setDefaultPage('home');
        $this->assertEquals(array('home'), $this->object->getDefaultPage());

        $this->assertFalse($this->object->isAutoDefaultPage());
        $this->object->setDefaultPage('home', true);
        $this->assertTrue($this->object->isAutoDefaultPage());
    }

    /**
     * @covers classes\Menu::__existsMenu
     * -bacha toto je vnitrni objekt
     */
    public function test__existsMenu()
    {
        $this->assertTrue(Menu::__existsMenu(array('home'), 0, Configurator::decode($this->neon_layout)));
        $this->assertFalse(Menu::__existsMenu(array('neexistuje'), 0, Configurator::decode($this->neon_layout)));
        $this->assertFalse(Menu::__existsMenu(array('home'), 1, Configurator::decode($this->neon_layout)));
    }

    /**
     * @covers classes\Menu::getMenu
     * - prazdna adresa
     */
    public function testGetMenu()
    {
        $_SERVER['REQUEST_URI'] = '/www/';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true); // jen pri prazdne adrese

        $this->assertEquals(array('a' => ''), $this->object->getUri());

        $menu = $this->object->getMenu();
        $this->assertEquals($menu[0]->count, count($menu));
        $this->assertEquals(0, $menu[0]->level);
        $this->assertTrue($menu[0]->active);
        $this->assertEquals(array('home' => 'domů'), $this->object->getNames());
    }

    /**
     * @covers classes\Menu::getMenu
     * @covers classes\Menu::getNames
     * -spatna adresa, bez oznacovani
     */
    public function testGetMenu2()
    {
        $_SERVER['REQUEST_URI'] = '/www/kfjdkjfkdjf';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home');  // prazdna

        $this->assertEquals(array('a' => 'kfjdkjfkdjf'), $this->object->getUri());
        $menu = $this->object->getMenu();

        $this->assertFalse($menu[0]->active);
        $this->assertEquals(array(), $this->object->getNames());
    }

    /**
     * @covers classes\Menu::getMenu
     * @covers classes\Menu::getNames
     * -spatna adresa, s oznacovanim
     */
    public function testGetMenu3()
    {
        $_SERVER['REQUEST_URI'] = '/www/kfjdkjfkdjf';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici

        $this->assertEquals(array('a' => 'kfjdkjfkdjf'), $this->object->getUri());
        $menu = $this->object->getMenu();

        $this->assertTrue($menu[0]->active);
        $this->assertEquals(array('home' => 'domů'), $this->object->getNames());
    }

    /**
     * @covers classes\Menu::getMenu
     * @covers classes\Menu::getNames
     * -castecne spatna adresa
     */
    public function testGetMenu4()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontaktXX/kuksa';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici

        $this->assertEquals(array('a' => 'pod', 'b' => 'kontaktXX', 'c' => 'kuksa'), $this->object->getUri());
        $menu = $this->object->getMenu();

        $this->assertTrue($menu[2]->active);
        $this->assertEquals(array('pod' => 'podsekce'), $this->object->getNames());
    }

    /**
     * @covers classes\Menu::getMenu
     * @covers classes\Menu::getNames
     * -castecne spatna adresa
     */
    public function testGetMenu5()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontakt/kuksaXX';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici

        $this->assertEquals(array('a' => 'pod', 'b' => 'kontakt', 'c' => 'kuksaXX'), $this->object->getUri());
        $menu = $this->object->getMenu();
        $m2 = $menu[2]->getMenu();

        $this->assertTrue($menu[2]->active);
        $this->assertTrue($m2[0]->active);
        $this->assertEquals(array('pod' => 'podsekce', 'kontakt' => 'kontaktik'), $this->object->getNames());
    }

    /**
     * @covers classes\Menu::getMenu
     * @covers classes\Menu::getNames
     * -spravna adresa
     */
    public function testGetMenu6()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontakt';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici

        $this->assertEquals(array('a' => 'pod', 'b' => 'kontakt'), $this->object->getUri());
        $menu = $this->object->getMenu();
        $m2 = $menu[2]->getMenu();

        $this->assertTrue($menu[2]->active);
        $this->assertTrue($m2[0]->active);
        $this->assertEquals(array('pod' => 'podsekce', 'kontakt' => 'kontaktik'), $this->object->getNames());

        foreach ($menu as $k => $v) {
          $this->assertEquals($k, $v->poc);
          $this->assertEquals(count($menu), $v->count);
          if ($v->url == 'pod') {
            $this->assertTrue($v->active);
          } else {
            $this->assertFalse($v->active);
          }

          if ($v->url == 'pod') {
            $this->assertTrue($v->hasMenu());
          } else {
            $this->assertFalse($v->hasMenu());
          }
        }
    }

    /**
     * @covers classes\Menu::getVariable
     */
    public function testGetVariable()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        $menu = $this->object->getMenu();

        $this->assertNull($this->object->getVariable('neco'));
    }

    /**
     * @covers classes\Menu::getVariable
     */
    public function testGetVariable2()
    {
        $_SERVER['REQUEST_URI'] = '/www/sekce2';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        $menu = $this->object->getMenu();

        $this->assertEquals('hodnota', $this->object->getVariable('neco'));
    }

    /**
     * @covers classes\Menu::getArrayAddress
     */
    public function testGetArrayAddress()
    {
        $_SERVER['REQUEST_URI'] = '/www/';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        $menu = $this->object->getMenu();
        $adr = $this->object->getArrayAddress();
        $this->assertCount(1, $adr);
        $this->assertArrayHasKey('home', $adr);
        $this->assertEquals('domů', $adr['home']['name']);
        $this->assertEquals(array('home' => 'domů'), $this->object->getNames());
    }

    /**
     * @covers classes\Menu::getActiveAddress
     */
    public function testGetActiveAddress()
    {
        $_SERVER['REQUEST_URI'] = '/www/';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        $menu = $this->object->getMenu();
        $adr = $this->object->getActiveAddress();
        $this->assertCount(1, $adr);
        $this->assertArrayHasKey(0, $adr);
        $this->assertEquals(array('home'), $adr);
    }

    /**
     * @covers classes\Menu::getActiveAddress
     */
    public function testGetActiveAddress2()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontakt';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici

        // vyuziti v TPL include:
        $this->assertEquals('pod/kontakt', $this->object->getTplAddress());
        $this->assertEquals('pod_kontakt', $this->object->getTplAddress('_'));
        $this->assertEquals('pod/kontakt/hopla', $this->object->getTplAddress(null, array('hopla')));
        $this->assertEquals('pod_kontakt_hopla', $this->object->getTplAddress('_', array('hopla')));
        $this->assertEquals(array('pod', 'kontakt'), $this->object->getActiveAddress());
    }


    /**
     * @covers classes\Menu::getLastAddress
     */
    public function testGetLastAddress()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontakt';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        $menu = $this->object->getMenu();
        $menu[2]->getMenu();

        $this->assertEquals('kontakt', $this->object->getLastAddress());
    }

    /**
     * @covers classes\Menu::getJS
     * @covers classes\Menu::getCSS
     */
    public function testGetJS()
    {
        $_SERVER['REQUEST_URI'] = '/www/';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        //~ $menu = $this->object->getMenu();

        $this->assertEquals(array('section1' => array('a.js', 'b.js'), 'section2' => array('c.js', 'd.js')), $this->object->getJS());
        $this->assertEquals(array('a.js', 'b.js'), $this->object->getJS('section1'));
        $this->assertEquals(array('c.js', 'd.js'), $this->object->getJS('section2'));
        $this->assertEmpty($this->object->getJS('section3'));
        $this->assertNull($this->object->getJS('section3'));
        $this->assertEmpty($this->object->getCSS());
    }

    /**
     * @covers classes\Menu::getJS
     * @covers classes\Menu::getCSS
     */
    public function testGetJS1()
    {
        $_SERVER['REQUEST_URI'] = '/www/pod';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        //~ $menu = $this->object->getMenu();

        $this->assertEquals(array('d2.js'), $this->object->getJS());
        $this->assertEquals('d2.js', $this->object->getVariable('js'));
        $this->assertEquals(array('s2.css'), $this->object->getCSS());
        $this->assertEquals('s2.css', $this->object->getVariable('css'));
        $this->assertNull($this->object->getVariable('pokus'));
    }

    /**
     * @covers classes\Menu::getJS
     * @covers classes\Menu::getCSS
     */
    public function testGetJS2()  // test na dedeni
    {
        $_SERVER['REQUEST_URI'] = '/www/pod/kontakt';
        // nastaveni menu
        $this->object->setRouter('a/b/c/d/e/f')
                      ->setDefaultPage('home', true);  // prazdna + neexistujici
        //~ $menu = $this->object->getMenu();

        $this->assertEquals(array('d2.js', 'x3.js'), $this->object->getJS(null, true));
        $this->assertEquals(array('d2.js', 'x3.js'), $this->object->getVariable('js', null, true));
        $this->assertEquals(array('s2.css', 'd3.css'), $this->object->getCSS(null, true));
        $this->assertEquals(array('s2.css', 'd3.css'), $this->object->getVariable('css', null, true));
    }
}
