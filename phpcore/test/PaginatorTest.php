<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Paginator" paginator.php
 * mv -v PaginatorTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-01 at 15:54:58.
 */
class PaginatorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Paginator
     */
    protected $object1, $object2, $object3, $object4;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object1 = new Paginator(110, 10);
        $this->object2 = new Paginator(120, 20);
        $this->object3 = Paginator::init(130, 30);
        $this->object4 = Paginator::init(140, 40);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Paginator::init
     */
    public function testInit()
    {
        $this->assertEquals(new Paginator(110, 10), Paginator::init(110, 10));
    }

    /**
     * @covers classes\Paginator::getItemCount
     */
    public function testGetItemCount()
    {
        $this->assertEquals(110, $this->object1->getItemCount());
        $this->assertEquals(120, $this->object2->getItemCount());
        $this->assertEquals(130, $this->object3->getItemCount());
        $this->assertEquals(140, $this->object4->getItemCount());
    }

    /**
     * @covers classes\Paginator::setItemCount
     */
    public function testSetItemCount()
    {
        $this->object1->setItemCount(210);
        $this->assertEquals(210, $this->object1->getItemCount());

        $this->object2->setItemCount(220);
        $this->assertEquals(220, $this->object2->getItemCount());

        $this->object3->setItemCount(230);
        $this->assertEquals(230, $this->object3->getItemCount());

        $this->object4->setItemCount(240);
        $this->assertEquals(240, $this->object4->getItemCount());
    }

    /**
     * @covers classes\Paginator::getItemsPerPage
     */
    public function testGetItemsPerPage()
    {
        $this->assertEquals(10, $this->object1->getItemsPerPage());
        $this->assertEquals(20, $this->object2->getItemsPerPage());
        $this->assertEquals(30, $this->object3->getItemsPerPage());
        $this->assertEquals(40, $this->object4->getItemsPerPage());
    }

    /**
     * @covers classes\Paginator::setItemsPerPage
     */
    public function testSetItemsPerPage()
    {
        $this->object1->setItemsPerPage(20);
        $this->assertEquals(20, $this->object1->getItemsPerPage());

        $this->object2->setItemsPerPage(30);
        $this->assertEquals(30, $this->object2->getItemsPerPage());

        $this->object3->setItemsPerPage(40);
        $this->assertEquals(40, $this->object3->getItemsPerPage());

        $this->object4->setItemsPerPage(50);
        $this->assertEquals(50, $this->object4->getItemsPerPage());
    }

    /**
     * @covers classes\Paginator::getBase
     */
    public function testGetBase()
    {
        $this->assertEquals(1, $this->object1->getBase());
        $this->assertEquals(1, $this->object2->getBase());
        $this->assertEquals(1, $this->object3->getBase());
        $this->assertEquals(1, $this->object4->getBase());
    }

    /**
     * @covers classes\Paginator::setBase
     */
    public function testSetBase()
    {
        $this->object1->setBase(2);
        $this->assertEquals(2, $this->object1->getBase());

        $this->object2->setBase(3);
        $this->assertEquals(3, $this->object2->getBase());

        $this->object3->setBase(4);
        $this->assertEquals(4, $this->object3->getBase());

        $this->object4->setBase(5);
        $this->assertEquals(5, $this->object4->getBase());
    }

    /**
     * @covers classes\Paginator::getPage
     */
    public function testGetPage()
    {
        $this->assertEquals(1, $this->object1->getPage());
        $this->assertEquals(1, $this->object2->getPage());
        $this->assertEquals(1, $this->object3->getPage());
        $this->assertEquals(1, $this->object4->getPage());
    }

    /**
     * @covers classes\Paginator::setPage
     */
    public function testSetPage()
    {
        $this->object1->setPage(-88);
        $this->assertEquals(1, $this->object1->getPage());
        $this->object1->setPage(0);
        $this->assertEquals(1, $this->object1->getPage());
        $this->object1->setPage(null);
        $this->assertEquals(1, $this->object1->getPage());
        $this->object1->setPage(2);
        $this->assertEquals(2, $this->object1->getPage());
        $this->object1->setPage(12);
        $this->assertEquals(11, $this->object1->getPage());
        $this->assertEquals(11, $this->object1->getPageCount());  // 110/10=11

        $this->object2->setPage(3);
        $this->assertEquals(3, $this->object2->getPage());
        $this->object2->setPage(7);
        $this->assertEquals(6, $this->object2->getPage());
        $this->assertEquals(6, $this->object2->getPageCount()); // 120/20=6

        $this->object3->setPage(4);
        $this->assertEquals(4, $this->object3->getPage());
        $this->object3->setPage(6);
        $this->assertEquals(5, $this->object3->getPage());
        $this->assertEquals(5, $this->object3->getPageCount()); // 130/30=~>5

        $this->object4->setPage(5);
        $this->assertEquals(4, $this->object4->getPage());
        $this->assertEquals(4, $this->object4->getPageCount()); // 140/40=~>4
    }

    /**
     * @covers classes\Paginator::getFirstPage
     */
    public function testGetFirstPage()
    {
        $this->assertEquals(1, $this->object1->getFirstPage());
        $this->assertEquals(1, $this->object2->getFirstPage());
        $this->assertEquals(1, $this->object3->getFirstPage());
        $this->assertEquals(1, $this->object4->getFirstPage());
    }

    /**
     * @covers classes\Paginator::getLastPage
     */
    public function testGetLastPage()
    {
        $this->assertEquals(11, $this->object1->getLastPage());
        $this->assertEquals(6, $this->object2->getLastPage());
        $this->assertEquals(5, $this->object3->getLastPage());
        $this->assertEquals(4, $this->object4->getLastPage());
    }

    /**
     * @covers classes\Paginator::getPrevPage
     */
    public function testGetPrevPage()
    {
        $this->assertEquals(0, $this->object1->getPrevPage());
        $this->assertEquals(0, $this->object2->getPrevPage());
        $this->assertEquals(0, $this->object3->getPrevPage());
        $this->assertEquals(0, $this->object4->getPrevPage());
    }

    /**
     * @covers classes\Paginator::getNextPage
     */
    public function testGetNextPage()
    {
        $this->assertEquals(2, $this->object1->getNextPage());
        $this->assertEquals(2, $this->object2->getNextPage());
        $this->assertEquals(2, $this->object3->getNextPage());
        $this->assertEquals(2, $this->object4->getNextPage());
    }

    /**
     * @covers classes\Paginator::isFirst
     */
    public function testIsFirst()
    {
        $this->assertTrue($this->object1->isFirst());
        $this->object1->setPage(2);
        $this->assertFalse($this->object1->isFirst());

        $this->assertTrue($this->object2->isFirst());
        $this->object2->setPage(2);
        $this->assertFalse($this->object2->isFirst());

        $this->assertTrue($this->object3->isFirst());
        $this->object3->setPage(2);
        $this->assertFalse($this->object3->isFirst());

        $this->assertTrue($this->object4->isFirst());
        $this->object4->setPage(2);
        $this->assertFalse($this->object4->isFirst());
    }

    /**
     * @covers classes\Paginator::isLast
     */
    public function testIsLast()
    {
        $this->assertFalse($this->object1->isLast());
        $this->object1->setPage(11);
        $this->assertTrue($this->object1->isLast());
    }

    /**
     * @covers classes\Paginator::isPrev
     */
    public function testIsPrev()
    {
        $this->assertFalse($this->object1->isPrev());
        $this->object1->setPage(2);
        $this->assertTrue($this->object1->isPrev());
    }

    /**
     * @covers classes\Paginator::isNext
     */
    public function testIsNext()
    {
        $this->assertTrue($this->object1->isNext());
        $this->object1->setPage(11);
        $this->assertFalse($this->object1->isNext());
    }

    /**
     * @covers classes\Paginator::getPageCount
     */
    public function testGetPageCount()
    {
        $this->assertEquals(11, $this->object1->getPageCount());
    }

    /**
     * @covers classes\Paginator::isVisible
     */
    public function testIsVisible()
    {
        // NULL
        $this->assertFalse($this->object1->isVisible());

        $this->object1->setPage(1);
        $this->assertTrue($this->object1->isVisible());

        $this->object1->setPage(null);
        $this->assertFalse($this->object1->isVisible());

        $this->object1->setPage(0);
        $this->assertTrue($this->object1->isVisible());

        $this->object1->setPage('a');
        $this->assertFalse($this->object1->isVisible());
    }

    /**
     * @covers classes\Paginator::getOffset
     */
    public function testGetOffset()
    {
        $this->assertEquals(0, $this->object1->getOffset());

        $this->object1->setPage(0);
        $this->assertEquals(0, $this->object1->getOffset());

        $this->object1->setPage(4);
        $this->assertEquals(30, $this->object1->getOffset());

        $this->object1->setPage(12);
        $this->assertEquals(100, $this->object1->getOffset());
    }

    /**
     * @covers classes\Paginator::getCountdownOffset
     */
    public function testGetCountdownOffset()
    {
        $this->assertEquals(100, $this->object1->getCountdownOffset());

        $this->object1->setPage(0);
        $this->assertEquals(100, $this->object1->getCountdownOffset());

        $this->object1->setPage(12);
        $this->assertEquals(0, $this->object1->getCountdownOffset());

        $this->object1->setPage(11);
        $this->assertEquals(0, $this->object1->getCountdownOffset());
    }

    /**
     * @covers classes\Paginator::getLength
     */
    public function testGetLength()
    {
        $this->assertEquals(10, $this->object1->getLength());

        $this->object1->setPage(11);
        $this->assertEquals(10, $this->object1->getLength());
    }

    /**
     * @covers classes\Paginator::getArraySlice
     */
    public function testGetArraySlice()
    {
        $pole = range(1, 110);
        $this->assertEquals(range(1, 10), $this->object1->getArraySlice($pole));

        $this->object1->setPage(4);
        $this->assertEquals(range(31, 40), $this->object1->getArraySlice($pole));
    }

    /**
     * @covers classes\Paginator::getLimit
     */
    public function testGetLimit()
    {
        $this->assertEquals('LIMIT 0, 10', $this->object1->getLimit());
        $this->assertEquals('LIMIT 0, 20', $this->object2->getLimit());
        $this->assertEquals('LIMIT 0, 30', $this->object3->getLimit());
        $this->assertEquals('LIMIT 0, 40', $this->object4->getLimit());
    }

    /**
     * @covers classes\Paginator::render
     */
    public function testRender()
    {
        $this->assertEquals(range(1, 11), $this->object1->render());
        $this->assertEquals(range(1, 4) + array(4=>11), $this->object1->render(Paginator::TYPE1));
        $this->assertEquals(range(1, 4), $this->object1->render(Paginator::TYPE2));
        $this->assertEquals(range(1, 10), $this->object1->render(Paginator::TYPE3));
    }
}
