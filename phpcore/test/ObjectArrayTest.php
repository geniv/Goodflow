<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\ObjectArray" objectarray.php
 * mv -v ObjectArrayTest.php ../test/
 */

// varianta tridy 1
class MyObjectArray extends ObjectArray {
  public function myInit() {
    $this['k1'] = 'v1';
    $this->k2 = 'v2';
  }
}

// varianta tridy 2
class MyObjectArray2 extends ObjectArray {
  public function __construct($data = array()) {
    parent::__construct($data);

    $this->myInit();
  }

  public function myInit() {
    $this['k1'] = 'v1';
    $this->k2 = 'v2';
  }
}

// varianta tridy 3
class MyObjectArray3 extends ObjectArray {
  public function __construct() {
    $data = array('k3' => 'v3');
    parent::__construct($data);

    $this->myInit();
  }

  public function myInit() {
    $this['k1'] = 'v1';
    $this->k2 = 'v2';
  }
}

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-06-01 at 09:32:20.
 */
class ObjectArrayTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ObjectArray
     */
    protected $object;
    protected $pole = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new MyObjectArray($this->pole);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\ObjectArray::__construct
     */
    public function test__construct()
    {
        $inst = new MyObjectArray;
        $inst->myInit();
        $this->assertEquals(array('k1' => 'v1', 'k2' => 'v2'), $inst->toArray());
    }

    /**
     * @covers classes\ObjectArray::__construct
     */
    public function test__construct2()
    {
        $inst = new MyObjectArray2(array('k3' => 'v3'));
        $this->assertEquals(array('k1' => 'v1', 'k2' => 'v2', 'k3' => 'v3'), $inst->toArray());
    }

    /**
     * @covers classes\ObjectArray::__construct
     */
    public function test__construct3()
    {
        $inst = new MyObjectArray3;
        $this->assertEquals(array('k1' => 'v1', 'k2' => 'v2', 'k3' => 'v3'), $inst->toArray());
    }

    /**
     * @covers classes\ObjectArray::getData
     */
    public function testGetData()
    {
        $this->assertEquals(new \ArrayObject($this->pole), $this->object->getData());
    }

    /**
     * @covers classes\ObjectArray::__isset
     */
    public function test__isset()
    {
        $this->assertTrue(isset($this->object->a));
        $this->assertTrue(isset($this->object->b));
        $this->assertFalse(isset($this->object->cc));
    }

    /**
     * @covers classes\ObjectArray::__get
     */
    public function test__get()
    {
        $this->assertEquals($this->object->a, 1);
        $this->assertEquals($this->object->b, 2);
        $this->assertNull($this->object->cc, 3);
    }

    /**
     * @covers classes\ObjectArray::__set
     */
    public function test__set()
    {
        $this->object->f = 6;
        $this->assertEquals($this->object->f, 6);
        $this->object->g = null;
        $this->assertNull($this->object->g);
    }

    /**
     * @covers classes\ObjectArray::__unset
     */
    public function test__unset()
    {
        $this->object->ff = 22;
        $this->assertEquals($this->object->ff, 22);
        unset($this->object->ff);
        $this->assertFalse(isset($this->object->ff));
        unset($this->object->g);
        $this->assertNull($this->object->g);
    }

    /**
     * @covers classes\ObjectArray::offsetExists
     */
    public function testOffsetExists()
    {
        $this->assertTrue(isset($this->object['a']));
        $this->assertTrue(isset($this->object['b']));
        $this->assertFalse(isset($this->object['cc']));
    }

    /**
     * @covers classes\ObjectArray::offsetGet
     */
    public function testOffsetGet()
    {
        $this->assertEquals($this->object['a'], 1);
        $this->assertEquals($this->object['b'], 2);
        $this->assertNull($this->object['cc'], 3);
    }

    /**
     * @covers classes\ObjectArray::offsetSet
     */
    public function testOffsetSet()
    {
        $this->object['f'] = 6;
        $this->assertEquals($this->object['f'], 6);
        $this->object['g'] = null;
        $this->assertNull($this->object['g']);
    }

    /**
     * @covers classes\ObjectArray::offsetUnset
     */
    public function testOffsetUnset()
    {
        $this->object['ff'] = 22;
        $this->assertEquals($this->object['ff'], 22);
        unset($this->object['ff']);
        $this->assertFalse(isset($this->object['ff']));
        unset($this->object['g']);
        $this->assertNull($this->object['g']);
    }

    /**
     * @covers classes\ObjectArray::count
     */
    public function testCount()
    {
        $this->assertCount(count($this->object), $this->pole);
        $this->assertEquals($this->object->count(), count($this->pole));
    }

    /**
     * @covers classes\ObjectArray::getIterator
     */
    public function testGetIterator()
    {
        $it = $this->object->getIterator();
        $keys = array_keys($this->pole);
        $poc = 0;
        foreach ($it as $k => $v) {
          $this->assertEquals($k, $keys[$poc]);
          $this->assertEquals($v, $this->object[$k]);
          $poc++;
        }
    }

    /**
     * @covers classes\ObjectArray::getIterator
     */
    public function testGetIterator2()
    {
        $it = $this->object->getIterator();
        foreach ($it as $k => $v) {
          $this->assertEquals($k, $it->key());
          $this->assertEquals($v, $it->current());
        }
    }

    /**
     * @covers classes\ObjectArray::serialize
     * @covers classes\ObjectArray::unserialize
     */
    public function testSerialize()
    {
        $ser = $this->object->serialize();
        $inst = new MyObjectArray;
        $this->assertNotEquals($this->object, $inst);
        $inst->unserialize($ser);
        $this->assertEquals($this->object, $inst);
        $this->assertSameSize($this->object, $inst);
        $this->assertSame($this->object->toArray(), $inst->toArray());
    }

    /**
     * @covers classes\ObjectArray::toArray
     */
    public function testToArray()
    {
        $this->assertEquals($this->object->toArray(), $this->pole);
    }
}
