<?php
namespace classes;

//~ classes\IAuthenticator,
//~ //classes\SimpleAuthenticator,
//~ classes\SimpleRuleAuthenticator,
//~ classes\User,
//~ classes\UserStorage,
//~ classes\Permission,

//http://www.slideshare.net/wimg/creating-fast-dynamic-acls-in-zend-framework-zend-webinar-8337996
//http://cakephp.org/

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\User" user.php
 * mv -v UserTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-11-14 at 10:28:51.
 */
class UserTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var User
     */
    protected $user;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @covers classes\User::getAuthenticator
     * @covers classes\User::setAuthenticator
     */
    protected function setUp()
    {
        $_SERVER = array('HTTP_HOST' => 'localhost',
                          'REMOTE_ADDR' => '127.0.0.1',
                          'HTTP_USER_AGENT' => 'useragent phpunit test',
                        );

        //~ $authenticator = new SimpleAuthenticator(array(
          //~ 'john' => 'IJ^%4dfh54*',
          //~ 'kathy' => '12345',
          //~ 'franta' => 'flinta',
        //~ ));

        $authenticator = new SimpleRuleAuthenticator(array(
                    'kathy' => array('12345', array('registrovany')),
                    'franta' => array('flinta', array('moderator')),
                    'foo' => array('bar', array('admin')),
                  ));

        $this->user = new User('uzivatel');

        $this->user->setExpiration('5 minutes')
                   ->setAuthenticator($authenticator);

        $this->user->isLoggedIn();  //jen pro spravny start Unit testu!!

        //pokus:
        //~ $acl = new StaticACL;
        //~ $acl->addRole('guest')
            //~ ->addRole('regnuty', 'guest')
            //~ ->addRole('moderator', 'regnuty')
            //~ ->addRole('admin', 'moderator');
        //~ var_dump($acl->getRoleParents('admin'));
        //~ var_dump($acl->roleInheritsFrom('admin', 'moderator1'));
        //~ exit;

        //~ $acl = new StaticACL;
        //~ $acl->addResource('clanek');
        //~ $acl->addResource('editacekomentar', 'clanek');
        //~ $acl->addResource('mezivrstva', 'editacekomentar');
        //~ $acl->addResource('komentar', array('clanek'));
        //~ $acl->addResource('anketa', 'clanek');
        //~ $acl->addResource('superanketa', 'anketa');
        //~ $acl->addResource('profil');
        //~ $acl->addResource('userprofil', array('profil', 'mezivrstva'));
        //~ var_dump($acl->getResourceParents('userprofil'));
        //~ var_dump($acl->resourceInheritsFrom('userprofil', 'clanek1'));
        //~ exit;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        //~ header_remove();
    }

    /**
     * @covers classes\User::create
     */
    public function testFactory()
    {
        $u = User::create('ses_user2', $this->user->getAuthenticator(), '5 minute');
        $u->isLoggedIn();
        $u->login('franta', 'flinta');
        $this->assertTrue($u->isLoggedIn());
        $this->assertEquals(array('moderator'), $u->getRoles());
        $this->assertNull($u->getData());
    }

    /**
     * @covers classes\User::setCallbackLoggedIn
     */
    public function testSetCallbackLoggedIn()
    {
        $t = $this;

        $callback = function ($cc) use ($t) {
          $t->assertTrue($cc->isLoggedIn());
          $t->assertEquals('moje1', $cc->getId());
        };
        $this->user->setCallbackLoggedIn($callback);
        $this->user->login(new Identity('moje1'));

        $this->user->setCallbackLoggedIn(function($cc) use ($t) {
          $t->assertTrue($cc->isLoggedIn());
          $t->assertEquals('moje2', $cc->getId());
        });
        $this->user->login(new Identity('moje2'));
    }

    /**
     * @covers classes\User::setCallbackLoggedOut
     */
    public function testSetCallbackLoggedOut()
    {
        $t = $this;

        $callback = function ($cc) use ($t) {
          $t->assertTrue($cc->isLoggedIn());
          $t->assertEquals('moje1', $cc->getId());
        };
        $this->user->setCallbackLoggedOut($callback);
        $this->user->login(new Identity('moje1'));
        $this->user->logout();

        $this->user->setCallbackLoggedOut(function($cc) use ($t) {
          $t->assertTrue($cc->isLoggedIn());
          $t->assertEquals('moje2', $cc->getId());
        });
        $this->user->login(new Identity('moje2'));
        $this->user->logout();
    }

    /**
     * @covers classes\User::login
     */
    public function testLogin()
    {
        $username = 'franta';
        $password = 'flinta';
        $this->user->login($username, $password);
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals(array('moderator'), $this->user->getRoles());
        $this->assertNull($this->user->getData());
    }

    /**
     * @covers classes\User::login
     */
    public function testLogin2()
    {
        $this->user->login('franta', 'flinta');
        $this->assertTrue($this->user->isLoggedIn());
        $_SESSION['localhost']['_DATA_']['uzivatel']['identity'] = null;
        $this->assertFalse($this->user->isLoggedIn());
    }

    /**
     * @expectedException classes\ExceptionAuthenticator
     */
    public function testLoginException1() { //invalid login
        $username = 'franta1';
        $password = 'flinta';
        $this->user->login($username, $password);
    }

    /**
     * @expectedException classes\ExceptionAuthenticator
     */
    public function testLoginException2() { //invalid pass
        $username = 'franta';
        $password = 'flinta1';
        $this->user->login($username, $password);
    }

    /**
     * @covers classes\User::login
     */
    public function testLoginIdentity()
    {
        $this->user->login(new Identity('moje'));
        $this->assertTrue($this->user->isLoggedIn());
        $this->user->logout();
        $this->assertFalse($this->user->isLoggedIn());
    }

    /**
     * @covers classes\User::logout
     * @covers classes\User::isLoggedIn
     */
    public function testLogout()
    {
        $this->user->login(new Identity('moje'));
        $this->assertTrue($this->user->isLoggedIn());
        $this->user->logout();  //necha identitu (jen po dobu vyprseni expirace)
        $this->assertTrue(!is_null($this->user->getIdentity()));

        $this->user->login(new Identity('moje'));
        $this->assertTrue($this->user->isLoggedIn());
        $this->user->logout(true);  //vymaze identitu
        $this->assertNull($this->user->getIdentity());
    }

    /**
     * @covers classes\User::getIdentity
     */
    public function testGetIdentity()
    {
        $idt = new Identity('moje');
        $this->user->login($idt);
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals($idt, $this->user->getIdentity());
    }

    /**
     * @covers classes\User::getId
     */
    public function testGetId()
    {
        $this->user->login(new Identity('moje'));
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals('moje', $this->user->getId());
    }

    /**
     * @covers classes\User::getRoles
     */
    public function testGetRoles() {
        $this->user->login(new Identity(11, array('user'), 'foo'));
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals(array('user'), $this->user->getRoles());
    }

    /**
     * @covers classes\User::getData
     */
    public function testGetData() {
        $this->user->login(new Identity(11, array('user'), 'foo'));
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals('foo', $this->user->getData());
    }

    /**
     * @covers classes\User::getData
     */
    public function testGetData2() {
        $this->user->login(new Identity(11, array('user'), array('foo' => 'bar')));
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals('bar', $this->user->getData('foo'));
    }

    /**
     * @covers classes\User::isInRole
     */
    public function testIsInRole1() //prihlaseny jako registrovany
    {
        $this->user->login('kathy', '12345');
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertTrue($this->user->isInRole('registrovany'));
        $this->assertFalse($this->user->isInRole('moderator'));
        $this->assertFalse($this->user->isInRole('admin'));
    }

    /**
     * @covers classes\User::isInRole
     */
    public function testIsInRole2() //prihlaseny jako moderator
    {
        $this->user->login('franta', 'flinta');
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertFalse($this->user->isInRole('registrovany'));
        $this->assertTrue($this->user->isInRole('moderator'));
        $this->assertFalse($this->user->isInRole('admin'));
    }

    /**
     * @covers classes\User::isInRole
     */
    public function testIsInRole3() //prihlaseny jako admin
    {
        $this->user->login('foo', 'bar');
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertFalse($this->user->isInRole('registrovany'));
        $this->assertFalse($this->user->isInRole('moderator'));
        $this->assertTrue($this->user->isInRole('admin'));
    }

    /**
     * @covers classes\User::getAuthenticator
     * @covers classes\User::setAuthenticator
     */
    public function testGetAuthenticator()
    {
        $acl = new StaticACL;
        $this->user->setAuthorizator($acl);
        $this->assertEquals($acl, $this->user->getAuthorizator());
        $this->assertFalse($this->user->isLoggedIn());
    }

    /**
     * @covers classes\User::setExpiration
     * @covers classes\User::getExpiration
     */
    public function testSetExpiration()
    {
        $this->user->setExpiration('10 minutes');
        $this->assertEquals('10 minutes', $this->user->getExpiration());
    }

    public function testGetExpirationTime() //cas expirace
    {
        $this->user->login('foo', 'bar');
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertEquals(strtotime($this->user->getExpiration()), $this->user->getExpirationTime());
    }

    public function testRevalidate()
    {
        $this->user->login('foo', 'bar');
        $this->assertTrue($this->user->isLoggedIn());
        //delka expirace, ocekavany cas expirace
        $this->assertEquals(strtotime($this->user->getExpiration()), $this->user->getExpirationTime());
        sleep(1); //natazeni prodlevy
        //posun opravdu o 1s
        $this->assertEquals(1, strtotime($this->user->getExpiration()) - $this->user->getExpirationTime());
        $this->user->revalidate();
        $this->assertEquals(strtotime($this->user->getExpiration()), $this->user->getExpirationTime());
    }

    /**
     * @covers classes\User::isAllowed
     */
    public function testIsAllowed() //permission nad uzivately
    {
        $this->user->login('kathy', '12345'); //prihlasen: registrovany
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertTrue($this->user->isInRole('registrovany'));

        $acl = new StaticACL;
        $this->user->setAuthorizator($acl);

        //definovani roli
        $acl->addRole('registrovany')
            ->addRole('moderator', 'registrovany')
            ->addRole('admin', 'moderator');

        //definovani zdroju
        $acl->addResource('admin_zdroj')
            ->addResource('clanek', 'admin_zdroj')
            ->addResource('komentar', 'admin_zdroj')
            ->addResource('anketa', 'admin_zdroj');

        //pridelovani prav
        $acl->allow('registrovany', 'anketa', 'vote')
            ->allow('registrovany', array('clanek', 'komentar', 'anketa'), 'view', true); //posledni pravidlo

        $this->assertTrue($acl->isAllowed('registrovany', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('registrovany', 'anketa', 'view'));
        $this->assertFalse($acl->isAllowed('registrovany', 'anketa', 'edit'));

        $this->assertTrue($this->user->isAllowed('anketa', 'vote'));
        $this->assertTrue($this->user->isAllowed('anketa', 'view'));
        $this->assertFalse($this->user->isAllowed('anketa', 'edit'));


        //smazani roli
        $acl->removeAllRules();

        //nastaveni roli pres rodice
        $acl->allow('registrovany', 'anketa', 'vote')
            ->allow('registrovany', 'admin_zdroj', 'view')  // nastaveni rodici
            ->allow('moderator', 'admin_zdroj', 'edit', true);

        //pridelanovani prav
        $this->assertTrue($acl->isAllowed('registrovany', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('registrovany', 'anketa', 'view'));
        $this->assertFalse($acl->isAllowed('registrovany', 'anketa', 'edit'));

        $this->assertTrue($this->user->isAllowed('anketa', 'vote'));
        $this->assertTrue($this->user->isAllowed('anketa', 'view'));
        $this->assertFalse($this->user->isAllowed('anketa', 'edit'));


        //stejne role, zdroje a pravidla ale jiny uzivatel
        $this->user->login('franta', 'flinta'); //prihlasen: moderator
        $this->assertTrue($this->user->isLoggedIn());
        $this->assertTrue($this->user->isInRole('moderator'));

        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'view'));
        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'edit'));

        $this->assertTrue($this->user->isAllowed('anketa', 'vote'));
        $this->assertTrue($this->user->isAllowed('anketa', 'view'));
        $this->assertTrue($this->user->isAllowed('anketa', 'edit'));


        //smazani roli
        $acl->removeAllRules()
            ->allow();
        $this->assertTrue($acl->isAllowed());
        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('kdokoliv', 'kdekoliv', 'cokoliv'));


        //smazani roli
        $acl->removeAllRules()  //test dedicnosti bez dedenych zdroju
            ->allow('registrovany', 'anketa', 'vote', true);
        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'vote'));


        //smazani roli
        $acl->removeAllRules() //test dedicnosti bez dedenych roli
            ->allow('registrovany', 'admin_zdroj', 'vote', true);
        $this->assertTrue($acl->isAllowed('registrovany', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'vote'));


        //smazani roli
        $acl->removeAllRules()
            ->allow('registrovany', $acl::ALL, $acl::ALL, true);

        $this->assertTrue($acl->isAllowed('registrovany'));
        $this->assertTrue($this->user->isAllowed());

        $acl->removeAllow('registrovany');
        $this->assertFalse($acl->isAllowed('registrovany'));
        $this->assertTrue($this->user->isInRole('moderator'));
        $this->assertTrue($this->user->isAllowed());

        $acl->removeAllow('moderator');
        $this->assertFalse($acl->isAllowed('moderator'));
        $this->assertTrue($this->user->isInRole('moderator'));
        $this->assertFalse($this->user->isAllowed());


        //smazani roli
        $acl->removeAllRules()
            ->allow('moderator', 'komentar', $acl::ALL, true);
        $this->assertTrue($acl->isAllowed('moderator', 'komentar'));
        $this->assertTrue($this->user->isAllowed('komentar'));

        $acl->removeAllow('moderator', 'komentar');


        //smazani roli
        $acl->removeAllRules()
            ->allow('moderator', 'komentar', 'edit')
            ->deny('moderator', 'komentar', 'del', true);
        $this->assertTrue($acl->isAllowed('moderator', 'komentar', 'edit'));
        $this->assertFalse($acl->isAllowed('moderator', 'komentar', 'del'));
    }

    public function testIdentity() {
        $i = new Identity('pepa');
        $this->assertEquals('pepa', $i->getId());
        $this->assertEmpty($i->getRoles());
        $this->assertNull($i->getData());

        $i = new Identity('pepa', array('guest'));
        $this->assertEquals(array('guest'), $i->getRoles());

        $i = new Identity('pepino', array('guest'), 'mojedata');
        $this->assertEquals('pepino', $i->getId());
        $this->assertEquals(array('guest'), $i->getRoles());
        $this->assertEquals('mojedata', $i->getData());

        $i = new Identity('pepino', array('guest'), array('ax' => 'mojedata'));
        $this->assertEquals('mojedata', $i->getData('ax'));
    }

    public function testAclNette() {
        $acl = new StaticACL;
        // definujeme role
        $acl->addRole('guest');
        $acl->addRole('registered', 'guest'); // registered dědí od guest
        $acl->addRole('administrator', 'registered'); // a od něj dědí administrator
        // seznam zdrojů, ke kterým mohou uživatelé přistupovat
        $acl->addResource('article');
        $acl->addResource('comment');
        $acl->addResource('poll');
        // pravidla, určující, kdo co může s čím dělat
        // nejprve nikdo nemůže dělat nic

        // nechť guest může prohlížet obsah veřejné části, hlasovat v anketách
        $acl->allow('guest', array('article', 'comment', 'poll'), 'view');
        $acl->allow('guest', 'poll', 'vote');

        // registrovaný dědí právo od guesta, ale má i právo komentovat
        $acl->allow('registered', 'comment', 'add');

        // administrátor může prohlížet a editovat cokoliv
        $acl->allow('administrator', StaticACL::ALL, array('view', 'edit', 'add'), true);

        // může guest prohlížet články?
        $this->assertTrue($acl->isAllowed('guest', 'article', 'view')); // TRUE
        // může guest editovat články?
        $this->assertFalse($acl->isAllowed('guest', 'article', 'edit')); // FALSE
        // může guest hlasovat v anketách?
        $this->assertTrue($acl->isAllowed('guest', 'poll', 'vote')); // TRUE
        // může guest komentovat?
        $this->assertFalse($acl->isAllowed('guest', 'comment', 'add')); // FALSE

        $this->assertTrue($acl->isAllowed('registered', 'article', 'view')); // TRUE
        $this->assertTrue($acl->isAllowed('registered', 'comment', 'add')); // TRUE
        $this->assertFalse($acl->isAllowed('registered', 'backend', 'view')); // FALSE

        $this->assertTrue($acl->isAllowed('administrator', 'poll', 'vote')); // TRUE
        $this->assertTrue($acl->isAllowed('administrator', 'poll', 'edit')); // TRUE
        $this->assertTrue($acl->isAllowed('administrator', 'comment', 'edit')); // TRUE


        $acl = new StaticACL;
        $acl->addRole('admin');
        $acl->addRole('guest');

        $acl->addRole('john', 'guest');
        $acl->addRole('mary', 'admin');

        $acl->addResource('backend');

        $acl->allow('admin', 'backend')
            ->deny('guest', 'backend', $acl::ALL, true);

        // případ A: role admin má menší váhu než role guest
        $this->assertFalse($acl->isAllowed('john', 'backend')); // FALSE

        // případ B: role admin má větší váhu než guest
        $this->assertTrue($acl->isAllowed('mary', 'backend')); // TRUE

        $acl = new StaticACL;
        // definujeme role
        $acl->addRole('guest');
        $acl->addRole('member');
        $acl->addRole('administrator', 'member');  // administrator je potomkem member

        // definujeme zdroje
        $acl->addResource('file');
        $acl->addResource('article');

        // pravidlo: host může jen prohlížet články
        $acl->allow('guest', 'article', 'view');

        // pravidlo: člen může prohlížet vše, soubory i články
        $acl->allow('member', StaticACL::ALL, 'view');

        // administrátor dědí práva od člena, navíc má právo vše editovat
        $acl->allow('administrator', StaticACL::ALL, array('view', 'edit'));
    }

    //test alc opravneni role
    public function testAclRole() {
        $acl = new StaticACL;
        //definice roli
        $acl->addRole('guest') //role guest
            ->addRole('registered', 'guest') //registred dedi od guest
            ->addRole('moderator', 'registered') //moderator dedi od registered
            ->addRole('administrator', 'moderator'); //admin dedi od moderator

        $acl->addRole('herec', 'administrator');
        $this->assertTrue($acl->hasRole('herec'));
        $this->assertTrue($acl->roleInheritsFrom('herec', 'administrator'));
        $acl->removeRole('herec');
        $this->assertFalse($acl->hasRole('herec'));

        //kontrola role
        $this->assertTrue($acl->hasRole('guest'));
        $this->assertTrue($acl->hasRole('registered'));
        $this->assertTrue($acl->hasRole('moderator'));
        $this->assertEquals(array('guest', 'registered', 'moderator', 'administrator'), $acl->getRoles());
        $this->assertTrue($acl->roleInheritsFrom('administrator', 'guest')); //admin dedi az do guesta?
        $this->assertFalse($acl->roleInheritsFrom('guest', 'registered'));
        $this->assertFalse($acl->roleInheritsFrom('administrator', 'nekdo'));
        $this->assertFalse($acl->roleInheritsFrom('administrator', 'xxx'));
        $this->assertFalse($acl->roleInheritsFrom('xxx', 'administrator'));
        $this->assertEquals(array('moderator', 'registered', 'guest'), $acl->getRoleParents('administrator'));  //seznam predku administratora
        $this->assertEquals(array('registered', 'guest'), $acl->getRoleParents('moderator'));
        $this->assertEquals(array('guest'), $acl->getRoleParents('registered'));
        $this->assertNull($acl->getRoleParents('nikdo')); //neexistuje
        //definice jednoduchych zdroju
        $acl->addResource('clanek');
        $acl->addResource('komentar');
        $acl->addResource('anketa');
        //nastaveni opravneni pro konkkretni role a zdroje
        $acl->allow('guest', 'anketa', 'vote');
        $acl->allow('guest', array('clanek', 'komentar', 'anketa'), 'view');
        $acl->allow('registered', 'komentar', 'add');
        $acl->allow('registered', array('clanek', 'komentar'), array('edit'), true);
        //je opravneni?
        $this->assertTrue($acl->isAllowed('guest', 'clanek', 'view'));
        $this->assertTrue($acl->isAllowed('guest', 'komentar', 'view'));
        $this->assertTrue($acl->isAllowed('guest', 'anketa', 'view'));
        $this->assertFalse($acl->isAllowed('guest', 'anketaA', 'view'));
        $this->assertFalse($acl->isAllowed('guest', 'clanek', 'nezname'));
        $this->assertTrue($acl->isAllowed('guest', 'anketa', 'vote'));
        //opravneni predavane z dedice
        $this->assertTrue($acl->isAllowed('registered', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('moderator', 'anketa', 'vote'));
        $this->assertTrue($acl->isAllowed('administrator', 'anketa', 'vote'));
        $this->assertFalse($acl->isAllowed('nic', 'nic', 'nic'));
        $this->assertFalse($acl->isAllowed('nic', 'nic'));
        $this->assertFalse($acl->isAllowed('nic'));
        $this->assertFalse($acl->isAllowed());

        //smazani roli
        $acl->removeAllRules();
        //komentare all
        $acl->allow('registered', 'komentar', 'add')
            ->allow('registered', array('clanek', 'komentar'), array('edit'))
            ->allow('moderator', 'komentar',  $acl::ALL, true);

        $this->assertTrue($acl->isAllowed('moderator', 'komentar'));
        $this->assertTrue($acl->isAllowed('administrator', 'komentar'));
        $this->assertFalse($acl->isAllowed('registered', 'komentar'));
        $this->assertFalse($acl->isAllowed('guest', 'komentar'));
        $this->assertFalse($acl->isAllowed('nikdo', 'komentar'));
        $this->assertFalse($acl->isAllowed('nekdo'));
        //komentare add a all
        $this->assertTrue($acl->isAllowed('registered', 'komentar', 'add'));
        $this->assertTrue($acl->isAllowed('moderator', 'komentar', 'add'));
        $this->assertTrue($acl->isAllowed('administrator', 'komentar', 'add'));
        $this->assertFalse($acl->isAllowed('nekdoA', 'komentar', 'add'));
        $this->assertFalse($acl->isAllowed('nekdo', 'komentarA', 'add'));
        //komentare cokoliv
        $this->assertTrue($acl->isAllowed('administrator', 'komentar', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('moderator', 'komentar', 'cokoliv'));
        $this->assertFalse($acl->isAllowed('registered', 'komentar', 'cokoliv'));
        //komentare a clanky edit
        $this->assertTrue($acl->isAllowed('registered', 'clanek', 'edit'));
        $this->assertTrue($acl->isAllowed('moderator', 'clanek', 'edit'));
        $this->assertTrue($acl->isAllowed('administrator', 'clanek', 'edit'));
        $this->assertFalse($acl->isAllowed('guest', 'clanek', 'edit'));
        $this->assertTrue($acl->isAllowed('registered', 'komentar', 'edit'));
        $this->assertTrue($acl->isAllowed('moderator', 'komentar', 'edit'));
        $this->assertTrue($acl->isAllowed('administrator', 'komentar', 'edit'));
        $this->assertFalse($acl->isAllowed('guest', 'komentar', 'edit'));

        //smazani roli
        $acl->removeAllRules();
        //nejake to deny
        $acl->deny('guest', 'anketa', 'vote', true);
        $this->assertFalse($acl->isAllowed('guest', 'anketa', 'vote'));
        $this->assertFalse($acl->isAllowed('registered', 'anketa', 'vote'));
        $this->assertFalse($acl->isAllowed('moderator', 'anketa', 'vote'));
        $this->assertFalse($acl->isAllowed('administrator', 'anketa', 'vote'));
        //prenastaveni prav admina
        $acl->allow('administrator', IAuthorizator::ALL, array('view', 'edit', 'add', 'del'));
        $this->assertFalse($acl->isAllowed('administrator', 'anketa', 'cokoli'));
        $this->assertFalse($acl->isAllowed('nekdo', 'anketa', 'cokoli'));
        $this->assertTrue($acl->isAllowed('administrator', 'anketa', 'add'));
        //~ $this->assertTrue($acl->isAllowed('nekdo', 'anketa', 'add'));
        $this->assertTrue($acl->isAllowed('administrator', 'kdekoliv', 'add'));
        $this->assertFalse($acl->isAllowed('administrator', 'kdekoliv', 'cokoliv'));
        //vyvisteni prav a znovu nataveni
        $acl->removeAllRules();
        $acl->allow('administrator'); //Permission::ALL, Permission::ALL
        $this->assertTrue($acl->isAllowed('administrator', 'clanek', 'view'));
        $this->assertTrue($acl->isAllowed('administrator', 'clanek', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('administrator', 'kdekoliv', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('administrator', 'kdekoliv'));
        $this->assertTrue($acl->isAllowed('administrator'));
        //test jestli dedicnost nedsaha nic nez by mela
        $this->assertFalse($acl->isAllowed('registered'));
        $this->assertFalse($acl->isAllowed('registered', 'kdekoliv'));
        $this->assertFalse($acl->isAllowed('registered', 'kdekoliv', 'cokoliv'));

        $acl->removeAllRoles();
        $this->assertEmpty($acl->getRoles());
        $acl->removeAllResources();
        $this->assertEmpty($acl->getResources());
        $acl->removeAllRules();
        $this->assertEmpty($acl->getRules());
        $this->assertFalse($acl->isAllowed('nekdo'));
    }

    //test alc opravneni resource
    public function testAclResource() {
        $acl = new StaticACL;
        //definice roli
        $acl->addRole('guest');
        $acl->addRole('registered', 'guest');
        $acl->addRole('administrator', 'registered');
        //kontrola role
        $this->assertTrue($acl->hasRole('guest'));
        $this->assertTrue($acl->hasRole('registered'));
        $this->assertTrue($acl->hasRole('administrator'));
        $this->assertEquals(array('guest', 'registered', 'administrator'), $acl->getRoles());
        $this->assertTrue($acl->roleInheritsFrom('registered', 'guest'));
        $this->assertTrue($acl->roleInheritsFrom('administrator', 'registered'));
        $this->assertTrue($acl->roleInheritsFrom('administrator', 'guest')); //admin dedi az do guesta?
        $this->assertEquals(array('guest'), $acl->getRoleParents('registered'));
        $this->assertEquals(array('registered', 'guest'), $acl->getRoleParents('administrator'));  //seznam predku administratora
        //definice zdroju
        $acl->addResource('clanek')
            ->addResource('editacekomentar', 'clanek')
            ->addResource('mezivrstva', 'editacekomentar')
            ->addResource('komentar', array('clanek'))
            ->addResource('anketa', 'clanek')
            ->addResource('superanketa', 'anketa')
            ->addResource('profil')
            ->addResource('userprofil', array('profil', 'mezivrstva'));

        $acl->addResource('hokus', 'profil');
        $this->assertTrue($acl->hasResource('profil'));
        $this->assertTrue($acl->hasResource('hokus'));
        $this->assertTrue($acl->resourceInheritsFrom('hokus', 'profil'));
        $this->assertFalse($acl->resourceInheritsFrom('hokus', 'anketa'));
        $acl->removeResource('hokus');
        $this->assertFalse($acl->hasResource('hokus'));

        $this->assertEquals(array('clanek', 'editacekomentar', 'mezivrstva', 'komentar', 'anketa', 'superanketa', 'profil', 'userprofil'), $acl->getResources());
        $this->assertEquals(array('profil', 'mezivrstva', 'editacekomentar', 'clanek'), $acl->getResourceParents('userprofil'));
        $this->assertNull($acl->getResourceParents('profil'));
        $this->assertEquals(array('anketa', 'clanek'), $acl->getResourceParents('superanketa'));
        $this->assertEquals(array('clanek'), $acl->getResourceParents('anketa'));
        $this->assertEquals(array('clanek'), $acl->getResourceParents('komentar'));
        $this->assertEquals(array('editacekomentar', 'clanek'), $acl->getResourceParents('mezivrstva'));
        $this->assertEquals(array('clanek'), $acl->getResourceParents('editacekomentar'));
        $this->assertNull($acl->getResourceParents('clanek'));
        $this->assertNull($acl->getResourceParents('profa'));
        //kontrola existence zdroju
        $this->assertTrue($acl->resourceInheritsFrom('userprofil', 'profil'));
        $this->assertTrue($acl->resourceInheritsFrom('userprofil', 'editacekomentar'));
        $this->assertTrue($acl->resourceInheritsFrom('userprofil', 'clanek'));
        $this->assertTrue($acl->resourceInheritsFrom('userprofil', 'mezivrstva'));
        $this->assertTrue($acl->resourceInheritsFrom('superanketa', 'anketa'));
        $this->assertTrue($acl->resourceInheritsFrom('superanketa', 'clanek'));
        $this->assertTrue($acl->resourceInheritsFrom('komentar', 'clanek'));
        $this->assertTrue($acl->resourceInheritsFrom('editacekomentar', 'clanek'));
        //nastaveni opravneni pro konkretni role a zdroje
        $acl->allow('guest', 'anketa', 'vote', true);
        //test zdali a opraneni
        $this->assertTrue($acl->isAllowed('guest', 'anketa', 'vote'));
        $this->assertFalse($acl->isAllowed('guest', 'anketa', 'voteX'));
        $this->assertTrue($acl->isAllowed('guest', 'superanketa', 'vote'));
        $this->assertFalse($acl->isAllowed('guest', 'superanketa', 'voteX'));
        $this->assertFalse($acl->isAllowed('guest', 'clanek', 'vote'));
        $this->assertFalse($acl->isAllowed('guest', 'komentar', 'vote'));
        $this->assertFalse($acl->isAllowed('guest', 'clanek', 'voteX'));
        $this->assertFalse($acl->isAllowed('registered', 'userprofil', 'vote'));

        //smazani roli
        $acl->removeAllRules()
            ->allow('registered', 'mezivrstva', array('add', 'edit', 'del', 'view'), true);
        $this->assertTrue($acl->isAllowed('registered', 'mezivrstva', 'add'));
        $this->assertFalse($acl->isAllowed('registered', 'mezivrstva', 'vote'));
        $this->assertTrue($acl->isAllowed('registered', 'mezivrstva', 'edit'));
        $this->assertTrue($acl->isAllowed('registered', 'mezivrstva', 'del'));
        $this->assertTrue($acl->isAllowed('registered', 'mezivrstva', 'view'));
        $this->assertFalse($acl->isAllowed('registered', 'mezivrstva'));
        $this->assertFalse($acl->isAllowed('registered', 'mezivrstva', 'cokoliv'));

        //smazani roli
        $acl->removeAllRules()
            ->allow('registered', 'mezivrstva', array('add', 'edit', 'del', 'view'))
            ->allow('guest', 'clanek', 'add', true);
        $this->assertTrue($acl->isAllowed('guest', 'clanek', 'add'));
        $this->assertTrue($acl->isAllowed('guest', 'editacekomentar', 'add'));
        $this->assertTrue($acl->isAllowed('guest', 'mezivrstva', 'add'));
        $this->assertTrue($acl->isAllowed('guest', 'komentar', 'add'));
        $this->assertTrue($acl->isAllowed('guest', 'anketa', 'add'));
        $this->assertTrue($acl->isAllowed('guest', 'superanketa', 'add'));
        $this->assertFalse($acl->isAllowed('guest', 'profil', 'add'));

        //smazani roli
        $acl->removeAllRules()
            ->deny('guest', 'clanek', 'add', true);
        $this->assertFalse($acl->isAllowed('guest', 'clanek', 'add'));
        $this->assertFalse($acl->isAllowed('guest', 'anketa', 'add'));
        $this->assertFalse($acl->isAllowed('guest', 'superanketa', 'add'));
    }
//~ print_r($acl->getRules());exit;
    public function testAclAll() {
        $acl = new StaticACL;
        //roles
        $acl->addRole('guest')
            ->addRole('member', 'guest')
            ->addRole('editor', 'member')
            ->addRole('admin');
        // resources
        $acl->addResource('Admin:Default')
            ->addResource('Admin:Page');
        //~ $acl->addResource('Admin:User');
        // privileges
        $acl->allow('member', 'Admin:Default', IAuthorizator::ALL)  //001
            ->allow('editor', 'Admin:Page', IAuthorizator::ALL)  //001
            ->allow('admin', IAuthorizator::ALL, IAuthorizator::ALL, true);  //011

        $this->assertFalse($acl->isAllowed('guest'));

        $this->assertFalse($acl->isAllowed('member'));
        $this->assertTrue($acl->isAllowed('member', 'Admin:Default'));
        $this->assertTrue($acl->isAllowed('member', 'Admin:Default', 'cokoliv'));

        $this->assertFalse($acl->isAllowed('editor'));
        $this->assertTrue($acl->isAllowed('editor', 'Admin:Page'));
        $this->assertTrue($acl->isAllowed('editor', 'Admin:Page', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('editor', 'Admin:Default'));
        $this->assertTrue($acl->isAllowed('editor', 'Admin:Default', 'cokoliv'));

        $this->assertTrue($acl->isAllowed('admin'));
        $this->assertTrue($acl->isAllowed('admin', 'kdekoliv'));
        $this->assertTrue($acl->isAllowed('admin', 'kdekoliv', 'cokoliv'));

        $this->assertTrue($acl->isAllowed('admin', 'Admin:Page'));
        $this->assertTrue($acl->isAllowed('admin', 'Admin:Page', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('admin', 'Admin:Default'));
        $this->assertTrue($acl->isAllowed('admin', 'Admin:Default', 'cokoliv'));

        $acl->removeAllRules();
        // privileges
        $acl->allow('member', 'Admin:Default') // 001
            ->allow('member', 'Admin:Page')    // 001
            ->allow('admin', IAuthorizator::ALL, IAuthorizator::ALL, true); // 011

        $this->assertTrue($acl->isAllowed('admin'));
        $this->assertTrue($acl->isAllowed('admin', 'kdekoliv'));
        $this->assertTrue($acl->isAllowed('admin', 'kdekoliv', 'cokoliv'));
        $this->assertFalse($acl->isAllowed('adminA'));
        $this->assertFalse($acl->isAllowed('adminA', 'kdekoliv'));
        $this->assertFalse($acl->isAllowed('adminA', 'kdekoliv', 'cokoliv'));

        $this->assertFalse($acl->isAllowed('member'));
        $this->assertTrue($acl->isAllowed('member', 'Admin:Page'));
        $this->assertTrue($acl->isAllowed('member', 'Admin:Default'));
        $this->assertTrue($acl->isAllowed('member', 'Admin:Page', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('member', 'Admin:Default', 'cokoliv'));

        $acl->removeAllRules();
        // privileges
        $acl->allow('guest', IAuthorizator::ALL, array('view')); //010
        $this->assertTrue($acl->isAllowed('guest', 'kdekoliv', 'view'));
        $this->assertFalse($acl->isAllowed('guest', 'view'));
        $this->assertTrue($acl->isAllowed('guest', '*', 'view'));

        $acl->removeAllRules();
        // privileges
        $acl->allow(IAuthorizator::ALL, 'Admin:Page', array('view'));  //100
        $this->assertTrue($acl->isAllowed('kdokoliv', 'Admin:Page', 'view'));
        $this->assertFalse($acl->isAllowed('kdokoliv', 'Admin:Page', 'viewX'));

        $acl->removeAllRules();
        // privileges
        $acl->allow(IAuthorizator::ALL, IAuthorizator::ALL, array('view')); //110
        $this->assertTrue($acl->isAllowed('kdokoliv', 'kdekoliv', 'view'));
        $this->assertFalse($acl->isAllowed('kdokoliv', 'kdekoliv', 'viewX'));

        $acl->removeAllRules();
        // privileges
        //$acl->allow(Permission::ALL, 'Admin:Page', Permission::ALL); //101
        $acl->allow(IAuthorizator::ALL, 'Admin:Page');                    //101
        $this->assertTrue($acl->isAllowed('kdokoliv', 'Admin:Page', 'viewX'));
        $this->assertFalse($acl->isAllowed('kdokoliv', 'Admin:PageX', 'viewX'));

        $acl->removeAllRules();
        // privileges
        //$acl->allow(Permission::ALL, Permission::ALL, Permission::ALL); //111
        $acl->allow();
        $this->assertTrue($acl->isAllowed('kdokoliv', 'kdekoliv', 'cokoliv'));
        $this->assertTrue($acl->isAllowed('XX', 'YY', 'ZZ'));
    }

    public function testAcl2() {
        $acl = new StaticACL;
        //~ $user->setAuthorizator($acl);
        $path = 'superACL';

        $this->assertFalse($acl->isLoadFromFile());

        $acl->addRole('registrovany')
            ->addRole('moderator', 'registrovany')
            ->addRole('admin', 'moderator');

        $this->assertTrue($acl->hasRole('registrovany'));
        $this->assertFalse($acl->hasRole('registrovany1'));
        $this->assertTrue($acl->hasRole('admin'));

        $this->assertNull($acl->getRoleParents('admin2'));
        $this->assertNull($acl->getRoleParents('registrovany1'));
        $this->assertEquals(array('moderator', 'registrovany'), $acl->getRoleParents('admin'));
        $this->assertEquals(array('registrovany', 'moderator', 'admin'), $acl->getRoles());

        $this->assertTrue($acl->roleInheritsFrom('admin', 'registrovany'));

        $acl->addResource('administrace')
            ->addResource('clanky', 'administrace')
            ->addResource('komentare', 'administrace')
            ->addResource('neco', array('clanky', 'komentare'))
            ->addResource('ankety', 'administrace');

        $this->assertTrue($acl->hasResource('komentare'));
        $this->assertFalse($acl->hasResource('komentareX'));
        $this->assertEquals(array('clanky', 'administrace', 'komentare'), $acl->getResourceParents('neco'));

        //prodavani po poli
        $acl->allow('registrovany', 'administrace', array('view', 'vote'))
            ->allow('moderator', array('clanky', 'ankety'), array('exec', 'paka'))
            ->allow('moderator', 'administrace', array('edit', 'append'))
            ->allow('moderator', array('komentare', 'ankety'), 'kick')
            ->allow('moderator', 'clanky', 'extra_clanky')
            ->allow('moderator', 'komentare', 'extra_komentare')
            ->allow('moderator', 'komentare', 'del')
            ->allow('admin', 'administrace', IAuthorizator::ALL, $path); //posledni pravidlo + ulozeni do souboru (auto commitRules + save)
            //~ ->commitRules($path);

        $this->assertTrue($acl->isAllowed('registrovany', 'ankety', 'view'));
        $this->assertTrue($acl->isAllowed('moderator', 'ankety', 'view'));
        $this->assertTrue($acl->isAllowed('admin', 'ankety', 'view'));
        $this->assertTrue($acl->isAllowed('admin', 'ankety', 'viewX'));
        $this->assertFalse($acl->isAllowed('admin', 'anketyX', 'viewX'));
        $this->assertFalse($acl->isAllowed('adminX', 'ankety', 'view'));

        $this->assertTrue($acl->isAllowed('registrovany', 'administrace', 'view'));
        $this->assertTrue($acl->isAllowed('moderator', 'ankety', 'view'));

        //~ var_dump('user acl: '.$user->isAllowed('ankety', 'view'));

        $this->assertTrue($acl->isAllowed('admin', 'ankety'));
        $this->assertTrue($acl->isAllowed('admin', 'ankety', 'XXXX'));

        $this->assertTrue($acl->isAllowed('registrovany', 'ankety', 'vote'));
        $this->assertTrue($acl->isAllowed('registrovany', 'clanky', 'view'));
        $this->assertFalse($acl->isAllowed('registrovany', 'komentare', 'del'));
        $this->assertTrue($acl->isAllowed('moderator', 'komentare', 'del'));
        $this->assertTrue($acl->isAllowed('admin', 'administrace', 'cokoliv'));

        //nacteni ze souboru
        $this->assertFileExists($path);

        $acl2 = new StaticACL($path); //auto loadFromFile
        //~ $acl2->loadFromFile($path);
        $this->assertTrue($acl2->isLoadFromFile());

        $this->assertSame($acl->getRoles(), $acl2->getRoles());
        $this->assertSame($acl->getResources(), $acl2->getResources());
        $this->assertSame($acl->getRules(), $acl2->getRules());

        //obsah roli, zdroju a prav je naptosto totozny, a je to rychleji nactene!
        $this->assertTrue($acl2->isAllowed('registrovany', 'ankety', 'vote'));
        $this->assertTrue($acl2->isAllowed('registrovany', 'clanky', 'view'));
        $this->assertFalse($acl2->isAllowed('registrovany', 'komentare', 'del'));
        $this->assertTrue($acl2->isAllowed('moderator', 'komentare', 'del'));
        $this->assertTrue($acl2->isAllowed('admin', 'administrace', 'cokoliv'));

        unlink($path);
    }

    /**
     * @expectedException classes\ExceptionAuthorizator
     */
    public function testAclException1() {
        $acl = new StaticACL;
        $acl->addRole('guest')
            ->addRole('guest');
    }

    /**
     * @expectedException classes\ExceptionAuthorizator
     */
    public function testAclException2() {
        $acl = new StaticACL;
        $acl->addRole('guest')
            ->addRole('guest1', 'guestX');
    }

    /**
     * @expectedException classes\ExceptionAuthorizator
     */
    public function testAclException3() {
        $acl = new StaticACL;
        $acl->addResource('anketa')
            ->addResource('anketa');
    }

    /**
     * @expectedException classes\ExceptionAuthorizator
     */
    public function testAclException4() {
        $acl = new StaticACL;
        $acl->addResource('anketa')
            ->addResource('anketa1', 'anketaX');
    }

    public function testSimpleAuthenticator() {
        $list = array('a' => array('b', array('gui')), 'l' => array('h', array('reg')));
        $a = new SimpleRuleAuthenticator($list);
        $this->assertEquals(new Identity('a', array('gui')), $a->authenticate(array('a', 'b')));
    }

    /**
     * @expectedException classes\ExceptionAuthenticator
     */
    public function testSimpleAuthenticatorException1() { //bad array format
        $list = array('a' => 'b', 'l' => 'h');
        $a = new SimpleRuleAuthenticator($list);
        $this->assertEquals(new Identity('a', array('gui')), $a->authenticate(array('a', 'b')));
    }

    /**
     * @expectedException classes\ExceptionAuthenticator
     */
    public function testSimpleAuthenticatorException2() { //bad login
        $list = array('a' => array('b', array('gui')), 'l' => array('h', array('reg')));
        $a = new SimpleRuleAuthenticator($list);
        $this->assertEquals(new Identity('a', array('gui')), $a->authenticate(array('a1', 'b')));
    }

    /**
     * @expectedException classes\ExceptionAuthenticator
     */
    public function testSimpleAuthenticatorException3() { //bad pass
        $list = array('a' => array('b', array('gui')), 'l' => array('h', array('reg')));
        $a = new SimpleRuleAuthenticator($list);
        $this->assertEquals(new Identity('a', array('gui')), $a->authenticate(array('a', 'b1')));
    }
}