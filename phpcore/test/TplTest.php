<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Tpl" tpl.php
 * mv -v TplTest.php ../test/
 */

class __Pokus {
  public static function getPath() { return 'paticka'; }
}

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-12-16 at 23:53:17.
 */
class TplTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Tpl
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Tpl;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Tpl::clearAll
     * @covers classes\Tpl::getConfigure
     * @covers classes\Tpl::setConfigure
     */
    public function testGetConfigure()
    {
        $this->object->clearAll();  // vycisteni compile slozek

        $this->assertFalse(Tpl::getConfigure('auto_create'));
        $this->assertFalse(Tpl::getConfigure('force_compile'));

        Tpl::setConfigure('auto_create', true);
        $this->assertTrue(Tpl::getConfigure('auto_create'));
        Tpl::setConfigure('force_compile', true);
        $this->assertTrue(Tpl::getConfigure('force_compile'));

        Tpl::setConfigure(array('auto_create' => false, 'force_compile' => false));
    }

    /**
     * @covers classes\Tpl::getConfigure
     * @covers classes\Tpl::setConfigure
     */
    public function testGetConfigure2()
    {
        $this->assertFalse(Tpl::getConfigure('auto_create'));
        $this->assertFalse(Tpl::getConfigure('force_compile'));

        Tpl::setConfigure(array('auto_create' => true, 'force_compile' => true));

        $this->assertTrue(Tpl::getConfigure('auto_create'));
        $this->assertTrue(Tpl::getConfigure('force_compile'));

        Tpl::setConfigure(array('auto_create' => false, 'force_compile' => false));
    }

    /**
     * @expectedException classes\ExceptionTpl
     */
    public function testGetConfigure3()
    {
        Tpl::getConfigure('neco');
    }

    /**
     * @expectedException classes\ExceptionTpl
     */
    public function testGetConfigure4()
    {
        Tpl::setConfigure('neco');
    }

    /**
     * @expectedException classes\ExceptionTpl
     */
    public function testGetConfigure5()
    {
        Tpl::setConfigure(array('neco' => 'a', ));
    }

    /**
     * @covers classes\Tpl::compileVar
     */
    public function testCompileVar()
    {
        $this->assertEquals('$uri[\'id\']', Tpl::compileVar('$uri.id'));
        $this->assertEquals('$uri[\'id\'][\'pid\']', Tpl::compileVar('$uri.id.pid'));
        $this->assertEquals('$uri[\'5\'][\'pid\']', Tpl::compileVar('$uri.5.pid'));
        $this->assertEquals('$uri[\'0\']', Tpl::compileVar('$uri.0'));
        $this->assertEquals('$uri[$id][\'0\']', Tpl::compileVar('$uri.$id.0'));
    }

    /**
     * @covers classes\Tpl::assign
     * @covers classes\Tpl::template
     * @covers classes\Tpl::render
     * @covers classes\Tpl::__toString
     */
    public function testAssign()
    {
        Tpl::setConfigure(array('auto_create' => false, 'force_compile' => true));

        $assert = array(
                        'html' => 'classes\Html',
                        'htmlObjekt' => Html::span(),
                        'prazdnePole' => array(),
                        'multiPole' => array('a' => array(1,2,3), 'b' => array(4,5,6), 'c' => array(7,8,9)),
                        'pokusText' => 'Žluťoučký kůň ůpěl ďábelskými tóny ve strašné agóni',
                        'pokus' => 'classes\__Pokus',
                        'code' => 'kod: {$html}, priklad: {$aa=(32-16)*3}{$aa}',
                        );
        $this->object->assign('promennaA', 'hodnota')
                    ->assign('promennaB', 123)
                    ->assign('promennaC', 3.14)
                    ->assign('promennaPole', array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4))
                    ->assign('active', true)
                    ->assign($assert);

        //~ $this->object->clear('example');  // predvycisteni

        //POZN: NEODSTRANOVAT BILE ZNAKY!!

        $this->assertEquals(
'A: hodnota
B: <p>123</p>
C: <i>3.14</i>
ternar 1: ahoj
ternar 2: neahoj
ternar 3: ahoj
ternar 4: class="active"
pocet pismen (ignoruje UTF-8): 66
pocet pismen (neignoruje UTF-8): 51
nekolik pismen: Žluť
nekolik pismen: Žluťou
prazdny radek vypoctu: 4
nekorektne: Array
index pole: 1,3
konstanta 1: '.PHP_VERSION.'
konstanta 2: '.PHP_OS.'
konstanta 3: 1
konstanta 4: 1
neparsovani: ahoj {#PHP_VERSION#} se neparsuje
neparsovani2: {{loginForm.input.$valid}}
podminka 1: pole.a==1
podminka 2:
podminka 3: pole.a==2
podminka 4: pole.a!=2
podminka 5: je a 1
podminka 6: False
podminka 7: True
html: <div>ahoj svete!</div>
html objekt: <span id="ahoj">textik</span>
loop:
pole: a->1,b->2,c->3,d->4,
pole obracene: d->4,c->3,b->2,a->1,
prazdne pole: zadna polozka
pokusna podminka: ano
podminka a loop1: prazdne
podminka a loop2: ,,,
podminka a loop3: ...
podminka a loop4: ,,,...,,,
podminka a loop5: prazdne
podminka a loop6: prazdne
pole break: a->1,
pole vlastni value: a=1,b=2,c=3,d=4,
pole vlastni klic a value: 0)[1]# a=1,1)[2]# b=2,2)[3]# c=3,3)[4]# d=4,
multi pole 1: [a] (1, 2, 3, )[b] (4, 5, 6, )[c] (7, 8, 9, )
multi pole 2: [0 - a] (0 - 1, 1 - 2, 2 - 3, )[1 - b] (0 - 4, 1 - 5, 2 - 6, )[2 - c] (0 - 7, 1 - 8, 2 - 9, )
pole z funkce 1: 1: 5,2: 6,1: 7,2: 8,1: 9,2: 10,
pole z funkce 2: 1: 10,2: 9,1: 8,2: 7,1: 6,2: 5,
pole z pole 1: 4,5,6,
pole z pole 2: 6,5,4,
funkce print_r 1: Array
(
    [a] => 1
    [b] => 2
    [c] => 3
    [d] => 4
)

funkce print_r 2: Array
(
    [a] => 1
    [b] => 2
    [c] => 3
    [d] => 4
)

timestamp: '.strtotime('now').'
datum 1: '.date('Y-m-d H:i:s').'
datum 2: '.date('d.m.Y').'
datum 3: '.date('d.m.Y H:i:s', strtotime('+1 day')).'
datum 4: '.date('d-m-Y').'
datum 5: '.date('d.m.Y H:i:s', strtotime('+1 day')).'
datum 6: '.date('Y-m-d H:i:s').'
datum 7: '.date('d.m.Y H:i:s').'
datum 8: '.date('d.m.Y H:i:s', strtotime('+1 day')).'
datum 9: '.date('Y-m-d H:i:s', strtotime('now')).'
datum10: '.date('Y-m-d H:i:s', strtotime('+1 hour')).'
datum11: '.date('Y-m-d H:i:s', strtotime('+1 hour')).'
preklad 1: prekladany test
preklad 2.1: otevrene okno
preklad 2.2: otevrena okna
komentar:
komentar2:
vlozeno: toto je vkladany template paticky souboru
test prenosu promenne: Žluťoučký kůň ůpěl ďábelskými tóny ve strašné agóni

vypocet z code: 3
include funkce: toto je vkladany template paticky souboru
test prenosu promenne: Žluťoučký kůň ůpěl ďábelskými tóny ve strašné agóni
kompilace: kod: classes\Html, priklad: 48', $this->object->template('example')->render());
    }

    /**
     * @covers classes\Tpl::assign
     * @covers classes\Tpl::template
     * @covers classes\Tpl::render
     * @covers classes\Tpl::__toString
     */
    public function testAssign2()
    {
      $this->object->assign('pokusText', 'Žluťoučký kůň ůpěl ďábelskými tóny ve strašné agónich');
      $this->assertEquals('toto je vkladany template ze subadresare
test prenosu promenne: Žluťoučký kůň ůpěl ďábelskými tóny ve strašné agónich', $this->object->template('subdir/subpaticka')->render());
    }

    /**
     * @expectedException classes\ExceptionTpl
     */
    public function testRenderException1() {  // spatna podminka
      $this->assertEquals($this->object->template('exc1')->render());
    }

    /**
     * @expectedException classes\ExceptionTpl
     */
    public function testRenderException2() {  // spatny cyklus
      $this->assertEquals($this->object->template('exc2')->render());
    }

    /**
     * @covers classes\Tpl::draw
     * @covers classes\Tpl::assign
     * @covers classes\Tpl::render
     * @covers classes\Tpl::__toString
     */
    public function testFactory()
    {
        $this->assertEquals('toto je vkladany template paticky souboru
test prenosu promenne: ahoj svete', Tpl::draw('paticka')->assign('pokusText', 'ahoj svete')->render());
    }

    /**
     * @covers classes\Tpl::clear
     * @todo   Implement testClear().
     */
    //~ public function testClear()
    //~ {
        //~ $this->object->clear('example');
    //~ }
}
