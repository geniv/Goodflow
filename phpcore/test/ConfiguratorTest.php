<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Configurator" configurator.php
 * mv -v ConfiguratorTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-06-07 at 14:09:47.
 */
class ConfiguratorTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Configurator
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new Configurator;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeDateTime()
    {
        $r = Configurator::encode(new \DateTime);
        $this->assertEquals('{date: "'.date('Y-m-d H:i:s').'", timezone_type: 3, timezone: Europe/Berlin}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeStdClass()
    {
        $r = Configurator::encode(new \stdClass);
        $this->assertEquals('{}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray()
    {
        $r = Configurator::encode(array('a' => 5));
        $this->assertEquals('{a: 5}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray2()
    {
        $r = Configurator::encode(array('a' => true));
        $this->assertEquals('{a: true}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray3()
    {
        $r = Configurator::encode(array('a' => 5.69));
        $this->assertEquals('{a: 5.69}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray4()
    {
        $r = Configurator::encode(array('a' => '5.69alfa'));
        $this->assertEquals('{a: 5.69alfa}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray5()
    {
        $r = Configurator::encode(array('a' => array('b' => array('c' => array('d' => 88)))));
        $this->assertEquals('{a: {b: {c: {d: 88}}}}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray6()
    {
        $r = Configurator::encode(array('a' => new \DateTime));
        $this->assertEquals('{a: {date: "'.date('Y-m-d H:i:s').'", timezone_type: 3, timezone: Europe/Berlin}}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray7()
    {
        $o = new \stdClass;
        $o->a = 5;
        $r = Configurator::encode(array('a' => serialize($o)));
        $this->assertEquals('{a: "O:8:\"stdClass\":1:{s:1:\"a\";i:5;}"}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray8()
    {
        $r = Configurator::encode(array('a' => array(1, 2, 3)));
        $this->assertEquals('{a: [1, 2, 3]}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray9()
    {
        $r = Configurator::encode(array('a' => array(1, 2, array(3, 2, 0))));
        $this->assertEquals('{a: [1, 2, [3, 2, 0]]}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray10()
    {
        $r = Configurator::encode(array('a' => array(1, 2, 'b' => array(3, 2, 0))));
        $this->assertEquals('{a: {0: 1, 1: 2, b: [3, 2, 0]}}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray11()
    {
        $o = new ConfiguratorEntity;
        $o->value = 'Column';
        $o->attributes = array('type' => 'integer');
        $r = Configurator::encode(array('a' => $o));
        $this->assertEquals('{a: Column(type: integer)}', $r);
    }

    /**
     * @covers classes\Configurator::encode
     */
    public function testEncodeArray12()
    {
        $r = Configurator::encode(array(4, 5, 6));
        $this->assertEquals('[4, 5, 6]', $r);
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode()
    {
        $t = '{date: "'.date('Y-m-d H:i:s').'", timezone_type: 3, timezone: Europe/Berlin}';
        $this->assertEquals(array('date' => date('Y-m-d H:i:s'), 'timezone_type' => 3, 'timezone' => 'Europe/Berlin'), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode2()
    {
        $t = '{}';
        $this->assertEquals(array(), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode3()
    {
        $t = '{a: 5}';
        $this->assertEquals(array('a' => 5), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode4()
    {
        $t = '{a: true}';
        $this->assertEquals(array('a' => true), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode5()
    {
        $t = '{a: 5.69}';
        $this->assertEquals(array('a' => 5.69), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode6()
    {
        $t = '{a: 5.69alfa}';
        $this->assertEquals(array('a' => '5.69alfa'), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode7()
    {
        $t = '{a: {b: {c: {d: 88}}}}';
        $this->assertEquals(array('a' => array('b' => array('c' => array('d' => 88)))), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode8()
    {
        $t = '{a: "O:8:\"stdClass\":1:{s:1:\"a\";i:5;}"}';
        $o = new \stdClass;
        $o->a = 5;
        $this->assertEquals(array('a' => serialize($o)), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode9()
    {
        $t = '{a: [1, 2, 3]}';
        $this->assertEquals(array('a' => array(1, 2, 3)), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode10()
    {
        $t = '{a: [1, 2, [3, 2, 0]]}';
        $this->assertEquals(array('a' => array(1, 2, array(3, 2, 0))), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode11()
    {
        $t = '{a: {0: 1, 1: 2, b: [3, 2, 0]}}';
        $this->assertEquals(array('a' => array(1, 2, 'b' => array(3, 2, 0))), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode12()
    {
        $t = '{a: Sloupec(typ: 12.3, vv: 44)}';
        $o = new ConfiguratorEntity;
        $o->value = 'Sloupec';
        $o->attributes = array('typ' => 12.3, 'vv' => 44);
        $this->assertEquals(array('a' => $o), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode13()
    {
        $t = '[4, 5, 6]';
        $this->assertEquals(array(4, 5, 6), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode14()
    {
        $t = <<<T
name: Homer

address:
	street: 742 Evergreen Terrace
	city: Springfield
	country: USA

phones: { home: 555-6528, work: 555-7334 }

children:
	- Bart
	- Lisa
	- Maggie

entity: Column(type="integer")
T;

        $o = new ConfiguratorEntity;
        $o->value = 'Column';
        $o->attributes = array('type' => 'integer');

        $this->assertEquals(array('name' => 'Homer',
                            'address' => array('street' => '742 Evergreen Terrace', 'city' => 'Springfield', 'country' => 'USA'),
                            'phones' => array('home' => '555-6528', 'work' => '555-7334'),
                            'children' => array('Bart', 'Lisa', 'Maggie'),
                            'entity' => $o,
                            ), Configurator::decode($t));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode15()
    {
        $config = array(
            'php' => array(
                'date.timezone' => 'Europe/Prague',
                'zlib.output_compression' => true,
            ),
            'database' => array(
                'driver' => 'mysql',
                'username' => 'root',
                'password' => 'beruska92',
            ),
            'users' => array(
                'Dave',
                'Kryten',
                'Rimmer',
            ),
        );

        $get = '
php:
    date.timezone: Europe/Prague
    zlib.output_compression: true

database:
    driver: mysql
    username: root
    password: beruska92

users: [
    Dave, Kryten, Rimmer
]
        ';
        $this->assertEquals($config, Configurator::decode($get));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode16()  //SPACE
    {
        $config = array(
            'php' => array(
                'date.timezone' => 'Europe/Prague',
                'zlib.output_compression' => true,
            ),
            'database' => array(
                'driver' => 'mysql',
                'username' => 'root',
                'password' => 'beruska92',
            ),
            'users' => array(
                'Dave',
                'Kryten',
                'Rimmer',
            ),
        );

        $get = '
# my web application config

php:
    date.timezone: Europe/Prague
    zlib.output_compression: true

database:
    driver: mysql
    username: root
    password: beruska92

users:
    - Dave
    - Kryten
    - Rimmer
        ';
        $this->assertEquals($config, Configurator::decode($get));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode17()  //TAB
    {
        $config = array(
            'php' => array(
                'date.timezone' => 'Europe/Prague',
                'zlib.output_compression' => true,
            ),
            'database' => array(
                'driver' => 'mysql',
                'username' => 'root',
                'password' => 'beruska92',
            ),
            'users' => array(
                'Dave',
                'Kryten',
                'Rimmer',
            ),
        );

        $get = '
# my web application config

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
        ';
        $this->assertEquals($config, Configurator::decode($get));
    }

    /**
     * @covers classes\Configurator::decode
     */
    public function testDecode18()
    {
        $config = array(
            'php' => array(
                'date.timezone' => 'Europe/Prague',
                'zlib.output_compression' => true,
                'date' => new \DateTime,
            ),
            'database' => array(
                'driver' => 'mysql',
                'username' => 'root',
                'password' => 'beruska92',
            ),
            'users' => array(
                'Dave',
                'Kryten',
                'Rimmer',
            ),
        );

        $json = '
{
"php": {
    "date.timezone": "Europe\/Prague",
    "zlib.output_compression": true
    "date": '.date('Y-m-d H:i:s').'
},
"database": {
    "driver": "mysql",
    "username": "root",
    "password": "beruska92"
},
"users": [
    "Dave", "Kryten", "Rimmer"
]
}
        ';
        $this->assertEquals($config, Configurator::decode($json));
    }

    /**
     * @covers classes\Configurator::decode
     * @expectedException InvalidArgumentException
     */
    public function testDecode19()
    {
        Configurator::decode(123);
    }

    /**
     * @covers classes\Configurator::decode
     * @expectedException classes\ExceptionConfigurator
     */
    public function testDecode20()
    {
        $get = '
# my web application config

php:
    date.timezone: Europe/Prague
    zlib.output_compression: true
    zlib.output_compression: false
        ';
        Configurator::decode($get);
    }

    /**
     * @covers classes\Configurator::decodeVariable
     */
    public function testDecodeVariable()
    {
        $get = '
# my web application config

php:
	date.timezone: Europe/Prague
	zlib.output_compression: true

database:
	driver: mysql
	username: root
	password: beruska92

users:
	- Dave
	- Kryten
	- Rimmer
        ';
        $this->assertNull(Configurator::decodeVariable($get, ''));
        $this->assertNull(Configurator::decodeVariable('file.neon', ''));
        $this->assertNull(Configurator::decodeVariable('file.neon', null));
        $this->assertEquals(array('date.timezone' => 'Europe/Prague', 'zlib.output_compression' => true), Configurator::decodeVariable($get, 'php'));
        $this->assertEquals(array('date.timezone' => 'Europe/Prague', 'zlib.output_compression' => true), Configurator::decodeVariable($get, array('php')));
        $this->assertEquals(array('date.timezone' => 'Europe/Prague', 'zlib.output_compression' => true), Configurator::decodeVariable($get, array('php', 'nicehonic')));
        $this->assertEquals(array('date.timezone' => 'Europe/Prague', 'zlib.output_compression' => true), Configurator::decodeVariable($get, array('php', '')));
        $this->assertEquals(array('date.timezone' => 'Europe/Prague', 'zlib.output_compression' => true), Configurator::decodeVariable($get, array('php', null)));
        $this->assertEquals('beruska92', Configurator::decodeVariable($get, array('database', 'password')));
    }
}