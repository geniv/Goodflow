<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Language" language.php
 * mv -v LanguageTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-11-30 at 16:31:25.
 */
class LanguageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Language
     */
    protected $object;
    protected $langlist = array(
                                'cs' => array('cs_CZ', 'Česky'),
                                'en' => array('en_US', 'Americky'),
                                //~ 'pl' => array('pl_PL', 'Gemblersky'),
                                );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = Language::getInstance();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Language::setListLanguage
     * @covers classes\Language::getListLanguage
     */
    public function testSetListLanguage()
    {
        $this->object->setListLanguage($this->langlist);
        $this->assertEquals($this->langlist, $this->object->getListLanguage());
    }

    /**
     * @covers classes\Language::getLanguageCodes
     */
    public function testGetLanguageCodes()
    {
        $this->assertEquals(array('cs' => 'cs_CZ', 'en' => 'en_US'), $this->object->getLanguageCodes());
    }

    /**
     * @covers classes\Language::getLanguageNames
     */
    public function testGetLanguageNames()
    {
        $this->assertEquals(array('cs' => 'Česky', 'en' => 'Americky'), $this->object->getLanguageNames());
    }

    /**
     * @covers classes\Language::getLanguage
     * @covers classes\Language::setLanguage
     */
    public function testGetLanguage()
    {
        $this->assertNull($this->object->getLanguage());

        $this->object->setLanguage('en');
        $this->assertEquals('en', $this->object->getLanguage());

        $this->object->setLanguage('cs');
        $this->assertEquals('cs', $this->object->getLanguage());
    }

    /**
     * @covers classes\Language::getDefaultLanguage
     * @covers classes\Language::setDefaultLanguage
     */
    public function testGetDefaultLanguage()
    {
        $this->object->setDefaultLanguage('cs');  // stranky jsou ve vychozim jazyku cesky
        $this->assertEquals('cs', $this->object->getDefaultLanguage());

        $this->object->setDefaultLanguage('en');  //stranka defaultne v anglictine
        $this->assertEquals('en', $this->object->getDefaultLanguage());
    }

    /**
     * @covers classes\Language::getLanguageDir
     * @covers classes\Language::setLanguageDir
     */
    public function testGetLanguageDir()
    {
        $this->assertEquals('language', $this->object->getLanguageDir());
        $this->object->setLanguageDir('language1');
        $this->assertEquals('language1', $this->object->getLanguageDir());
        $this->object->setLanguageDir('language');
        $this->assertEquals('language', $this->object->getLanguageDir());
    }

    /**
     * @covers classes\Language::getLanguageDomain
     * @covers classes\Language::setLanguageDomain
     */
    public function testGetLanguageDomain()
    {
        $this->assertEquals('messages', $this->object->getLanguageDomain());
        $this->object->setLanguageDomain('messages1');
        $this->assertEquals('messages1', $this->object->getLanguageDomain());
        $this->object->setLanguageDomain('messages');
        $this->assertEquals('messages', $this->object->getLanguageDomain());
    }

    /**
     * @covers classes\Language::getCodeset
     * @covers classes\Language::setCodeset
     */
    public function testGetCodeset()
    {
        $this->assertEquals('UTF-8', $this->object->getCodeset());
        $this->object->setCodeset('UTF-7');
        $this->assertEquals('UTF-7', $this->object->getCodeset());
        $this->object->setCodeset('UTF-8');
        $this->assertEquals('UTF-8', $this->object->getCodeset());
    }

    /**
     * @covers classes\Language::isChanged
     */
    public function testIsChanged()
    {
        $this->object->setDefaultLanguage('cs');
        $this->object->setLanguage('cs');
        $this->assertEquals($this->object->getDefaultLanguage(), $this->object->getLanguage());
        $this->assertFalse($this->object->isChanged());

        $this->object->setLanguage('en');
        $this->assertTrue($this->object->isChanged());
    }

    /**
     * @covers classes\Language::getAutoCreate
     * @covers classes\Language::setAutoCreate
     */
    public function testGetAutoCreate()
    {
        $this->assertFalse($this->object->getAutoCreate());
        $this->object->setAutoCreate(true); //aktivace auto vytvareni prekladovych souboru
        $this->assertTrue($this->object->getAutoCreate());
    }

    /**
     * @covers classes\Language::initLanguage
     */
    public function testInitLanguageCsCs()
    {
        // cs / cs
        $lang = Language::getInstance();
        $lang->setListLanguage($this->langlist)->setDefaultLanguage('cs')->setLanguage('cs');
        $lang->initLanguage();
        $this->assertEquals('Rychlá hnědá liška skáče přes líného psa.', _('Rychlá hnědá liška skáče přes líného psa.'));
        $this->assertEquals('mám k dispozici několik žárovek', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 0));
        $this->assertEquals('mám k dispozici %s žárovku', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 1));
        $this->assertEquals('mám k dispozici několik žárovek', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 2));
        $this->assertEquals('mám k dispozici několik žárovek', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 3));
        $this->assertEquals('mám k dispozici několik žárovek', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 4));
        $this->assertEquals('mám k dispozici několik žárovek', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 5));
    }

    public function testInitLanguageEnEn()
    {
        // en / en
        $lang = Language::getInstance();
        $lang->setListLanguage($this->langlist)->setDefaultLanguage('en')->setLanguage('en');
        $lang->initLanguage();
        $this->assertEquals('The quick brown fox jumps over a lazy dog.', _('The quick brown fox jumps over a lazy dog.'));
        $this->assertEquals('I have %s light bulbs', ngettext('I have %s light bulb', 'I have %s light bulbs', 0));
        $this->assertEquals('I have %s light bulb', ngettext('I have %s light bulb', 'I have %s light bulbs', 1));
        $this->assertEquals('I have %s light bulbs', ngettext('I have %s light bulb', 'I have %s light bulbs', 2));
        $this->assertEquals('I have %s light bulbs', ngettext('I have %s light bulb', 'I have %s light bulbs', 3));
        $this->assertEquals('I have %s light bulbs', ngettext('I have %s light bulb', 'I have %s light bulbs', 4));
        $this->assertEquals('I have %s light bulbs', ngettext('I have %s light bulb', 'I have %s light bulbs', 5));
    }

    public function testInitLanguageCsEn()
    {
        // cs / en
        $lang = Language::getInstance();
        $lang->setListLanguage($this->langlist)->setDefaultLanguage('cs')->setLanguage('en');
        $lang->initLanguage();
        $this->assertEquals('The quick brown fox jumps over a lazy dog.', _('Rychlá hnědá liška skáče přes líného psa.'));
        $this->assertEquals('I have %s light bulbs', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 0));
        $this->assertEquals('I have %s light bulb', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 1));
        $this->assertEquals('I have %s light bulbs', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 2));
        $this->assertEquals('I have %s light bulbs', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 3));
        $this->assertEquals('I have %s light bulbs', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 4));
        $this->assertEquals('I have %s light bulbs', ngettext('mám k dispozici %s žárovku', 'mám k dispozici několik žárovek', 5));
    }

    public function testInitLanguageEnCs()
    {
        // en / cs
        $lang = Language::getInstance();
        $lang->setListLanguage($this->langlist)->setDefaultLanguage('en')->setLanguage('cs');
        $lang->initLanguage();
        $this->assertEquals('Rychlá hnědá liška skáče přes líného psa.', _('The quick brown fox jumps over a lazy dog.'));
        $this->assertEquals('mám k dispozici %s žárovek', ngettext('I have %s light bulb', 'I have %s light bulbs', 0));
        $this->assertEquals('mám k dispozici %s žárovku', ngettext('I have %s light bulb', 'I have %s light bulbs', 1));
        $this->assertEquals('mám k dispozici %s žárovky', ngettext('I have %s light bulb', 'I have %s light bulbs', 2));
        $this->assertEquals('mám k dispozici %s žárovky', ngettext('I have %s light bulb', 'I have %s light bulbs', 3));
        $this->assertEquals('mám k dispozici %s žárovky', ngettext('I have %s light bulb', 'I have %s light bulbs', 4));
        $this->assertEquals('mám k dispozici %s žárovek', ngettext('I have %s light bulb', 'I have %s light bulbs', 5));
    }

    //~ /**
     //~ * @covers classes\Language::initLanguage
     //~ */
    //~ public function testInitLanguage()
    //~ {
        //~ var_dump(Language::getState());
        //kontrolni formular:
        //~ $callback = function($row) {
          //~ $frm = new $row['form'];
          //~ $frm->addSelect('lang')
                //~ ->setItems($row['list'])
              //~ ->addSubmit('lang_submit', 'Změnit jazyk');
          //~ if ($frm->isSuccess()) {
            //~ var_dump($frm->getValues());
            //~ Core::setRefresh(1, Core::getUrl());
          //~ }
          //~ return $frm;
        //~ };
        //~ echo $callback(array('html' => $html, 'form' => $form, 'list' => $lang->getLanguageNames()));
    //~ }
}
