<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\PDOHelper" pdohelper.php
 * mv -v PDOHelperTest.php ../test/
 */

  class DatabaseHandler extends PDOHelper {

    public function onCreate(PDODatabase $db) {
      switch ($db->getDriverName()) {
        case 'sqlite':
          $create_sql = 'CREATE TABLE IF NOT EXISTS %s (
                        %s INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
                        %s VARCHAR(100) NOT NULL UNIQUE,
                        %s TEXT NULL);';

          //suroviny
          $db->execSQL($create_sql, array('suroviny', '_id', 'nazev', 'popis'));
        break;

        case 'mysql':
          $create_sql = 'CREATE TABLE IF NOT EXISTS `%s` (
                        `%s` INT(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,
                        `%s` VARCHAR(100) NOT NULL UNIQUE,
                        `%s` VARCHAR(100) NULL) ENGINE = InnoDB;';

          //suroviny
          $db->execSQL($create_sql, array('suroviny', '_id', 'nazev', 'popis'));
        break;
      }
    }
  }

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-07-09 at 09:53:24.
 */
class PDOHelperTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PDOHelper
     */
    protected $handler;

    private $mysql_host = array('host' => 'localhost', 'username' => 'root', 'password' => 'geniv');

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //~ $this->handle = new DatabaseHandler($this->dbname);
        //~ $this->db = $this->handle->SQLite2();
        //~ $this->db = $this->handle->SQLite3();
        //~ $this->db = $this->handle->MySQL();

        $this->handler = new DatabaseHandler('test');
        $this->db = $this->handler->MySQL($this->mysql_host)->getDatabase(true);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->handler->close();
    }


    /**
     * PDOHelper
     */


    /**
     * @covers classes\PDOHelper::SQLite2
     */
    public function testSQLite2()
    {
        //~ $db = $handle->SQLite2();
        //~ $handle = new DatabaseHandler(null);
        //~ $db = $handle->SQLite2()->getDatabase(true);
        //~ var_dump($db);
        $this->assertFalse(in_array('sqlite2', PDODatabase::getAvailableDrivers()));
    }

    /**
     * @covers classes\PDOHelper::SQLite3
     * @covers classes\PDOHelper::getSQLitePath
     */
    public function testSQLite3()
    {
        $handle = new DatabaseHandler(null);
        $db = $handle->SQLite3()->getDatabase(true);
        $this->assertTrue($db->isSQLite());
        $this->assertEquals(PDOHelper::SQLITE_MEMORY, $handle->getSQLitePath());
        $this->assertTrue($handle->deleteDatabase());
        $handle->close();
    }

    /**
     * @covers classes\PDOHelper::SQLite3
     */
    public function testSQLite3_1()
    {
        $handle = new DatabaseHandler(null);
        $db = $handle->SQLite3()->getDatabase(true);
        $this->assertEquals('0', $db->rawQuery('PRAGMA foreign_keys')->getRow()->foreign_keys);
    }

    /**
     * @covers classes\PDOHelper::SQLite3
     */
    public function testSQLite3_2()
    {
        $handle = new DatabaseHandler(null);
        $db = $handle->SQLite3(null, true)->getDatabase(true);
        $this->assertEquals('1', $db->rawQuery('PRAGMA foreign_keys')->getRow()->foreign_keys);
    }

    /**
     * @covers classes\PDOHelper::getSQLitePath
     */
    public function testGetSQLitePath()
    {
        $handle = new DatabaseHandler('test1');
        $db = $handle->SQLite3()->getDatabase(true);
        $this->assertTrue($db->isSQLite());
        $this->assertEquals('test1', $handle->getSQLitePath());
        $this->assertFileExists('test1');
    }

    /**
     * @covers classes\PDOHelper::deleteDatabase
     */
    public function testDeleteDatabase()
    {
        $handle = new DatabaseHandler('test1');
        $db = $handle->SQLite3()->getDatabase(true);
        $this->assertTrue($db->isSQLite());
        $this->assertFileExists('test1');
        $this->assertTrue($handle->deleteDatabase());
        $this->assertFileNotExists('test1');
    }

    /**
     * @covers classes\PDOHelper::MySQL
     */
    public function testMySQL()
    {
        $handle = new DatabaseHandler('test');
        $db = $handle->MySQL('localhost', 'root', 'geniv')->getDatabase(true);
        $this->assertTrue($db->isMySQL());
    }

    /**
     * @covers classes\PDOHelper::MySQL
     */
    public function testMySQL2()
    {
        $handle = new DatabaseHandler('test');
        $db = $handle->MySQL($this->mysql_host)->getDatabase(true);
        $this->assertTrue($db->isMySQL());
    }

    /**
     * @covers classes\PDOHelper::MySQL
     * @expectedException PDOException
     */
    public function testMySQL3()
    {
      $handle = new DatabaseHandler('smoula');
      $handle->MySQL($this->mysql_host)->getDatabase(true);
    }

    /**
     * @covers classes\PDOHelper::MySQL
     * @expectedException PDOException
     */
    public function testMySQL4()
    {
        $handle = new DatabaseHandler('test');
        $handle->MySQL('loukl', 'root', 'geniv')->getDatabase(true);
    }

    /**
     * @covers classes\PDOHelper::MySQL
     * @expectedException PDOException
     */
    public function testMySQL5()
    {
        $handle = new DatabaseHandler('test');
        $handle->MySQL('localhost', 'smudla', 'geniv')->getDatabase(true);
    }

    /**
     * @covers classes\PDOHelper::MySQL
     * @expectedException PDOException
     */
    public function testMySQL6()
    {
        $handle = new DatabaseHandler('test');
        $handle->MySQL('localhost', 'root', 'franta')->getDatabase(true);
    }

    /**
     * @covers classes\PDOHelper::MySQL
     * @expectedException PDOException
     */
    public function testMySQL7()
    {
        $handle = new DatabaseHandler('test');
        $handle->MySQL('smudla', 'je', 'hlupak')->getDatabase(true);
    }

    /**
     * @covers classes\PDOHelper::Oci8
     */
    public function testOci8()
    {
        $this->assertFalse(in_array('oci', PDODatabase::getAvailableDrivers()));
    }

    /**
     * @covers classes\PDOHelper::getDatabase
     */
    public function testGetDatabase()
    {
        $handle = new DatabaseHandler(null);
        $this->assertInstanceOf('classes\PDODatabase', $handle->SQLite3()->getDatabase(true));
        $handle->setDatabaseName('test');
        $this->assertInstanceOf('classes\PDODatabase', $handle->MySQL($this->mysql_host)->getDatabase(true));
    }

    /**
     * @covers classes\PDOHelper::getFactoryDatabase
     */
    public function testGetFactoryDatabase() {
        $name = 'testFactory.sqlite3';
        $conf = array(
            'name' => $name,
            'driver' => 'SQLite3',
            'autoinstall' => true,
            );
        $db = DatabaseHandler::getFactoryDatabase($conf);
        $this->assertEquals('sqlite', $db->getDriverName());
        $this->assertFileExists($name);
        $this->assertTrue(unlink($name));
        $this->assertFileNotExists($name);
    }

    /**
     * @covers classes\PDOHelper::getFactoryDatabase
     */
    public function testGetFactoryDatabase1() {
        $name = 'test';
        $conf = array(
            'name' => $name,
            'driver' => 'MySQL',
            'autoinstall' => true,
            'dsn' => $this->mysql_host,    // pole pristupu do db
            );
        $db = DatabaseHandler::getFactoryDatabase($conf);
        $this->assertEquals('mysql', $db->getDriverName());
    }

    /**
     * @covers classes\PDOHelper::getDatabaseName
     */
    public function testGetDatabaseName()
    {
        $handle = new DatabaseHandler('test');
        $this->assertEquals('test', $handle->getDatabaseName());
    }

    /**
     * @covers classes\PDOHelper::setDatabaseName
     */
    public function testSetDatabaseName()
    {
        $handle = new DatabaseHandler(null);
        $this->assertNull($handle->getDatabaseName());
        $handle->setDatabaseName('test');
        $this->assertEquals('test', $handle->getDatabaseName());
    }

    /**
     * @covers classes\PDOHelper::getDatabasePath
     */
    public function testGetDatabasePath()
    {
        $handle = new DatabaseHandler('test');
        $this->assertNull($handle->getDatabasePath());
    }

    /**
     * @covers classes\PDOHelper::setDatabasePath
     */
    public function testSetDatabasePath()
    {
        $handle = new DatabaseHandler('test');
        $this->assertNull($handle->getDatabasePath());
        $handle->setDatabasePath(__DIR__);
        $this->assertEquals(__DIR__, $handle->getDatabasePath());
    }

    /**
     * @covers classes\PDOHelper::getCharset
     */
    public function testGetCharset()
    {
        $handle = new DatabaseHandler('test');
        $this->assertEquals('utf8', $handle->getCharset());
    }

    /**
     * @covers classes\PDOHelper::setCharset
     */
    public function testSetCharset()
    {
        $handle = new DatabaseHandler('test');
        $this->assertEquals('utf8', $handle->getCharset());
        $handle->setCharset('utf16');
        $this->assertEquals('utf16', $handle->getCharset());
    }


    /**
     * PDODatabase
     */


    /**
     * @covers classes\PDODatabase::getPDO
     */
    public function testGetPDO()
    {
        $this->assertInstanceOf('PDO', $this->db->getPDO());
        $this->assertTrue($this->db->truncate('suroviny')); // vycisteni tabulky
    }

    /**
     * @covers classes\PDODatabase::beginTransaction
     * @covers classes\PDODatabase::endTransaction
     * @covers classes\PDODatabase::inTransaction
     */
    public function testTransaction()
    {
        $this->assertFalse($this->db->inTransaction());
        $this->assertTrue($this->db->beginTransaction());
        $this->assertTrue($this->db->inTransaction());
        $this->assertEquals(0, $this->db->query('suroviny')->getCount());
        $this->assertTrue($this->db->endTransaction());
    }

    /**
     * @covers classes\PDODatabase::beginTransaction
     * @covers classes\PDODatabase::rollBack
     * @covers classes\PDODatabase::inTransaction
     * BACHA funguje jen pro engine ktere to podporuji, napr: InnoDB
     */
    public function testTransaction2()
    {
        $this->assertFalse($this->db->inTransaction());
        $this->assertTrue($this->db->beginTransaction());
        $this->assertTrue($this->db->inTransaction());
        $cv = new ContentValues;
        $cv->put('nazev', 'ahoj');
        $this->db->insert('suroviny', $cv);
        $this->assertEquals(1, $this->db->query('suroviny')->getCount());
        $this->assertTrue($this->db->rollBack());
        $this->assertEquals(0, $this->db->query('suroviny')->getCount());
    }

    /**
     * @covers classes\PDODatabase::insert
     */
    public function testInsert()
    {
        $this->assertEquals(0, $this->db->query('suroviny')->getCount());
        $cv = new ContentValues;
        $cv->put('nazev', 'ahoj');
        $this->db->insert('suroviny', $cv);
        $this->assertEquals(1, $this->db->query('suroviny')->getCount());
        $first = $this->db->query('suroviny')->getFirst();
        $this->assertEquals('ahoj', $first->nazev);
        $this->assertEquals('ahoj', $first['nazev']);
    }

    /**
     * @covers classes\PDODatabase::insertOrThrow
     * @covers testInsert
     * @expectedException PDOException
     */
    public function testInsertOrThrow() // pokus o vlozeni duplikatni polozky
    {
        $this->assertEquals(1, $this->db->query('suroviny')->getCount());
        $cv = new ContentValues;
        $cv->put('nazev', 'ahoj');
        $this->db->insertOrThrow('suroviny', $cv);
    }

    /**
     * @covers classes\PDODatabase::insertMultiple
     */
    public function testInsertMultiple()
    {
        $p = array(
            ContentValues::init()->put('nazev', 'a'),
            ContentValues::init()->put('nazev', 'b'),
            ContentValues::init()->put('nazev', 'c'),
          );
        $this->assertEquals(3, $this->db->insertMultiple('suroviny', $p));
        $this->assertEquals(4, $this->db->query('suroviny')->getCount());
    }

    /**
     * @covers classes\PDODatabase::insertMultiple
     */
    public function testInsertMultipleData()
    {
        $p = array('a', 'ahoj', 'b', 'c');
        foreach ($this->db->query('suroviny', 'nazev') as $i => $v) {
          $this->assertEquals($p[$i], $v);
        }
    }

    /**
     * @covers classes\PDODatabase::insertMultiple
     */
    //~ public function testInsertMultipleFail1()
    //~ {
        //~ $p = array(ContentValues::init(array('a' => 3)))+range(0, 2);
        //~ $this->db->insertMultiple('suroviny', $p);
        //~ $this->assertEquals(4, $this->db->query('suroviny')->getCount());
    //~ }

    /**
     * @covers classes\PDODatabase::update
     * @covers testInsert
     */
    public function testUpdate()
    {
        $cv = new ContentValues;
        $cv->put('nazev', 'cau');
        $this->db->update('suroviny', $cv, 'nazev=?', array('ahoj'));
        $first = $this->db->query('suroviny')->getFirst();
        $this->assertEquals('cau', $first->nazev);
        $this->assertEquals('cau', $first['nazev']);
    }

    /**
     * @covers classes\PDODatabase::updateOrThrow
     * @covers testInsert
     * @expectedException PDOException
     */
    public function testUpdateOrThrow() // pokus o upraveni na duplikatni polozku
    {
        $cv = new ContentValues;
        $cv->put('nazev', 'huhu');
        $this->db->insert('suroviny', $cv); // vlozeni nove polozky (pro potreby kontroly duplicity)

        $cv = new ContentValues;
        $cv->put('nazev', 'huhu');
        $this->db->updateOrThrow('suroviny', $cv, 'nazev=?', array('cau')); // pokus o upraveni na polozku ktera jiz existuje
    }

    /**
     * @covers classes\PDODatabase::delete
     * @covers testInsert
     */
    public function testDelete()
    {
        $this->assertEquals(1, $this->db->delete('suroviny', 'nazev=?', array('cau')));
        $this->assertEquals(4, $this->db->query('suroviny')->getCount());
    }

    /**
     * @covers classes\PDODatabase::deleteOrThrow
     * @covers testInsert
     */
    public function testDeleteOrThrow() // kvuli mazani zavislosti
    {
        $this->assertEquals(0, $this->db->deleteOrThrow('suroviny', 'nazev=?', array('coze')));
        $this->assertEquals(4, $this->db->query('suroviny')->getCount());
    }

    /**
     * @covers classes\PDODatabase::truncate
     * @covers testInsert
     */
    public function testTruncate()
    {
        $this->assertTrue($this->db->truncate('suroviny'));
        $this->assertEquals(0, $this->db->query('suroviny')->getCount());
    }

    private $predpoklad = array(
        array(1, 'cau'),
        array(2, 'ahoj'),
        array(3, 'nazdar'),
    );

    /**
     * @covers classes\PDODatabase::query
     */
    public function testQuery() // null columns
    {
        // naplneni tabulek
        foreach ($this->predpoklad as $v) {
          $cv = new ContentValues(array('_id' => $v[0], 'nazev' => $v[1]));
          $this->db->insert('suroviny', $cv);
        }

        $this->assertEquals(3, $this->db->query('suroviny')->getCount());

        //~ // test na sloupce
        //~ $c = $this->db->query('suroviny');
        //~ $this->assertEquals(3, $c->getColumnCount());
        //~ getColumnIndex
        //~ getColumnIndexOrThrow
        //~ getColumnName
        //~ getColumnNames
        //~ var_dump($c);

        // test na radky
        $c = $this->db->query('suroviny', null);  // null jako by tam ten parametr nebyl
        // pokud se pouzije: getColumnIndex() nebo getColumnName() je vyiterovany uz jeden radek databaze!
        foreach ($c as $i => $v) {
          // 3 ruzne zpusoby, ->atribut, pole[index], pole['index'], ->metoda(index), ->metoda('index')
          $this->assertEquals($this->predpoklad[$i][0], $v->_id);
          //~ $this->assertEquals($this->predpoklad[$i][0], $v[0]);
          //~ $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
          //~ $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));
          //~ $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));

          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          //~ $this->assertEquals($this->predpoklad[$i][1], $v[1]);
          //~ $this->assertEquals($this->predpoklad[$i][1], $v['nazev']);
          //~ $this->assertEquals($this->predpoklad[$i][1], $v->getString('nazev'));
          //~ $this->assertEquals($this->predpoklad[$i][1], $v->getString(1));

          $this->assertNull($v->popis);
        }
    }

    /**
     * @covers classes\PDODatabase::query
     * @covers testInsert
     */
    public function testQuery2()  // columns
    {
        $c = $this->db->query('suroviny', array('nazev', 'popis'));
        foreach ($c as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertNull($v->popis);
        }
    }

    /**
     * @covers classes\PDODatabase::query
     * @covers testInsert
     */
    public function testQuery3()  // where
    {
        $c = $this->db->query('suroviny', null, 'nazev=?', array('ahoj'));
        foreach ($c as $v) {
          $this->assertEquals($this->predpoklad[1][0], $v->_id);
          $this->assertEquals($this->predpoklad[1][1], $v->nazev);
          $this->assertNull($v->popis);
        }
    }

    /**
     * @covers classes\PDODatabase::query
     * @covers testInsert
     */
    public function testQuery4()  // group
    {
        $c = $this->db->query('suroviny', 'nazev, count(nazev) poc', null, null, 'nazev', null, '_id ASC');
        foreach ($c as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertEquals(1, $v->poc);
        }
    }

    /**
     * @covers classes\PDODatabase::query
     * @covers testInsert
     */
    public function testQuery5()  // having
    {
        $c = $this->db->query('suroviny', 'nazev, count(nazev) poc', null, null, 'nazev', 'poc=1', '_id ASC');
        foreach ($c as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertEquals(1, $v->poc);
        }
    }

    /**
     * @covers classes\PDODatabase::query
     * @covers testInsert
     */
    public function testQuery6()  // order
    {
        $c = $this->db->query('suroviny', null, null, null, null, null, '_id DESC');
        $poc = 2;
        foreach ($c as $v) {
          $this->assertEquals($this->predpoklad[$poc][1], $v->nazev);
          $poc--;
        }
    }

    /**
     * @covers classes\PDODatabase::query
     * @covers testInsert
     */
    public function testQuery7()  // limit
    {
        $c = $this->db->query('suroviny', 'nazev', null, null, null, null, '_id ASC', '0, 2');
        foreach ($c as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
        }
    }

    /**
     * @covers classes\PDODatabase::rawQuery
     * @covers testInsert
     */
    public function testRawQuery()  // surovy dotaz
    {
        $c = $this->db->rawQuery('SELECT * FROM suroviny');
        foreach ($c as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][0], $v->_id);
          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
        }
    }

    /**
     * @covers classes\PDODatabase::rawQuery
     * @covers testInsert
     */
    public function testRawQuery2()  // surovy dotaz
    {
        $c = $this->db->rawQuery('SELECT * FROM suroviny WHERE nazev=?', array('ahoj'));
        foreach ($c as $v) {
          $this->assertEquals($this->predpoklad[1][0], $v->_id);
          $this->assertEquals($this->predpoklad[1][1], $v->nazev);
        }
    }

    /**
     * @covers classes\PDODatabase::execSQL
     * @covers testInsert
     */
    public function testExecSQL()
    {
        $this->assertEquals(0, $this->db->execSQL('SELECT * FROM suroviny'));
    }

    /**
     * @covers classes\PDODatabase::execSQL
     * @covers testInsert
     */
    public function testExecSQL2()
    {
        $this->assertEquals(0, $this->db->execSQL('SELECT * FROM suroviny WHERE nazev="%s"', array('ahoj')));
    }

    /**
     * @covers classes\PDODatabase::getAvailableDrivers
     */
    public function testGetAvailableDrivers()
    {
        $this->assertEquals(\PDO::getAvailableDrivers(), $this->db->getAvailableDrivers());
        $this->assertEquals(\PDO::getAvailableDrivers(), PDODatabase::getAvailableDrivers());
    }

    /**
     * @covers classes\PDODatabase::getDriverName
     */
    public function testGetDriverName()
    {
        $this->assertEquals('mysql', $this->db->getDriverName());
    }

    /**
     * @covers classes\PDODatabase::isMySQL
     */
    public function testIsMySQL()
    {
        $this->assertTrue($this->db->isMySQL());
        $this->assertFalse($this->db->isSQLite());
        $this->assertFalse($this->db->isOCI8());
    }


    /**
     * ContentValues
     */


    /**
     * @covers classes\ContentValues::__construct
     */
    public function test__construct()
    {
        $cv = new ContentValues;
        $this->assertEquals(0, $cv->size());
        $this->assertInstanceOf('classes\ContentValues', $cv);
    }

    /**
     * @covers classes\ContentValues::__construct
     */
    public function test__construct2()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 33, 'c' => 'ahoj'));
        $this->assertEquals(3, $cv->size());
        //~ $this->assertInstanceOf('classes\ContentValues', $cv);
        //~ $this->assertTrue($cv->contains('c'));
    }

    /**
     * @covers classes\ContentValues::clear
     */
    public function testClear()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 33, 'c' => 'ahoj'));
        $this->assertEquals(3, $cv->size());
        $cv->clear();
        $this->assertEquals(0, $cv->size());
    }

    /**
     * @covers classes\ContentValues::containsKey
     */
    public function testContainsKey()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 33, 'c' => 'ahoj'));
        $this->assertTrue($cv->containsKey('a'));
        $this->assertTrue($cv->containsKey('b'));
        $this->assertTrue($cv->containsKey('c'));
        $this->assertFalse($cv->containsKey('d'));
    }

    /**
     * @covers classes\ContentValues::get
     */
    public function testGet()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 33, 'c' => 'ahoj'));
        $this->assertEquals(11, $cv->get('a'));
        $this->assertEquals(33, $cv->get('b'));
        $this->assertEquals('ahoj', $cv->get('c'));
        $this->assertNull($cv->get('d'));
    }

    /**
     * @covers classes\ContentValues::getAsBoolean
     */
    public function testGetAsBoolean()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => false, 'c' => true));
        $this->assertTrue($cv->getAsBoolean('a'));
        $this->assertFalse($cv->getAsBoolean('b'));
        $this->assertTrue($cv->getAsBoolean('c'));
    }

    /**
     * @covers classes\ContentValues::getAsFloat
     */
    public function testGetAsFloat()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 54.9, 'c' => (int) 73.8, 'd' => 'ag'));
        $this->assertEquals(11.0, $cv->getAsFloat('a'));
        $this->assertEquals(54.9, $cv->getAsFloat('b'));
        $this->assertEquals(73.0, $cv->getAsFloat('c'));
        $this->assertEquals(0, $cv->getAsFloat('d'));
    }

    /**
     * @covers classes\ContentValues::getAsInteger
     */
    public function testGetAsInteger()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 54.9, 'c' => (int) 73.8, 'd' => 'ag'));
        $this->assertEquals(11, $cv->getAsInteger('a'));
        $this->assertEquals(54, $cv->getAsInteger('b'));
        $this->assertEquals(73, $cv->getAsInteger('c'));
        $this->assertEquals(0, $cv->getAsInteger('d'));
    }

    /**
     * @covers classes\ContentValues::getAsString
     */
    public function testGetAsString()
    {
        $cv = new ContentValues(array('a' => 11, 'b' => 54.9, 'c' => (int) 73.8, 'd' => 'ag'));
        $this->assertEquals('11', $cv->getAsString('a'));
        $this->assertEquals('54.9', $cv->getAsString('b'));
        $this->assertEquals('73', $cv->getAsString('c'));
        $this->assertEquals('ag', $cv->getAsString('d'));
    }

    /**
     * @covers classes\ContentValues::put
     */
    public function testPut()
    {
        $cv = new ContentValues(array('a' => 11));
        $cv->put('b', 55.4);
        $this->assertEquals(11, $cv->get('a'));
        $this->assertEquals(55.4, $cv->get('b'));
    }

    /**
     * @covers classes\ContentValues::put
     */
    public function testPut2()
    {
        $cv = new ContentValues;
        $cv->put(array('a' => 11, 'b' => 55.4));
        $this->assertEquals(11, $cv->get('a'));
        $this->assertEquals(55.4, $cv->get('b'));
    }

    /**
     * @covers classes\ContentValues::putAll
     */
    public function testPutAll()
    {
        $cv = new ContentValues(array('a' => 11));
        $this->assertEquals(11, $cv->get('a'));
        $cv2 = new ContentValues;
        $cv2->putAll($cv);
        $this->assertEquals(11, $cv2->get('a'));
    }

    /**
     * @covers classes\ContentValues::putNull
     */
    public function testPutNull()
    {
        $cv = new ContentValues(array('a' => 11));
        $this->assertEquals(11, $cv->get('a'));
        $cv->putNull('a');
        $this->assertNull($cv->get('a'));
    }

    /**
     * @covers classes\ContentValues::putBool
     */
    public function testPutBool()
    {
        $cv = new ContentValues;
        $cv->putBool('a', 'aa')->putBool('b', 0)->putBool('c', '')->putBool('d')->putBool('e', 'on');
        $this->assertTrue($cv->get('a'));
        $this->assertFalse($cv->get('b'));
        $this->assertFalse($cv->get('c'));
        $this->assertFalse($cv->get('d'));
        $this->assertTrue($cv->get('e'));
    }

    /**
     * @covers classes\ContentValues::putDate
     */
    public function testPutDate()
    {
        $cv = new ContentValues;
        $cv->putDate('b');
        $this->assertEquals(date('Y-m-d H:i:s'), $cv->get('b'));
    }

    /**
     * @covers classes\ContentValues::putDate
     */
    public function testPutDate2()
    {
        $cv = new ContentValues;
        $cv->putDate('b', '+1 day');
        $this->assertEquals(date('Y-m-d H:i:s', strtotime('+1 day')), $cv->get('b'));
    }

    /**
     * @covers classes\ContentValues::putDate
     */
    public function testPutDate3()
    {
        $cv = new ContentValues;
        $cv->putDate('b', '+2 day', 'd.m.Y');
        $this->assertEquals(date('d.m.Y', strtotime('+2 day')), $cv->get('b'));
    }

    /**
     * @covers classes\ContentValues::remove
     */
    public function testRemove()
    {
        $cv = new ContentValues(array('a' => 15, 'b' => 'hu'));
        $this->assertTrue($cv->containsKey('b'));
        $cv->remove('b');
        $this->assertFalse($cv->containsKey('b'));
    }

    /**
     * @covers classes\ContentValues::size
     */
    public function testSize()
    {
        $cv = new ContentValues(array('a' => 15, 'b' => 'hu', 'c' => 654));
        $this->assertEquals(3, $cv->size());
        $cv->remove('b');
        $this->assertEquals(2, $cv->size());
    }

    /**
     * @covers classes\ContentValues::__toString
     */
    public function test__toString()
    {
        $cv = new ContentValues(array('a' => 15, 'b' => 'hu', 'c' => 654));
        $this->assertEquals('Array
(
    [a] => 15
    [b] => hu
    [c] => 654
)
', $cv->__toString());
    }


    /**
     * PDOCursor
     */


    /**
     * @covers classes\PDOCursor::close
     */
    public function testClose()
    {
        $c = $this->db->query('suroviny');
        $this->assertTrue($c->close());
    }

    /**
     * @covers classes\PDOCursor::getColumnCount
     */
    public function testGetColumnCount()
    {
        $c = $this->db->query('suroviny');
        $this->assertEquals(3, $c->getColumnCount());
    }

    /**
     * @covers classes\PDOCursor::getColumnIndex
     */
    public function testGetColumnIndex()
    {
        $c = $this->db->query('suroviny');
        $this->assertEquals(0, $c->getColumnIndex('_id'));
        $this->assertEquals(1, $c->getColumnIndex('nazev'));
        $this->assertEquals(2, $c->getColumnIndex('popis'));
    }

    /**
     * @covers classes\PDOCursor::getColumnIndexOrThrow
     * @expectedException PDOException
     */
    public function testGetColumnIndexOrThrow()
    {
        $c = $this->db->query('suroviny');
        $c->getColumnIndexOrThrow('nazevX');
    }

    /**
     * @covers classes\PDOCursor::getColumnName
     */
    public function testGetColumnName()
    {
        $c = $this->db->query('suroviny');
        $this->assertEquals('_id', $c->getColumnName(0));
        $this->assertEquals('nazev', $c->getColumnName(1));
        $this->assertEquals('popis', $c->getColumnName(2));
    }

    /**
     * @covers classes\PDOCursor::getColumnNames
     */
    public function testGetColumnNames()
    {
        $c = $this->db->query('suroviny');
        $this->assertEquals(array('_id', 'nazev', 'popis'), $c->getColumnNames());
    }

    /**
     * @covers classes\PDOCursor::getCount
     * @covers classes\PDOCursor::count
     */
    public function testGetCount()
    {
        $c = $this->db->query('suroviny');
        $this->assertEquals(3, $c->getCount());
        $this->assertEquals(3, $c->count());
        $this->assertEquals($c->count(), $c->getCount());
    }

    /**
     * @covers classes\PDOCursor::getFirst
     */
    public function testGetFirst()
    {
        $c = $this->db->query('suroviny');
        $first = $c->getFirst();
        $this->assertInstanceOf('classes\PDOCursorData', $first);
        $this->assertEquals(1, $first->_id);
        $this->assertEquals(1, $first['_id']);
        $this->assertEquals(1, $first[0]);
        $this->assertEquals(1, $first->getInt('_id'));
        $this->assertEquals(1, $first->getInt(0));
    }

    /**
     * @covers classes\PDOCursor::getRow
     */
    public function testGetRow()
    {
        $c = $this->db->query('suroviny');
        $first = $c->getRow();
        $this->assertInstanceOf('classes\PDOCursorData', $first);
        $this->assertEquals(1, $first->_id);
        $this->assertEquals(1, $first['_id']);
        $this->assertEquals(1, $first[0]);
        $this->assertEquals(1, $first->getInt('_id'));
        $this->assertEquals(1, $first->getInt(0));
    }

    /**
     * @covers classes\PDOCursor::getAll
     */
    public function testGetAll()
    {
        $c = $this->db->query('suroviny');
        $all = $c->getAll();
        $this->assertTrue(is_array($all));
        foreach ($all as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][0], $v->_id);
          $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
          $this->assertEquals($this->predpoklad[$i][0], $v[0]);
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));

          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertEquals($this->predpoklad[$i][1], $v['nazev']);
          $this->assertEquals($this->predpoklad[$i][1], $v[1]);
          $this->assertEquals($this->predpoklad[$i][1], $v->getString('nazev'));
          $this->assertEquals($this->predpoklad[$i][1], $v->getString(1));
        }
    }

    /**
     * @covers classes\PDOCursor::getAllRows
     */
    public function testGetAllRows()
    {
        $c = $this->db->query('suroviny');
        $all = $c->getAllRows();
        $this->assertTrue(is_array($all));
        $this->assertEquals(array(1, 2, 3), $all);
    }

    /**
     * @covers classes\PDOCursor::getAllRows
     */
    public function testGetAllRows2()
    {
        $c = $this->db->query('suroviny');
        $all = $c->getAllRows(\PDO::FETCH_COLUMN, 1);
        $this->assertTrue(is_array($all));
        $this->assertEquals(array('cau', 'ahoj', 'nazdar'), $all);
    }

    /**
     * @covers classes\PDOCursor::getIterator
     */
    public function testGetIterator()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getIterator();
        $this->assertInstanceOf('IteratorIterator', $it);
        foreach ($it as $i => $v) {
          $this->assertEquals($this->predpoklad[$i][0], $v->_id);
          $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
          $this->assertEquals($this->predpoklad[$i][0], $v[0]);
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));

          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertEquals($this->predpoklad[$i][1], $v['nazev']);
          $this->assertEquals($this->predpoklad[$i][1], $v[1]);
          $this->assertEquals($this->predpoklad[$i][1], $v->getString('nazev'));
          $this->assertEquals($this->predpoklad[$i][1], $v->getString(1));
        }
    }

    /**
     * @covers classes\PDOCursor::getJavaIterator
     */
    public function testGetJavaIterator()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getJavaIterator();
        $this->assertInstanceOf('classes\__JavaIterator', $it);
        $i = 0;
        while ($it->hasNext()) {
          $v = $it->next();
          $this->assertEquals($this->predpoklad[$i][0], $v->_id);
          $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
          $this->assertEquals($this->predpoklad[$i][0], $v[0]);
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));

          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertEquals($this->predpoklad[$i][1], $v['nazev']);
          $this->assertEquals($this->predpoklad[$i][1], $v[1]);
          $this->assertEquals($this->predpoklad[$i][1], $v->getString('nazev'));
          $this->assertEquals($this->predpoklad[$i][1], $v->getString(1));
          $i++;
        }
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);
        $i = 0;
        do {
          $v = $it->get();
          $this->assertEquals($this->predpoklad[$i][0], $v->_id);
          $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
          $this->assertEquals($this->predpoklad[$i][0], $v[0]);
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));
          $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));

          $this->assertEquals($this->predpoklad[$i][1], $v->nazev);
          $this->assertEquals($this->predpoklad[$i][1], $v['nazev']);
          $this->assertEquals($this->predpoklad[$i][1], $v[1]);
          $this->assertEquals($this->predpoklad[$i][1], $v->getString('nazev'));
          $this->assertEquals($this->predpoklad[$i][1], $v->getString(1));
          $i++;
        } while ($it->moveToNext());
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator2()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $i = $it->getPosition();
        $this->assertEquals(0, $it->getPosition());
        $v = $it->get();
        $this->assertEquals($this->predpoklad[$i][0], $v->_id);
        $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
        $this->assertEquals($this->predpoklad[$i][0], $v[0]);
        $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));
        $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator3()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $it->move(1);
        $this->assertEquals(1, $it->getPosition());

        $v = $it->get();
        $i = $it->getPosition();
        $this->assertEquals($this->predpoklad[$i][0], $v->_id);
        $this->assertEquals($this->predpoklad[$i][0], $v['_id']);
        $this->assertEquals($this->predpoklad[$i][0], $v[0]);
        $this->assertEquals($this->predpoklad[$i][0], $v->getInt('_id'));
        $this->assertEquals($this->predpoklad[$i][0], $v->getInt(0));
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator4()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $this->assertEquals(0, $it->getPosition());
        $this->assertEquals(1, $it->_id);

        $this->assertTrue($it->move(1));
        $this->assertEquals(1, $it->getPosition());
        $this->assertEquals(2, $it->_id);

        $this->assertTrue($it->move(1));
        $this->assertEquals(2, $it->getPosition());
        $this->assertEquals(3, $it->_id);

        $this->assertFalse($it->move(1)); //mimo rozsah
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator5()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $this->assertEquals(0, $it->getPosition());
        $this->assertEquals(1, $it->_id);

        $this->assertTrue($it->moveToPosition(1));
        $this->assertEquals(1, $it->getPosition());
        $this->assertEquals(2, $it->_id);

        $this->assertTrue($it->moveToPosition(2));
        $this->assertEquals(2, $it->getPosition());
        $this->assertEquals(3, $it->_id);

        $this->assertFalse($it->moveToPosition(3)); // mimo rozsah
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator6()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $this->assertEquals(0, $it->getPosition());
        $this->assertTrue($it->isFirst());
        $this->assertFalse($it->isLast());
        $this->assertFalse($it->isAfterLast());
        $this->assertFalse($it->isBeforeFirst());

        $this->assertTrue($it->moveToNext());
        $this->assertEquals(1, $it->getPosition());
        $this->assertFalse($it->isFirst());
        $this->assertFalse($it->isLast());
        $this->assertTrue($it->isAfterLast());
        $this->assertTrue($it->isBeforeFirst());

        $this->assertTrue($it->moveToNext());
        $this->assertEquals(2, $it->getPosition());
        $this->assertFalse($it->isFirst());
        $this->assertTrue($it->isLast());
        $this->assertFalse($it->isAfterLast());
        $this->assertFalse($it->isBeforeFirst());

        $this->assertFalse($it->moveToNext());  // nejde
        $this->assertEquals(2, $it->getPosition());

        $this->assertTrue($it->moveToFirst());
        $this->assertEquals(0, $it->getPosition());

        $this->assertFalse($it->moveToPrevious());  // nejde
        $this->assertEquals(0, $it->getPosition());
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator7()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $this->assertEquals(0, $it->getPosition());
        $this->assertTrue($it->move(1));
        $this->assertEquals(1, $it->getPosition());

        $this->assertTrue($it->move(1));
        $this->assertEquals(2, $it->getPosition());

        $this->assertTrue($it->move(-1));
        $this->assertEquals(1, $it->getPosition());

        $this->assertTrue($it->move(1));
        $this->assertEquals(2, $it->getPosition());

        $this->assertFalse($it->move(1));
        $this->assertEquals(2, $it->getPosition());

        $this->assertTrue($it->move(-2));
        $this->assertEquals(0, $it->getPosition());

        $this->assertTrue($it->move(0));
        $this->assertEquals(0, $it->getPosition());

        $this->assertFalse($it->move(3));
        $this->assertEquals(0, $it->getPosition());

        $this->assertTrue($it->move(2));
        $this->assertEquals(2, $it->getPosition());

        $this->assertFalse($it->move(-3));
        $this->assertEquals(2, $it->getPosition());
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator8()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $this->assertEquals(0, $it->getPosition());
        $this->assertTrue($it->moveToPosition(0));

        $this->assertTrue($it->moveToPosition(1));
        $this->assertEquals(1, $it->getPosition());

        $this->assertFalse($it->moveToPosition(-1));
        $this->assertEquals(1, $it->getPosition());

        $this->assertFalse($it->moveToPosition(5));
        $this->assertEquals(1, $it->getPosition());
    }

    /**
     * @covers classes\PDOCursor::getMoveIterator
     */
    public function testGetMoveIterator9()
    {
        $c = $this->db->query('suroviny');
        $it = $c->getMoveIterator();
        $this->assertInstanceOf('classes\__MoveIterator', $it);

        $this->assertTrue($it->isFirst());
        $this->assertTrue($it->moveToNext());
        $this->assertTrue($it->moveToNext());
        $this->assertFalse($it->moveToNext());
        $this->assertTrue($it->isLast());
        $this->assertTrue($it->moveToPrevious());
        $this->assertTrue($it->moveToPrevious());
        $this->assertFalse($it->moveToPrevious());
        $this->assertTrue($it->isFirst());
    }


    /**
     * PDOCursorData
     */


    /**
     * @covers classes\PDOCursorData::offsetExists
     * @covers classes\PDOCursorData::offsetGet
     * @covers classes\PDOCursorData::offsetSet
     * @covers classes\PDOCursorData::offsetUnset
     */
    public function testArrayAccess()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertTrue(isset($f[0]));
        $this->assertTrue(isset($f['_id']));

        $this->assertFalse(isset($f[10]));
        $this->assertFalse(isset($f['_idX']));

        $this->assertEquals(1, $f[0]);
        $this->assertEquals(1, $f['_id']);

        $this->assertNull($f[10]);
        $this->assertNull($f['_idX']);

        $f['_idX'] = 321;
        $this->assertEquals(321, $f['_idX']);

        unset($f['_idX']);
        $this->assertNull($f['_idX']);
    }

    /**
     * @covers classes\PDOCursorData::__isset
     * @covers classes\PDOCursorData::__get
     * @covers classes\PDOCursorData::__set
     */
    public function testMagicMethods()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();

        $this->assertTrue(isset($f->_id));
        $this->assertFalse(isset($f->_idX));

        $this->assertEquals(1, $f->_id);
        $this->assertNull($f->_idX);

        $f->_idX = 'yyy';
        $this->assertEquals('yyy', $f->_idX);

        unset($f->_idX);
        $this->assertNull($f->_idX);
    }

    /**
     * @covers classes\PDOCursorData::count
     */
    public function testCursorCount()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertEquals(3, $f->count());
        $this->assertEquals(3, count($f));
    }

    /**
     * @covers classes\PDOCursorData::getString
     */
    public function testGetString()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertEquals('1', $f->getString('_id'));
        $this->assertEquals('1', $f->getString(0));
    }

    /**
     * @covers classes\PDOCursorData::getType
     */
    public function testGetType()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertEquals('string', $f->getType('_id'));
        $this->assertEquals('string', $f->getType(0));
    }

    /**
     * @covers classes\PDOCursorData::getBool
     */
    public function testGetBool()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertTrue($f->getBool('_id'));
        $this->assertTrue($f->getBool(0));
    }

    /**
     * @covers classes\PDOCursorData::getFloat
     */
    public function testGetFloat()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertEquals(1.0, $f->getFloat('_id'));
        $this->assertEquals(1.0, $f->getFloat(0));
    }

    /**
     * @covers classes\PDOCursorData::getInt
     */
    public function testGetInt()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertEquals(1, $f->getInt('_id'));
        $this->assertEquals(1, $f->getInt(0));
    }

    /**
     * @covers classes\PDOCursorData::isNull
     */
    public function testIsNull()
    {
        $c = $this->db->query('suroviny');
        $f = $c->getFirst();
        $this->assertFalse($f->isNull('_id'));
        $this->assertFalse($f->isNull(0));

        $this->assertFalse($f->isNull('nazev'));
        $this->assertFalse($f->isNull(1));

        $this->assertTrue($f->isNull('popis'));
        $this->assertTrue($f->isNull(2));
    }
}