<?php
namespace classes;

/**
 * phpunit-skelgen --test -- "classes\Session" session.php
 * mv -v SessionTest.php ../test/
 * phpunit --bootstrap ../classes/session.php SessionTest
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-20 at 14:40:37.
 */
class SessionTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Session
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $_SERVER['HTTP_HOST'] = 'localhost';
        $this->object = new Session;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object->destroy();
    }

    public function testFactory()
    {
        $this->assertEquals($this->object, Session::factory());
    }

    /**
     * @covers Session::start
     */
    public function testStart()
    {
        $this->object->start();
        $this->assertTrue($this->object->isStarted());
    }

    /**
     * @covers classes\Session::close
     */
    public function testClose()
    {
        $namespace = $this->object->getSection('pokus1');
        $this->assertFalse($this->object->isStarted());

        $namespace->key = 'value';  //az tady startuje
        $this->assertEquals('value', $namespace->key);
        $this->assertTrue($this->object->isStarted());

        $this->object->close();
        $this->assertFalse($this->object->isStarted());
        $this->assertNull($namespace->key);
    }

    /**
     * @covers classes\Session::clean
     */
    public function testClean()
    {
        $namespace = $this->object->getSection('pokus1');
        $namespace->a = 'b';
        $this->assertEquals('b', $namespace->a);
        $this->object->clean();
        $this->assertNull($namespace->a);
    }

    /**
     * @covers classes\Session::destroy
     */
    public function testDestroy()
    {
        $namespace = $this->object->getSection('pokus1');

        $namespace->key = 'value';
        $this->assertTrue($this->object->isStarted());
        $this->assertEquals('value', $namespace->key);

        $this->object->destroy();
        $this->assertFalse($this->object->hasSection('pokus1'));
    }

    /**
     * @covers Session::isStarted
     */
    public function testIsStarted()
    {
        $namespace = $this->object->getSection('pokus1');
        $this->assertFalse($this->object->isStarted());
        $namespace->key = 'value';  //nastaveni do sekce
        $this->assertTrue($this->object->isStarted());
        $this->assertTrue($this->object->hasSection('pokus1'));
        $this->assertEquals('value', $namespace->key);

        $ss = $this->object->getSection('obal');
        $ss->a = 'c';
        $this->assertEquals('c', $ss->a);
    }

    /**
     * @covers classes\Session::isExists
     */
    public function testIsExists()
    {
        $namespace = $this->object->getSection('pokus1');
        $this->assertFalse($this->object->isExists());
        $namespace->key = 'value';
        $this->assertTrue($this->object->isExists());
    }

    /**
     * @covers classes\Session::getSection
     * @covers classes\Session::hasSection
     */
    public function testGetSection()
    {
        $namespace = $this->object->getSection('pokus1');
        $namespace->a = 'b';
        $this->assertEquals('b', $namespace->a);
        $this->assertTrue($this->object->hasSection('pokus1'));
        unset($namespace->a);
        $this->assertNull($namespace->a);

        $namespace->count = 0;
        $this->assertEquals(0, $namespace->count);
        $namespace->count++;
        $this->assertEquals(1, $namespace->count);
        $namespace->count++;
        $namespace->count++;
        $this->assertEquals(3, $namespace->count);

        $this->assertFalse($this->object->hasSection('pokusna_sekce'));
        $this->assertFalse($this->object->hasSection(''));
        $this->assertFalse($this->object->hasSection(123));
    }

    /**
     * @covers classes\Session::getId
     */
    public function testGetId()
    {
        $namespace = $this->object->getSection('pokus1');
        $namespace->key = 'value';
        $id = $this->object->getId();
        $this->assertTrue(isset($id));
    }

    /**
     * @covers classes\Session::setName
     * @covers classes\Session::getName
     */
    public function testSetName()
    {
        $this->object->setName('sess');
        $this->assertEquals('sess', $this->object->getName());
    }

    /**
     * @covers classes\Session::regenerateId
     */
    public function testRegenerateId()
    {
        $namespace = $this->object->getSection('pokus1');
        $namespace->key = 'value';
        $id = $this->object->getId();
        $this->object->regenerateId();
        $this->assertTrue($id != $this->object->getId());
    }

    public function testSessionSection() {
        $namespace = $this->object->getSection('pokusna_sekce');
        $this->assertEmpty($namespace->promenna);
        $this->assertNull($namespace->promenna);
        $namespace->promenna = 'ahoj';  //setter
        $namespace->cislo = 2135;
        $this->assertEquals('ahoj', $namespace->promenna);  //getter
        $this->assertEquals(2135, $namespace->cislo);
        $this->assertTrue(isset($namespace->promenna)); //isset
        $this->assertTrue(isset($namespace->cislo));
        unset($namespace->promenna);  //unset
        $this->assertEmpty($namespace->promenna);
        $this->assertNull($namespace->promenna);
        unset($namespace->cislo);
        $this->assertEmpty($namespace->cislo);
        $this->assertNull($namespace->cislo);
        //nacitani expirace
        $this->assertEquals('1 hours', $namespace->getExpiration());
        $this->assertEquals(strtotime('1 hours'), $namespace->getExpirationTime());
        //nastavovani expirace
        $namespace->setExpiration('2 minutes');
        $this->assertEquals('2 minutes', $namespace->getExpiration());
        $namespace->revalidate(); //obnoveni casu expirace na 2 minuty
        $this->assertEquals(strtotime('2 minutes'), $namespace->getExpirationTime());
        //text existence
        $this->assertTrue($this->object->hasSection('pokusna_sekce'));
        $namespace->remove(); //odstraneni
        $this->assertFalse($this->object->hasSection('pokusna_sekce'));
        //novy blok
        $this->assertFalse($this->object->hasSection('expiracni_blok'));
        $blok = $this->object->getSection('expiracni_blok');
        $this->assertFalse($this->object->hasSection('expiracni_blok'));
        $blok->setExpiration('10 seconds');
        //~ $blok->setClearAfterExpire(true);
        $this->assertEquals('10 seconds', $blok->getExpiration());
        $blok->mojePromenna = 'moje hodnota';
        $this->assertEquals('moje hodnota', $blok->mojePromenna);
        $this->assertTrue($this->object->hasSection('expiracni_blok'));
        $this->assertEquals('moje hodnota', $blok->mojePromenna);
        //test revalaidace, obnoveni casu
        $this->assertEquals(strtotime($blok->getExpiration()), $blok->getExpirationTime());
        sleep(1); //natazeni prodlevy
        $this->assertEquals(1, strtotime($blok->getExpiration()) - $blok->getExpirationTime());
        $blok->revalidate();
        $this->assertEquals(strtotime($blok->getExpiration()), $blok->getExpirationTime());
        //test existence
        $this->assertEquals('moje hodnota', $blok->mojePromenna);
        $this->assertEquals(strtotime('+10 seconds'), $blok->getExpirationTime());
        //~ $this->assertNull($blok->mojePromenna);
        $this->assertTrue($this->object->hasSection('expiracni_blok'));
        $blok->remove(); //uklid
        $this->assertFalse($this->object->hasSection('expiracni_blok'));
        $this->assertNull($blok->mojePromenna);
    }
}
