<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\Emailer" emailer.php
 * mv -v EmailerTest.php ../test/
 * phpunit --bootstrap loader.php EmailerTest
 *
 * odesilani testovat posilani jen tam kde je povoleny port :25 !!!!!
 * nmap -v email.server -p25
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-23 at 20:29:49.
 */
class EmailerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Emailer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new Emailer;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Emailer::factory
     */
    public function testFactory() {
        $this->assertEquals($this->object, Emailer::factory());
    }

    /**
     * @covers classes\Emailer::setFrom
     */
    public function testSetFrom()
    {
        $this->object->setFrom('email.example@gmail.com');
        $this->assertEquals('"email.example@gmail.com" <email.example@gmail.com>', $this->object->getFrom());
    }

    /**
     * @covers classes\Emailer::setFrom
     */
    public function testSetFrom2()
    {
        $this->object->setFrom('email.example@gmail.com', 'foo bar');
        $this->assertEquals('"foo bar" <email.example@gmail.com>', $this->object->getFrom());
    }

    /**
     * @covers classes\Emailer::addReplyTo
     */
    public function testAddReplyTo()
    {
        $this->object->addReplyTo('email.example@gmail.com')
                      ->addReplyTo('email2.example@gmail.com');
        $this->assertEquals(array('"email.example@gmail.com" <email.example@gmail.com>', '"email2.example@gmail.com" <email2.example@gmail.com>'), $this->object->getReplyTo());
    }

    /**
     * @covers classes\Emailer::addReplyTo
     */
    public function testAddReplyTo2()
    {
        $this->object->addReplyTo('email.example@gmail.com', 'email aaa')
                      ->addReplyTo('email2.example@gmail.com', 'email bbb');
        $this->assertEquals(array('"email aaa" <email.example@gmail.com>', '"email bbb" <email2.example@gmail.com>'), $this->object->getReplyTo());
    }

    /**
     * @covers classes\Emailer::addCc
     */
    public function testAddCc()
    {
        $this->object->addCc('email@gmail.com')
                      ->addCc('email2@gmail.com');
        $this->assertEquals(array('"email@gmail.com" <email@gmail.com>', '"email2@gmail.com" <email2@gmail.com>'), $this->object->getCc());
    }

    /**
     * @covers classes\Emailer::addCc
     */
    public function testAddCc2()
    {
        $this->object->addCc('email@gmail.com', 'email')
                      ->addCc('email2@gmail.com', 'email2');
        $this->assertEquals(array('"email" <email@gmail.com>', '"email2" <email2@gmail.com>'), $this->object->getCc());
    }

    /**
     * @covers classes\Emailer::addBcc
     */
    public function testAddBcc()
    {
        $this->object->addBcc('email@gmail.com')
                      ->addBcc('email2@gmail.com');
        $this->assertEquals(array('"email@gmail.com" <email@gmail.com>', '"email2@gmail.com" <email2@gmail.com>'), $this->object->getBcc());
    }

    /**
     * @covers classes\Emailer::addBcc
     */
    public function testAddBcc2()
    {
        $this->object->addBcc('email@gmail.com', 'email')
                      ->addBcc('email2@gmail.com', 'email2');
        $this->assertEquals(array('"email" <email@gmail.com>', '"email2" <email2@gmail.com>'), $this->object->getBcc());
    }

    /**
     * @covers classes\Emailer::addTo
     */
    public function testAddTo()
    {
        $this->object->addTo('email@gmail.com')
                      ->addTo('email2@gmail.com');
        $this->assertEquals(array('"email@gmail.com" <email@gmail.com>', '"email2@gmail.com" <email2@gmail.com>'), $this->object->getTo());
    }

    /**
     * @covers classes\Emailer::addTo
     */
    public function testAddTo2()
    {
        $this->object->addTo('email@gmail.com', 'email')
                      ->addTo('email2@gmail.com', 'email2');
        $this->assertEquals(array('"email" <email@gmail.com>', '"email2" <email2@gmail.com>'), $this->object->getTo());
    }

    /**
     * @covers classes\Emailer::setSubject
     */
    public function testSetSubject()
    {
        $this->object->setSubject('predmet emailu');
        $this->assertEquals('predmet emailu', $this->object->getSubject());
    }

    /**
     * @covers classes\Emailer::setMessage
     */
    public function testSetMessage()
    {
        $this->object->setMessage('text zpravy, ahoj "v uvozovkach" a apostrof: \' <?>');
        $this->assertEquals('text zpravy, ahoj "v uvozovkach" a apostrof: \' &lt;?&gt;', $this->object->getMessage());
    }

    /**
     * @covers classes\Emailer::setMessage
     */
    public function testSetMessage2()
    {
        $this->object->setMessage('text zpravy, ahoj "v uvozovkach" a apostrof: \' <?>', true);
        $this->assertEquals('text zpravy, ahoj "v uvozovkach" a apostrof: \' <?>', $this->object->getMessage());
    }

    /**
     * @covers classes\Emailer::setMessageArgs
     */
    public function testSetMessageArgs()
    {
        $this->object->setMessageArgs('text zpravy, a:%d a b:%s a c:%s mno a taky d:%d', 1, '2', 'tri', false);
        $this->assertEquals('text zpravy, a:1 a b:2 a c:tri mno a taky d:0', $this->object->getMessage());
    }

    /**
     * @covers classes\Emailer::send
     *//*
    public function testSend()
    {
        $this->object = new Emailer;
        $this->object
            ->addTo('hokus.pokus@gfdesign.cz')
            ->setFrom('franta.flinta@gmail.com')
            ->addReplyTo('no-reply@gmail.com')
            ->addCc('info@gfdesign.cz')
            ->addCc('info@gmrhosting.cz')
            ->addBcc('pokus@gfdesign.cz')
            ->setSubject('pokusny predmet zpravy: +ěščřžýáíé')
            ->setMessage('pokusny text zpravy: +ěščřžýáíé');

        $this->assertTrue($this->object->send());
    }*/
}
