<?php
namespace classes;

//~ classes\HtmlPage,

/**
 * phpunit-skelgen --test -- "classes\HtmlPage" Htmlpage.php
 * mv -v HtmlPageTest.php ../test/
 * phpunit --bootstrap ../classes/Htmlpage.php HtmlPageTest
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-29 at 10:13:34.
 */
class HtmlPageTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var HtmlPage
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new HtmlPage;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers HtmlPage::getDoctype
     */
    public function testGetDoctype()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
    }

    /**
     * @covers HtmlPage::setDoctype
     */
    public function testSetDoctype()
    {
        $this->object->setDoctype(HtmlPage::DOCTYPE_HTML4);
        $this->assertEquals(HtmlPage::DOCTYPE_HTML4, $this->object->getDoctype());
        $this->object->setDoctype(HtmlPage::DOCTYPE_HTML5);
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
    }

    /**
     * @covers HtmlPage::getLanguage
     */
    public function testGetLanguage()
    {
        $this->assertEquals('cs', $this->object->getLanguage());
    }

    /**
     * @covers HtmlPage::setLanguage
     */
    public function testSetLanguage()
    {
        $this->object->setLanguage('en');
        $this->assertEquals('en', $this->object->getLanguage());
        $this->object->setLanguage('cs');
        $this->assertEquals('cs', $this->object->getLanguage());
    }

    /**
     * @covers classes\HtmlPage::getUrl
     * @covers HtmlPage::setUrl
     */
    public function testSetUrl()
    {
        $this->assertEquals('', $this->object->getUrl());
        $this->object->setUrl('http://google.com/');
        $this->assertEquals('http://google.com/', $this->object->getUrl());
    }

    /**
     * @covers HtmlPage::getCharset
     */
    public function testGetCharset()
    {
        $this->assertEquals('utf-8', $this->object->getCharset());
    }

    /**
     * @covers HtmlPage::setCharset
     */
    public function testSetCharset()
    {
        $this->object->setCharset('utf-16');
        $this->assertEquals('utf-16', $this->object->getCharset());
        $this->object->setCharset('utf-8');
        $this->assertEquals('utf-8', $this->object->getCharset());
    }

    /**
     * @covers HtmlPage::getTitle
     */
    public function testGetTitle()
    {
        $this->assertEquals('', $this->object->getTitle());
    }

    /**
     * @covers HtmlPage::setTitle
     */
    public function testSetTitle()
    {
        $this->object->setTitle('titulek');
        $this->assertEquals('titulek', $this->object->getTitle());
    }

    /**
     * @covers HtmlPage::addMeta
     * @covers HtmlPage::getMeta
     */
    public function testAddMeta()
    {
        $this->assertEquals(array(), $this->object->getMeta());
        $this->object->addMeta(array('http-equiv' => 'Content-Language', 'content' => 'cs'));
        $this->assertEquals(array(array('http-equiv' => 'Content-Language', 'content' => 'cs')), $this->object->getMeta());
    }

    /**
     * @covers HtmlPage::addMetaTag
     * @covers HtmlPage::getMetaTag
     */
    public function testAddMetaTag()
    {
        $this->assertEquals(array(), $this->object->getMetaTag());
        $this->object->addMetaTag('author', 'GoodFlow design');
        $this->assertEquals(array('author' => 'GoodFlow design'), $this->object->getMetaTag());
    }

    /**
     * @covers HtmlPage::addEmbedCSS
     * @covers HtmlPage::getEmbedCSS
     */
    public function testAddEmbedCSS()
    {
        $this->assertEquals(array(), $this->object->getEmbedCSS());
        $this->object->addEmbedCSS('h1 { color: red; }');
        $this->assertEquals(array('h1 { color: red; }'), $this->object->getEmbedCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><style type="text/css" media="screen">h1 { color: red; }</style><title></title></head><body></body></html>', $this->object->render());
        $this->object->addEmbedCSS('h2 { color: %s; }', 'blue');
        $this->assertEquals(array('h1 { color: red; }', 'h2 { color: blue; }'), $this->object->getEmbedCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><style type="text/css" media="screen">h1 { color: red; } h2 { color: blue; }</style><title></title></head><body></body></html>', $this->object->render());
        $this->object->addEmbedCSS('h3 { %s: %s; }', array('color', 'pink'));
        $this->assertEquals(array('h1 { color: red; }', 'h2 { color: blue; }', 'h3 { color: pink; }'), $this->object->getEmbedCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><style type="text/css" media="screen">h1 { color: red; } h2 { color: blue; } h3 { color: pink; }</style><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->addExternalCSS('cesta1.css');
        $this->assertEquals(array(array('rel' => 'stylesheet', 'type' => null, 'media' => HtmlPage::MEDIA_SCREEN, 'title' => null, 'href' => 'cesta1.css', 'if' => null, 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><link rel="stylesheet" media="screen" href="cesta1.css" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS1()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->addExternalCSS('cesta1.css', array('url' => 'http://jquery.com/'));
        $this->assertEquals(array(array('rel' => 'stylesheet', 'type' => null, 'media' => HtmlPage::MEDIA_SCREEN, 'title' => null, 'href' => 'http://jquery.com/cesta1.css', 'if' => null, 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><link rel="stylesheet" media="screen" href="http://jquery.com/cesta1.css" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS2()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->setUrl('http://gfdesign.cz/');
        $this->object->addExternalCSS('cesta1.css');
        $this->assertEquals(array(array('rel' => 'stylesheet', 'type' => null, 'media' => HtmlPage::MEDIA_SCREEN, 'title' => null, 'href' => 'http://gfdesign.cz/cesta1.css', 'if' => null, 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><link rel="stylesheet" media="screen" href="http://gfdesign.cz/cesta1.css" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS3()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->addExternalCSS('cesta1.css', array('rel' => 'neco'));
        $this->assertEquals(array(array('rel' => 'neco', 'type' => null, 'media' => HtmlPage::MEDIA_SCREEN, 'title' => null, 'href' => 'cesta1.css', 'if' => null, 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><link rel="neco" media="screen" href="cesta1.css" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS4()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->addExternalCSS('cesta1.css', array('media' => HtmlPage::MEDIA_PRINT));
        $this->assertEquals(array(array('rel' => 'stylesheet', 'type' => null, 'media' => HtmlPage::MEDIA_PRINT, 'title' => null, 'href' => 'cesta1.css', 'if' => null, 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><link rel="stylesheet" media="print" href="cesta1.css" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS5()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->addExternalCSS('cesta1.css', array('title' => 'tut'));
        $this->assertEquals(array(array('rel' => 'stylesheet', 'type' => null, 'media' => HtmlPage::MEDIA_SCREEN, 'title' => 'tut', 'href' => 'cesta1.css', 'if' => null, 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><link rel="stylesheet" media="screen" title="tut" href="cesta1.css" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addExternalCSS
     * @covers HtmlPage::getExternalCSS
     */
    public function testAddExternalCSS6()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalCSS());
        $this->object->addExternalCSS('cesta1.css', array('if' => 'IE=6'));
        $this->assertEquals(array(array('rel' => 'stylesheet', 'type' => null, 'media' => HtmlPage::MEDIA_SCREEN, 'title' => null, 'href' => 'cesta1.css', 'if' => 'IE=6', 'url' => null)), $this->object->getExternalCSS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><!--[if IE 6]><link rel="stylesheet" media="screen" href="cesta1.css" /><![endif]--><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addEmbedJS
     * @covers HtmlPage::getEmbedJS
     */
    public function testAddEmbedJS()
    {
        $this->assertEquals(array(), $this->object->getEmbedJS());
        $this->object->addEmbedJS('var pokus_before = 8;');
        $this->assertEquals(array('before' => array('var pokus_before = 8;')), $this->object->getEmbedJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script type="text/javascript">var pokus_before = 8;</script></head><body></body></html>', $this->object->render());
        $this->object->addBody(null);
        $this->object->addEmbedJS('var pokus_after = 4;');
        $this->assertEquals(array('before' => array('var pokus_before = 8;'), 'after' => array('var pokus_after = 4;')), $this->object->getEmbedJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script type="text/javascript">var pokus_before = 8;</script></head><body><script type="text/javascript">var pokus_after = 4;</script></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addExternalJS
     * @covers classes\HtmlPage::getExternalJS
     */
    public function testAddExternalJS()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalJS());
        $this->object->addExternalJS('jquery-1.6.2.min.js');
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => null, 'src' => 'jquery-1.6.2.min.js', 'if' => null, 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script src="jquery-1.6.2.min.js"></script></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addExternalJS
     * @covers classes\HtmlPage::getExternalJS
     */
    public function testAddExternalJS1()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalJS());
        $this->object->addExternalJS('jquery-1.6.2.min.js', array('url' => 'http://gfdesign.cz/'));
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => null, 'src' => 'http://gfdesign.cz/jquery-1.6.2.min.js', 'if' => null, 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script src="http://gfdesign.cz/jquery-1.6.2.min.js"></script></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addExternalJS
     * @covers classes\HtmlPage::getExternalJS
     */
    public function testAddExternalJS2()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalJS());
        $this->object->setUrl('http://gfdesign.cz/');
        $this->object->addExternalJS('jquery-1.6.2.min.js');
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => null, 'src' => 'http://gfdesign.cz/jquery-1.6.2.min.js', 'if' => null, 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script src="http://gfdesign.cz/jquery-1.6.2.min.js"></script></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addExternalJS
     * @covers classes\HtmlPage::getExternalJS
     */
    public function testAddExternalJS3()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalJS());
        $this->object->addExternalJS('jquery-1.6.2.min.js', array('charset' => 'utf-8'));
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => 'utf-8', 'src' => 'jquery-1.6.2.min.js', 'if' => null, 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script charset="utf-8" src="jquery-1.6.2.min.js"></script></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addExternalJS
     * @covers classes\HtmlPage::getExternalJS
     */
    public function testAddExternalJS4()
    {
        $this->assertEquals(HtmlPage::DOCTYPE_HTML5, $this->object->getDoctype());
        $this->assertEquals(array(), $this->object->getExternalJS());
        $this->object->addExternalJS('jquery-1.6.2.min.js', array('if' => 'IE=7'));
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => null, 'src' => 'jquery-1.6.2.min.js', 'if' => 'IE=7', 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><!--[if IE 7]><script src="jquery-1.6.2.min.js"></script><![endif]--></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addExternalJS
     * @covers classes\HtmlPage::getExternalJS
     */
    public function testAddExternalJS5()
    {
        $this->assertEquals(array(), $this->object->getExternalJS());
        $this->object->addExternalJS('jquery-1.6.2.min.js');
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => null, 'src' => 'jquery-1.6.2.min.js', 'if' => null, 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script src="jquery-1.6.2.min.js"></script></head><body></body></html>', $this->object->render());
        $this->object->addBody(null);
        $this->object->addExternalJS('jquery-1.6.3.min.js');
        $this->assertEquals(array('before' => array(array('type' => null, 'charset' => null, 'src' => 'jquery-1.6.2.min.js', 'if' => null, 'url' => null)), 'after' => array(array('type' => null, 'charset' => null, 'src' => 'jquery-1.6.3.min.js', 'if' => null, 'url' => null))), $this->object->getExternalJS());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><script src="jquery-1.6.2.min.js"></script></head><body><script src="jquery-1.6.3.min.js"></script></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::getFavicon
     */
    public function testGetFavicon()
    {
        $this->assertEquals('', $this->object->getFavicon());
    }

    /**
     * @covers HtmlPage::setFavicon
     */
    public function testSetFavicon()
    {
        $this->object->setFavicon('favicon.ico');
        $this->assertEquals(array('rel' => 'shortcut icon', 'type' => null, 'href' => 'favicon.ico', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="shortcut icon" href="favicon.ico" /></head><body></body></html>', $this->object->render());

        $this->object->setFavicon('favicon.ico', array('url' => 'http://gfdesign.cz/'));
        $this->assertEquals(array('rel' => 'shortcut icon', 'type' => null, 'href' => 'http://gfdesign.cz/favicon.ico', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="shortcut icon" href="http://gfdesign.cz/favicon.ico" /></head><body></body></html>', $this->object->render());

        $this->object->setUrl('http://gfdesign.cz/');
        $this->object->setFavicon('favicon.ico');
        $this->assertEquals(array('rel' => 'shortcut icon', 'type' => null, 'href' => 'http://gfdesign.cz/favicon.ico', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="shortcut icon" href="http://gfdesign.cz/favicon.ico" /></head><body></body></html>', $this->object->render());

        $this->object->setFavicon('favicon.ico', array('url' => 'http://google.cz/'));
        $this->assertEquals(array('rel' => 'shortcut icon', 'type' => null, 'href' => 'http://google.cz/favicon.ico', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="shortcut icon" href="http://google.cz/favicon.ico" /></head><body></body></html>', $this->object->render());

        $this->object->setFavicon('favicon.ico', array('url' => ''));
        $this->assertEquals(array('rel' => 'shortcut icon', 'type' => null, 'href' => 'http://gfdesign.cz/favicon.ico', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="shortcut icon" href="http://gfdesign.cz/favicon.ico" /></head><body></body></html>', $this->object->render());

        $this->object->setUrl('');
        $this->object->setFavicon('favicon.ico', array('rel' => 'icon'));
        $this->assertEquals(array('rel' => 'icon', 'type' => null, 'href' => 'favicon.ico', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="icon" href="favicon.ico" /></head><body></body></html>', $this->object->render());

        $this->object->setFavicon('favicon.png', array('type' => 'image/png'));
        $this->assertEquals(array('rel' => 'shortcut icon', 'type' => 'image/png', 'href' => 'favicon.png', 'url' => null), $this->object->getFavicon());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title><link rel="shortcut icon" type="image/png" href="favicon.png" /></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::setGoogleAnalytics
     */
    public function testSetGoogleAnalytics()
    {
        $this->object->setGoogleAnalytics('UA-17828373-1');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body><script type="text/javascript">var _gaq=_gaq||[];_gaq.push([\'_setAccount\',\'UA-17828373-1\']);_gaq.push([\'_trackPageview\']);(function(){var ga=document.createElement(\'script\');ga.type =\'text/javascript\';ga.async=true;ga.src=(\'https:\'==document.location.protocol?\'https://ssl\':\'http://www\')+\'.google-analytics.com/ga.js\';var s=document.getElementsByTagName(\'script\')[0];s.parentNode.insertBefore(ga,s);})();</script></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addHead
     * @covers HtmlPage::getHead
     */
    public function testAddHead()
    {
        $this->assertEquals(array(), $this->object->getHead());
        $this->object->addHead(null);
        $this->assertEquals(array(), $this->object->getHead());

        $this->object->addHead(array(null, null));
        $this->assertEquals(array(), $this->object->getHead());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body></body></html>', $this->object->render());

        $this->object->addHead(array(null, Html::tvoje(), null, null, Html::tv()));
        $this->assertEquals(array('<tvoje></tvoje>', '<tv></tv>'), $this->object->getHead());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><tvoje></tvoje><tv></tv><meta charset="utf-8" /><title></title></head><body></body></html>', $this->object->render());

        $this->object->addHead(Html::moje());
        $this->assertEquals(array('<tvoje></tvoje>', '<tv></tv>', '<moje></moje>'), $this->object->getHead());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><tvoje></tvoje><tv></tv><moje></moje><meta charset="utf-8" /><title></title></head><body></body></html>', $this->object->render());
    }

    /**
     * @covers HtmlPage::addBody
     * @covers HtmlPage::getBody
     */
    public function testAddBody()
    {
        $this->assertEquals(array(), $this->object->getBody());
        $this->object->addBody(null);
        $this->assertEquals(array(), $this->object->getBody());

        $this->object->addBody(array(null, null));
        $this->assertEquals(array(), $this->object->getBody());

        $this->object->addBody(array(null, Html::a(), null));
        $this->assertEquals(array('<a></a>'), $this->object->getBody());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body><a></a></body></html>', $this->object->render());
        $this->object->addBody(array(Html::b(), Html::c()));
        $this->assertEquals(array('<a></a>', '<b></b>', '<c></c>'), $this->object->getBody());
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body><a></a><b></b><c></c></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::addBodyClass
     * @covers classes\HtmlPage::setBodyId
     */
    public function testAddBodyClass()
    {
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body></body></html>', $this->object->render());
        $this->object->setBodyId('aa');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="aa"></body></html>', $this->object->render());
        $this->object->setBodyId('b');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="b"></body></html>', $this->object->render());

        $this->object->addBodyClass('g');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="b" class="g"></body></html>', $this->object->render());
        $this->object->addBodyClass('h');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="b" class="g h"></body></html>', $this->object->render());
        $this->object->addBodyClass('i');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="b" class="g h i"></body></html>', $this->object->render());

        //testy na body text a html
        $this->object->setBodyText('toto je pokusny text');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="b" class="g h i">toto je pokusny text</body></html>', $this->object->render());

        $this->object->setBodyHtml('toto je pokusny <p>html</p>');
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body id="b" class="g h i">toto je pokusny texttoto je pokusny <p>html</p></body></html>', $this->object->render());
    }

    /**
     * @covers classes\HtmlPage::__toString
     * @covers classes\HtmlPage::render
     */
    public function test__toString()
    {
        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body></body></html>', (string) $this->object);

        $this->assertEquals('<!DOCTYPE html>'.PHP_EOL.'<html lang="cs"><head><meta charset="utf-8" /><title></title></head><body></body></html>', $this->object->render());
    }
}
