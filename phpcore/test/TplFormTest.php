<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\TplForm" tplform.php
 * mv -v TplFormTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-08-06 at 14:40:59.
 */
class TplFormTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var TplForm
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new TplForm;
        $_SERVER = array('HTTP_HOST' => 'localhost');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\TplForm::__construct
     * @covers classes\TplForm::compile
     */
    public function testCompile()
    {
        $f1 = new TplForm('{text:hopla}', array('name' => 'formular'));
        $f2 = TplForm::compile('{text:hopla}', array('name' => 'formular'));
        //~ $this->assertEquals($f1, $f2);
        $this->assertEquals($f1->render(), $f2->render());
        $this->assertEquals('<form action="" method="post" autocomplete="on" name="formular"><input type="text" name="hopla"/></form>', $f1->render());
    }

    /**
     * @covers classes\TplForm::setCode
     */
    public function testSetCode()
    {
      $this->object->setCode('{text:hopla}');
      $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="hopla"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setAttributes
     */
    public function testSetAttributes()
    {
        $this->object->setAttributes(array('autocomplete' => 'off'));
        $this->assertEquals('<form action="" method="post" autocomplete="off"></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setAttributes
     */
    public function testSetAttributes1()
    {
        $this->object->setAttributes(array('method' => TplForm::GET));
        $this->assertEquals('<form action="" method="get" autocomplete="on"></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::getSubmittedBy
     * @runInSeparateProcess
     */
    public function testGetSubmittedBy()
    {
        $this->assertEquals('__button0__', $this->object->getSubmittedBy());
    }

    /**
     * @covers classes\TplForm::getSubmittedBy
     * @runInSeparateProcess
     */
    public function testGetSubmittedBy1()
    {
        $this->assertEquals('__button0__', $this->object->getSubmittedBy());
        $this->assertEquals('__button1__', TplForm::compile('{text:hopla}', array('name' => 'formular'))->getSubmittedBy());
        $this->assertEquals('__button2__', TplForm::compile('{text:hopla}', array('name' => 'formular'))->getSubmittedBy());
        $this->assertEquals('__button3__', TplForm::compile('{text:hopla}', array('name' => 'formular'))->getSubmittedBy());
        $this->assertEquals('__button4__', TplForm::compile('{text:hopla}', array('name' => 'formular'))->getSubmittedBy());
        $this->assertEquals('__button5__', TplForm::compile('{text:hopla}', array('name' => 'formular'))->getSubmittedBy());
    }

    /**
     * @covers classes\TplForm::setSubmittedBy
     */
    public function testSetSubmittedBy()
    {
        $this->object->setSubmittedBy('__tl');
        $this->assertEquals('__tl', $this->object->getSubmittedBy());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * test zakladni kompilace
     */
    public function testCompileTemplate()
    {
        $this->assertEquals('<input type="text" name="nazev1"/>', $this->object->compileTemplate('{text:nazev1}'));
        $this->assertEquals('<input type="text" name="nazev2" value="hodnota2"/>', $this->object->compileTemplate('{text:nazev2;hodnota2}'));
        $this->assertEquals('<input type="text" name="nazev3" value="hodnota3" class="trida3"/>', $this->object->compileTemplate('{text:nazev3;hodnota3|$|class|:|trida3}'));
        $this->assertEquals('<input type="text" name="nazev4" value="hodnota4" class="trida4" id="ide4"/>', $this->object->compileTemplate('{text:nazev4;hodnota4|$|class|:|trida4|,|id|:|ide4}'));
        $this->assertEquals('<input type="text" name="nazev5" value="hodnota5" class="trida5" id="ide5"/>', $this->object->compileTemplate('{text:nazev5;hodnota5|$|class|:|trida5|,|id|:|ide5|@|filled|:|musi byt vyplneno}'));
        $this->assertEquals(array('nazev5_filled' => array('name' => 'nazev5', 'type' => 'filled', 'negation' => false, 'message' => 'musi byt vyplneno', 'argv' => null)), $this->object->getRules());
        $this->assertEquals('<input type="text" name="nazev6" value="hodnota6" class="trida6" id="ide6"/>', $this->object->compileTemplate('{text:nazev6;hodnota6|$|class|:|trida6|,|id|:|ide6|@|filled|:|musi byt vyplneno|,|~range|:|musi byt v rozsahu %s-%s|:|[28, 99]}'));
        $this->assertEquals(array('nazev5_filled' => array('name' => 'nazev5', 'type' => 'filled', 'negation' => false, 'message' => 'musi byt vyplneno', 'argv' => null),
                                  'nazev6_filled' => array('name' => 'nazev6', 'type' => 'filled', 'negation' => false, 'message' => 'musi byt vyplneno', 'argv' => null),
                                  'nazev6_range' => array('name' => 'nazev6', 'type' => 'range', 'negation' => true, 'message' => 'musi byt v rozsahu %s-%s', 'argv' => array(28, 99)),), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu text
     */
    public function testCompileTemplate_text()
    {
        $this->assertEquals('<input type="text" name="nazev1"/>', $this->object->compileTemplate('{text:nazev1}'));
        $this->assertEquals('<input type="text" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{text:nazev1;hodnota2}'));
        $this->assertEquals('<input type="text" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{text:nazev1;hodno
ta2}'));
        $this->assertEquals('<input type="text" name="nazev1" class="supertrida a b c"/>', $this->object->compileTemplate('{text:nazev1|$|class|:|supertrida a b c}'));
        $this->assertEquals('<input type="text" name="nazev1" value="hodnota2" class="supertrida a b c"/>', $this->object->compileTemplate('{text:nazev1;hodnota2|$|class|:|supertrida a b c}'));
        $this->assertEquals('<input type="text" name="nazev1" value="hodnota2" class="supertrida a b c" id="mojeid"/>', $this->object->compileTemplate('{text:nazev1;hodnota2|$|class|:|supertrida a b c|,|id|:|mojeid}'));
        $this->assertEquals('<input type="text" name="nazev1" value="hodnota2" class="supertrida a b c" id="mojeid"/>', $this->object->compileTemplate('{text:nazev1;hodnota2|$|class|:|supertrida a b c|,|id|:|mojeid|@|filled|:|musi byt vyplneno}'));
        $this->assertEquals(array('nazev1_filled' => array('name' => 'nazev1', 'type' => 'filled', 'negation' => false, 'message' => 'musi byt vyplneno', 'argv' => null)), $this->object->getRules());
        $this->assertEquals('<input type="text" name="nazev1"/>', $this->object->compileTemplate('{text:nazev1|@|filled|:|musi byt vyplneno}'));
        $this->assertEquals(array('nazev1_filled' => array('name' => 'nazev1', 'type' => 'filled', 'negation' => false, 'message' => 'musi byt vyplneno', 'argv' => null)), $this->object->getRules());
        $this->assertEquals('<input type="text" name="nazev1" value="hodnota2" class="supertrida a b c" id="mojeid"/>', $this->object->compileTemplate('{text:nazev1;hodnota2|$|class|:|supertrida a b c|,|id|:|mojeid|@|filled|:|musi byt vyplneno|,|~range|:|musi byt v rozsahu %s-%s|:|[12, 25]}'));
        $this->assertEquals(array('nazev1_filled' => array('name' => 'nazev1', 'type' => 'filled', 'negation' => false, 'message' => 'musi byt vyplneno', 'argv' => null),
                                  'nazev1_range' => array('name' => 'nazev1', 'type' => 'range', 'negation' => true, 'message' => 'musi byt v rozsahu %s-%s', 'argv' => array(12, 25))), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu text
     */
    public function testCompileTemplate_text1()
    {
        $this->assertEquals('<input type="text" name="nazev1" value="ahoj"/>', $this->object->setDefaults(array('nazev1' => 'ahoj'))->compileTemplate('{text:nazev1}'));
        $this->assertEquals('<input type="text" name="n1[cs]" value="bbb"/><input type="text" name="n1[en]" value="dddd"/><input type="text" name="n1[de]" value="huhu"/>', $this->object->setDefaults(array('n1' => array('cs' => 'bbb', 'en' => 'dddd', 'de' => 'huhu')))->compileTemplate('{text:n1[cs]}{text:n1[en]}{text:n1[de]}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu text
     */
    public function testCompileTemplate_text2()
    {
        $this->assertEquals('<input type="text" name="nazev1" value="ahoj"/>', $this->object->setValue('nazev1', 'ahoj')->compileTemplate('{text:nazev1}'));
        $this->assertEquals('<input type="text" name="n1[cs]" value="bbb"/><input type="text" name="n1[en]" value="dddd"/><input type="text" name="n1[de]" value="huhu"/>', $this->object->setValue('n1[cs]', 'bbb')->setValue('n1[en]', 'dddd')->setValue('n1[de]', 'huhu')->compileTemplate('{text:n1[cs]}{text:n1[en]}{text:n1[de]}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu password
     */
    public function testCompileTemplate_password()
    {
        $this->assertEquals('<input type="password" name="nazev1"/>', $this->object->compileTemplate('{password:nazev1}'));
        $this->assertEquals('<input type="password" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{password:nazev1;hodnota2}'));
        $this->assertEquals('<input type="password" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{password:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu hidden
     */
    public function testCompileTemplate_hidden()
    {
        $this->assertEquals('<input type="hidden" name="nazev1"/>', $this->object->compileTemplate('{hidden:nazev1}'));
        $this->assertEquals('<input type="hidden" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{hidden:nazev1;hodnota2}'));
        $this->assertEquals('<input type="hidden" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{hidden:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu textarea
     */
    public function testCompileTemplate_textarea()
    {
        $this->assertEquals('<textarea name="nazev1"></textarea>', $this->object->compileTemplate('{textarea:nazev1}'));
        $this->assertEquals('<textarea name="nazev1">hodnota2</textarea>', $this->object->compileTemplate('{textarea:nazev1;hodnota2}'));
        $this->assertEquals('<textarea name="nazev1">hodno
ta2</textarea>', $this->object->compileTemplate('{textarea:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu checkbox
     */
    public function testCompileTemplate_checkbox()
    {
        $this->assertEquals('<input type="checkbox" name="nazev1"/>', $this->object->compileTemplate('{checkbox:nazev1}'));
        $this->assertEquals('<input type="checkbox" name="nazev1" checked/>', $this->object->compileTemplate('{checkbox:nazev1;hodnota2}'));
        $this->assertEquals('<input type="checkbox" name="nazev1" checked/>', $this->object->compileTemplate('{checkbox:nazev1|$|checked}'));
        $this->assertEquals('<input type="checkbox" name="nazev1" checked disabled/>', $this->object->compileTemplate('{checkbox:nazev1|$|checked|,|disabled}'));

        $this->assertEquals('<input type="checkbox" name="nazev1" checked/>', $this->object->setDefaults(array('nazev1' => true))->compileTemplate('{checkbox:nazev1}'));
        $this->assertEquals('<input type="checkbox" name="nazev2"/>', $this->object->setDefaults(array('nazev2' => false))->compileTemplate('{checkbox:nazev2}'));

        $this->assertEquals('<input type="checkbox" name="nazev3" checked/>', $this->object->setDefaults(array('nazev3' => '1'))->compileTemplate('{checkbox:nazev3}'));
        $this->assertEquals('<input type="checkbox" name="nazev4" checked/>', $this->object->setDefaults(array('nazev4' => 'dsdsad'))->compileTemplate('{checkbox:nazev4}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu checkbox
     */
    public function testCompileTemplate_checkbox1()
    {
        $this->object->setCode('{checkbox:nazev1}')->setDefaults(array('nazev1' => true));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="checkbox" name="nazev1" checked/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu checkbox
     */
    public function testCompileTemplate_checkbox2()
    {
        $this->object->setCode('{checkbox:nazev1}')->setDefaults(array('nazev1' => '1'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="checkbox" name="nazev1" checked/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu checkbox
     */
    public function testCompileTemplate_checkbox3()
    {
        $this->object->setCode('{checkbox:nazev1}')->setDefaults(array('nazev1' => false));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="checkbox" name="nazev1"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu checkbox
     */
    public function testCompileTemplate_checkbox4()
    {
        $this->object->setCode('{checkbox:nazev1;sdjkh}');//->setDefaults(array('nazev1' => false));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="checkbox" name="nazev1" checked/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu radio
     */
    public function testCompileTemplate_radio()
    {
        $this->assertEquals('<input type="radio" name="nazev1"/>', $this->object->compileTemplate('{radio:nazev1}'));
        $this->assertEquals('<input type="radio" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{radio:nazev1;hodnota2}'));
        $this->assertEquals('<input type="radio" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{radio:nazev1;hodno
ta2}'));
        $this->assertEquals('<input type="radio" name="nazev1" checked/>', $this->object->compileTemplate('{radio:nazev1|$|checked}'));
        $this->assertEquals('<input type="radio" name="nazev1" checked disabled/>', $this->object->compileTemplate('{radio:nazev1|$|checked|,|disabled}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu radio
     */
    public function testCompileTemplate_radio1()
    {
        $this->object->setCode('{radio:nazev1;a}{radio:nazev1;b}{radio:nazev1;c}')->setDefaults(array('nazev1' => 'a'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="radio" name="nazev1" value="a" checked/><input type="radio" name="nazev1" value="b"/><input type="radio" name="nazev1" value="c"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu radio
     */
    public function testCompileTemplate_radio2()
    {
        $this->object->setCode('{radio:nazev1;a}{radio:nazev1;b}{radio:nazev1;c}')->setDefaults(array('nazev1' => 'b'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="radio" name="nazev1" value="a"/><input type="radio" name="nazev1" value="b" checked/><input type="radio" name="nazev1" value="c"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu radio
     */
    public function testCompileTemplate_radio3()
    {
        $this->object->setCode('{radio:nazev1;a}{radio:nazev1;b}{radio:nazev1;c}');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="radio" name="nazev1" value="a"/><input type="radio" name="nazev1" value="b"/><input type="radio" name="nazev1" value="c"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu radio
     */
    public function testCompileTemplate_radio4()
    {
        $this->object->setCode('{radio:nazev1;a|$|checked}{radio:nazev1;b}{radio:nazev1;c}');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="radio" name="nazev1" value="a" checked/><input type="radio" name="nazev1" value="b"/><input type="radio" name="nazev1" value="c"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu radio
     */
    public function testCompileTemplate_radio5()
    {
        $_POST = array($this->object->getSubmittedBy() => '.....', 'nazev1' => 'c');
        $this->object->setCode('{radio:nazev1;a}{radio:nazev1;b}{radio:nazev1;c}')->setReturnValues($_POST);
        $this->assertTrue($this->object->isSubmitted());
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="radio" name="nazev1" value="a"/><input type="radio" name="nazev1" value="b"/><input type="radio" name="nazev1" value="c" checked/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu select
     */
    public function testCompileTemplate_select()
    {
        $this->assertEquals('<select name="nazev1"></select>', $this->object->compileTemplate('{select:nazev1}'));
        $this->assertEquals('<select name="nazev1"><option value="0">a</option><option value="1">b</option><option value="2">c</option></select>', $this->object->compileTemplate('{select:nazev1;[a, b, c]}'));
        $this->assertEquals('<select name="nazev1"><option value="0">a</option><option value="1">b</option><option value="2">c</option></select>', $this->object->compileTemplate('{select:nazev1;
- a
- b
- c}'));
        $this->assertEquals('<select name="nazev1"><option value="a">v1</option><option value="b">v2</option><option value="c">v3</option></select>', $this->object->compileTemplate('{select:nazev1;
a: v1
b: v2
c: v3}'));
        $this->assertEquals('<select name="nazev1"><optgroup label="g1"><option value="a">v1</option><option value="b">v2</option></optgroup><optgroup label="g2"><option value="c">v3</option><option value="d">v4</option></optgroup></select>', $this->object->compileTemplate('{select:nazev1;
g1:
  a: v1
  b: v2
g2:
  c: v3
  d: v4}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu select
     */
    public function testCompileTemplate_select1()
    {
        $this->assertEquals('<select name="nazev1[]"></select>', $this->object->compileTemplate('{select:nazev1[]}'));
        $this->assertEquals('<select name="nazev1[]"><option value="0">a</option><option value="1">b</option><option value="2">c</option></select>', $this->object->compileTemplate('{select:nazev1[];[a, b, c]}'));
        $this->assertEquals('<select name="nazev1[]"><option value="0">a</option><option value="1" selected>b</option><option value="2" selected>c</option></select>', $this->object->setDefaults(array('nazev1' => array(1, 2)))->compileTemplate('{select:nazev1[];[a, b, c]}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * @covers classes\TplForm::setItems
     * kompilace elementu select
     */
    public function testCompileTemplate_select2()
    {
        $this->assertEquals('<select name="nazev1[]"><option value="a">aa</option><option value="b">bb</option><option value="c">cc</option></select>', $this->object->setItems('nazev1[]', array('a' => 'aa', 'b' => 'bb', 'c' => 'cc'))->compileTemplate('{select:nazev1[]}'));
        $this->assertEquals('<select name="nazev2[]"><option value="0">hmmm</option><option value="a">aa</option><option value="b">bb</option><option value="c">cc</option></select>', $this->object->setItems('nazev2[]', array('hmmm', 'a' => 'aa', 'b' => 'bb', 'c' => 'cc'))->compileTemplate('{select:nazev2[]}'));
        $this->assertEquals('<select name="nazev2[]"><option value="0">prompt polozka</option><option value="a">aa</option><option value="b">bb</option><option value="c">cc</option></select>', $this->object->setItems('nazev2[]', array('a' => 'aa', 'b' => 'bb', 'c' => 'cc'), 'prompt polozka')->compileTemplate('{select:nazev2[]}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu file
     */
    public function testCompileTemplate_file()
    {
        $this->assertEquals('<input type="file" name="nazev1"/>', $this->object->compileTemplate('{file:nazev1}'));
        $this->assertEquals('<input type="file" name="nazev1"/>', $this->object->compileTemplate('{file:nazev1;hodnota2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu email
     */
    public function testCompileTemplate_email()
    {
        $this->assertEquals('<input type="email" name="nazev1"/>', $this->object->compileTemplate('{email:nazev1}'));
        $this->assertEquals('<input type="email" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{email:nazev1;hodnota2}'));
        $this->assertEquals('<input type="email" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{email:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu url
     */
    public function testCompileTemplate_url()
    {
        $this->assertEquals('<input type="url" name="nazev1"/>', $this->object->compileTemplate('{url:nazev1}'));
        $this->assertEquals('<input type="url" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{url:nazev1;hodnota2}'));
        $this->assertEquals('<input type="url" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{url:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu tel
     */
    public function testCompileTemplate_tel()
    {
        $this->assertEquals('<input type="tel" name="nazev1"/>', $this->object->compileTemplate('{tel:nazev1}'));
        $this->assertEquals('<input type="tel" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{tel:nazev1;hodnota2}'));
        $this->assertEquals('<input type="tel" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{tel:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu number
     */
    public function testCompileTemplate_number()
    {
        $this->assertEquals('<input type="number" name="nazev1"/>', $this->object->compileTemplate('{number:nazev1}'));
        $this->assertEquals('<input type="number" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{number:nazev1;hodnota2}'));
        $this->assertEquals('<input type="number" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{number:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu range
     */
    public function testCompileTemplate_range()
    {
        $this->assertEquals('<input type="range" name="nazev1"/>', $this->object->compileTemplate('{range:nazev1}'));
        $this->assertEquals('<input type="range" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{range:nazev1;hodnota2}'));
        $this->assertEquals('<input type="range" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{range:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu search
     */
    public function testCompileTemplate_search()
    {
        $this->assertEquals('<input type="search" name="nazev1"/>', $this->object->compileTemplate('{search:nazev1}'));
        $this->assertEquals('<input type="search" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{search:nazev1;hodnota2}'));
        $this->assertEquals('<input type="search" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{search:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu color
     */
    public function testCompileTemplate_color()
    {
        $this->assertEquals('<input type="color" name="nazev1"/>', $this->object->compileTemplate('{color:nazev1}'));
        $this->assertEquals('<input type="color" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{color:nazev1;hodnota2}'));
        $this->assertEquals('<input type="color" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{color:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu datalist
     */
    public function testCompileTemplate_datalist()
    {
        $this->assertEquals('<datalist id="nazev1"></datalist>', $this->object->compileTemplate('{datalist:nazev1}'));
        $this->assertEquals('<datalist id="nazev1"><option value="a"><option value="b"><option value="c"></datalist>', $this->object->compileTemplate('{datalist:nazev1;[a, b, c]}'));
        $this->assertEquals('<datalist id="nazev1"><option value="a"><option value="b"><option value="c"></datalist>', $this->object->compileTemplate('{datalist:nazev1;
- a
- b
- c}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu date
     */
    public function testCompileTemplate_date()
    {
        $this->assertEquals('<input type="date" name="nazev1"/>', $this->object->compileTemplate('{date:nazev1}'));
        $this->assertEquals('<input type="date" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{date:nazev1;hodnota2}'));
        $this->assertEquals('<input type="date" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{date:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu week
     */
    public function testCompileTemplate_week()
    {
        $this->assertEquals('<input type="week" name="nazev1"/>', $this->object->compileTemplate('{week:nazev1}'));
        $this->assertEquals('<input type="week" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{week:nazev1;hodnota2}'));
        $this->assertEquals('<input type="week" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{week:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu month
     */
    public function testCompileTemplate_month()
    {
        $this->assertEquals('<input type="month" name="nazev1"/>', $this->object->compileTemplate('{month:nazev1}'));
        $this->assertEquals('<input type="month" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{month:nazev1;hodnota2}'));
        $this->assertEquals('<input type="month" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{month:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu time
     */
    public function testCompileTemplate_time()
    {
        $this->assertEquals('<input type="time" name="nazev1"/>', $this->object->compileTemplate('{time:nazev1}'));
        $this->assertEquals('<input type="time" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{time:nazev1;hodnota2}'));
        $this->assertEquals('<input type="time" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{time:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu datetime
     */
    public function testCompileTemplate_datetime()
    {
        $this->assertEquals('<input type="datetime" name="nazev1"/>', $this->object->compileTemplate('{datetime:nazev1}'));
        $this->assertEquals('<input type="datetime" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{datetime:nazev1;hodnota2}'));
        $this->assertEquals($this->object->compileTemplate('{datetime:nazev1;hodno
ta2}'), '<input type="datetime" name="nazev1" value="hodno
ta2"/>');
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu datetime-local
     */
    public function testCompileTemplate_datetime_local()
    {
        $this->assertEquals('<input type="datetime-local" name="nazev1"/>', $this->object->compileTemplate('{datetime-local:nazev1}'));
        $this->assertEquals('<input type="datetime-local" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{datetime-local:nazev1;hodnota2}'));
        $this->assertEquals('<input type="datetime-local" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{datetime-local:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu image
     */
    public function testCompileTemplate_image()
    {
        $this->assertEquals('<input type="image" name="nazev1"/>', $this->object->compileTemplate('{image:nazev1}'));
        $this->assertEquals('<input type="image" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{image:nazev1;hodnota2}'));
        $this->assertEquals('<input type="image" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{image:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu reset
     */
    public function testCompileTemplate_reset()
    {
        $this->assertEquals('<input type="reset" name="nazev1"/>', $this->object->compileTemplate('{reset:nazev1}'));
        $this->assertEquals('<input type="reset" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{reset:nazev1;hodnota2}'));
        $this->assertEquals('<input type="reset" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{reset:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * @runInSeparateProcess
     * kompilace elementu submit
     */
    public function testCompileTemplate_submit()
    {
        $this->assertEquals('<input type="submit" name="__button0__"/>', $this->object->setSubmitBlocker(false)->compileTemplate('{submit:}'));
        $this->assertEquals('<input type="submit" name="nazev1"/>', $this->object->compileTemplate('{submit:nazev1}'));
        $this->assertEquals('<input type="submit" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{submit:nazev1;hodnota2}'));
        $this->assertEquals('<input type="submit" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{submit:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * @runInSeparateProcess
     * kompilace elementu submit
     */
    public function testCompileTemplate_submit2()
    {
      $this->assertEquals('<input type="submit" name="__button0__" onclick="this.style.visibility=\'hidden\';" ondblclick="this.style.visibility=\'hidden\';"/>', $this->object->setSubmitBlocker(true)->compileTemplate('{submit:}'));
      $this->assertEquals('<input type="submit" name="__button0__" onclick="this.style.visibility=\'hidden\';" ondblclick="this.style.visibility=\'hidden\';"/>', $this->object->compileTemplate('{submit:}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu button
     */
    public function testCompileTemplate_button()
    {
        $this->assertEquals('<input type="button" name="nazev1"/>', $this->object->compileTemplate('{button:nazev1}'));
        $this->assertEquals('<input type="button" name="nazev1" value="hodnota2"/>', $this->object->compileTemplate('{button:nazev1;hodnota2}'));
        $this->assertEquals('<input type="button" name="nazev1" value="hodno
ta2"/>', $this->object->compileTemplate('{button:nazev1;hodno
ta2}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu img
     */
    public function testCompileTemplate_img()
    {
        $this->assertEquals('<img src=""/>', $this->object->compileTemplate('{img:obrazek}'));
        $this->assertEquals('<img src="path" alt="ahojky"/>', $this->object->compileTemplate('{img:obrazek;path|$|alt|:|ahojky}'));
        $this->assertEquals('<img src="path" onerror="this.src=\'default_img_path\'"/>', $this->object->compileTemplate('{img:obrazek;path|$|onerror|:|this.src=\'default_img_path\'}'));
        $this->assertEquals('<img src="path" onerror="this.src=\\\'default_img_path\\\'"/>', $this->object->compileTemplate('{img:obrazek;path|$|onerror|:|this.src=\\\'default_img_path\\\'}'));
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu img
     */
    public function testCompileTemplate_img1()
    {
        $this->object->setCode('{img:obrazek;path/|$|onerror|:|this.src=\'default_img_path\'}')->setDefaults(array('obrazek' => 'super_path'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><img src="path/super_path" onerror="this.src=\'default_img_path\'"/></form>', $this->object->render());


    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu img
     */
    public function testCompileTemplate_img2()
    {
        $this->object->setCode('{img:obrazek;path/|$|onerror|:|this.src=\'default_img_path\'}');//->setDefaults(array('obrazek' => 'super_path'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><img src="path/" onerror="this.src=\'default_img_path\'"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu link
     */
    public function testCompileTemplate_link()
    {
        $this->object->setCode('{link:odkaz;path/}nazev{/link}');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><a href="path/">nazev</a></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu link
     */
    public function testCompileTemplate_link1()
    {
        $this->object->setCode('{link:odkaz;path/}nazev{/link}')->setDefaults(array('odkaz' => 'super_path.html'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><a href="path/super_path.html">nazev</a></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu label
     */
    public function testCompileTemplate_label()
    {
        $this->object->setCode('{label:odkaz;pred hodnota}');
        $this->assertEquals('<form action="" method="post" autocomplete="on">pred hodnota</form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::compileTemplate
     * kompilace elementu label
     */
    public function testCompileTemplate_label1()
    {
        $this->object->setCode('{label:odkaz;pred hodnota}')->setDefaults(array('odkaz' => 'super_path.html'));
        $this->assertEquals('<form action="" method="post" autocomplete="on">pred hodnotasuper_path.html</form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setAttribute
     */
    public function testSetAttribute()
    {
        $this->assertEquals('<input type="text" name="nazev1" class="super trida" disabled/>', $this->object->setAttribute('nazev1', 'class', 'super trida')
                                                                                                            ->setAttribute('nazev1', 'checked', false)
                                                                                                            ->setAttribute('nazev1', 'disabled', true)
                                                                                                            ->compileTemplate('{text:nazev1}'));
    }

    /**
     * @covers classes\TplForm::isSubmitted
     */
    public function testIsSubmitted()
    {
        $this->assertFalse($this->object->isSubmitted());
    }

    /**
     * @covers classes\TplForm::isSubmitted
     */
    public function testIsSubmitted1()
    {
        $_POST = array('_tl_' => '....');
        $this->assertFalse($this->object->isSubmitted());
    }

    /**
     * @covers classes\TplForm::isSubmitted
     * @covers classes\TplForm::getSubmittedBy
     */
    public function testIsSubmitted2()
    {
        $_POST = array($this->object->getSubmittedBy() => '...');
        $this->assertTrue($this->object->isSubmitted());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_minlength() // spatny format
    {
        $this->object->setCode('{text:nazev|@|minlength:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_minlength1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|minlength|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_minlength' => array('name' => 'nazev', 'type' => 'minlength', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_minlength2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|minlength:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_minlength3()  // nic
    {
        $this->object->setCode('{text:nazev|@|minlength|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_minlength4()  // malo
    {
        $this->object->setCode('{text:nazev|@|minlength|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_minlength5()  // dost
    {
        $this->object->setCode('{text:nazev|@|minlength|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahojahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_maxlength() // spatny format
    {
        $this->object->setCode('{text:nazev|@|maxlength:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_maxlength1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|maxlength|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_maxlength' => array('name' => 'nazev', 'type' => 'maxlength', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_maxlength2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|maxlength:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_maxlength3()  // nic
    {
        $this->object->setCode('{text:nazev|@|maxlength|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_maxlength4()  // dost
    {
        $this->object->setCode('{text:nazev|@|maxlength|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_maxlength5()  // moc
    {
        $this->object->setCode('{text:nazev|@|maxlength|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahojahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_length()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|length:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_length1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|length|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_length' => array('name' => 'nazev', 'type' => 'length', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_length2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|length:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_length3()  // nic
    {
        $this->object->setCode('{text:nazev|@|length|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_length4()  // malo
    {
        $this->object->setCode('{text:nazev|@|length|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_length5()  // moc
    {
        $this->object->setCode('{text:nazev|@|length|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahojahojahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_length6()  // dost
    {
        $this->object->setCode('{text:nazev|@|length|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahojahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_range() // spatny format
    {
        $this->object->setCode('{text:nazev|@|range:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_range1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|range|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_range' => array('name' => 'nazev', 'type' => 'range', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_range2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|range:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_range3()  // nic
    {
        $this->object->setCode('{text:nazev|@|range|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_range4()  // malo
    {
        $this->object->setCode('{text:nazev|@|range|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_range5()  // moc
    {
        $this->object->setCode('{text:nazev|@|range|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '14');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_range6()  // dost
    {
        $this->object->setCode('{text:nazev|@|range|:|....|:|[5, 10]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '7');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_min() // spatny format
    {
        $this->object->setCode('{text:nazev|@|min:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_min1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|min|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_min' => array('name' => 'nazev', 'type' => 'min', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_min2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|min:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_min3()  // nic
    {
        $this->object->setCode('{text:nazev|@|min|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_min4()  // malo
    {
        $this->object->setCode('{text:nazev|@|min|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '1');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_min5()  // malo
    {
        $this->object->setCode('{text:nazev|@|min|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '2');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_min6()  // presne
    {
        $this->object->setCode('{text:nazev|@|min|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_min7()  // dost
    {
        $this->object->setCode('{text:nazev|@|min|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '8');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_lessorequal() // spatny format
    {
        $this->object->setCode('{text:nazev|@|lessorequal:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_lessorequal1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|lessorequal|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_lessorequal' => array('name' => 'nazev', 'type' => 'lessorequal', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_lessorequal2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|lessorequal:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_lessorequal3()  // nic
    {
        $this->object->setCode('{text:nazev|@|lessorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_lessorequal4()  // moc
    {
        $this->object->setCode('{text:nazev|@|lessorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '7');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_lessorequal5()  // presne
    {
        $this->object->setCode('{text:nazev|@|lessorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_lessorequal6()  // dost
    {
        $this->object->setCode('{text:nazev|@|lessorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '4');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_max() // spatny format
    {
        $this->object->setCode('{text:nazev|@|max:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_max1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|max|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_max' => array('name' => 'nazev', 'type' => 'max', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_max2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|max:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_max3()  // nic
    {
        $this->object->setCode('{text:nazev|@|max|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_max4()  // moc
    {
        $this->object->setCode('{text:nazev|@|max|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '8');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_max5()  // presne
    {
        $this->object->setCode('{text:nazev|@|max|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_max6()  // dost
    {
        $this->object->setCode('{text:nazev|@|max|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_moreorequal() // spatny format
    {
        $this->object->setCode('{text:nazev|@|moreorequal:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_moreorequal1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|moreorequal|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_moreorequal' => array('name' => 'nazev', 'type' => 'moreorequal', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_moreorequal2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|moreorequal:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_moreorequal3()  // nic
    {
        $this->object->setCode('{text:nazev|@|moreorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_moreorequal4()  // malo
    {
        $this->object->setCode('{text:nazev|@|moreorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_moreorequal5()  // presne
    {
        $this->object->setCode('{text:nazev|@|moreorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_moreorequal6()  // dost
    {
        $this->object->setCode('{text:nazev|@|moreorequal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '8');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_integer()  // spatne
    {
        $this->object->setCode('{text:nazev|@|integer|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3a');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_integer1()  // spatne
    {
        $this->object->setCode('{text:nazev|@|integer|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3.93');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_integer2()  // spravne
    {
        $this->object->setCode('{text:nazev|@|integer|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '393');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_double()  // spatne
    {
        $this->object->setCode('{text:nazev|@|double|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3a');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_double1()  // take spravne
    {
        $this->object->setCode('{text:nazev|@|double|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '393');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_double2()  // spravne
    {
        $this->object->setCode('{text:nazev|@|double|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3.93');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_numeric()  // spatne
    {
        $this->object->setCode('{text:nazev|@|numeric|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3a');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_numeric1()  // take spravne
    {
        $this->object->setCode('{text:nazev|@|numeric|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '393');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_numeric2()  // spravne
    {
        $this->object->setCode('{text:nazev|@|numeric|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3.93');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_email()  // spatne
    {
        $this->object->setCode('{text:nazev|@|email|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3a');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_email1()  // spatne
    {
        $this->object->setCode('{text:nazev|@|email|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3a@');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_email2()  // spatne
    {
        $this->object->setCode('{text:nazev|@|email|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj@cau');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_email3()  // sparavne
    {
        $this->object->setCode('{text:nazev|@|email|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj@cau.com');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_url()  // spatne
    {
        $this->object->setCode('{text:nazev|@|url|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '3a');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_url1()  // spatne
    {
        $this->object->setCode('{text:nazev|@|url|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'http://');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_url2()  // mno spravne
    {
        $this->object->setCode('{text:nazev|@|url|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'http://coze');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_url3()  // spravne
    {
        $this->object->setCode('{text:nazev|@|url|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'http://coze.jakze');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_pattern() // spatny format
    {
        $this->object->setCode('{text:nazev|@|pattern:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_pattern1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|pattern|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_pattern' => array('name' => 'nazev', 'type' => 'pattern', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_pattern2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|pattern:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern3()  // nic
    {
        $this->object->setCode('{text:nazev|@|pattern|:|....|:|[0-9]+}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern4()  // spatne
    {
        $this->object->setCode('{text:nazev|@|pattern|:|....|:|[0-9]+}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lorem ipsum');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern5()  // spravne
    {
        $this->object->setCode('{text:nazev|@|pattern|:|....|:|[0-9]+}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '0');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern6()  // spravne
    {
        $this->object->setCode('{text:nazev|@|pattern|:|....|:|[0-9]+}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '07613');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern7()  // ne
    {
        $this->object->setCode('{text:nazev}');
        $this->object->addRule('nazev', 'pattern', '....', '[0-9]{3}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '07613');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern8()  // spravne
    {
        $this->object->setCode('{text:nazev}');
        $this->object->addRule('nazev', 'pattern', '....', '[0-9]{3}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '076');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern9()  // ne
    {
        $this->object->setCode('{text:nazev}');
        $this->object->addRule('nazev', 'pattern', '....', '[\-0-9]{3,}\:[0-9]{2,}\:[0-9]{1,}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '076');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern10()  // ne
    {
        $this->object->setCode('{text:nazev}');
        $this->object->addRule('nazev', 'pattern', '....', '[\-0-9]{3,}\:[0-9]{2,}\:[0-9]{1,}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '076:21');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern11()  // spravne
    {
        $this->object->setCode('{text:nazev}');
        $this->object->addRule('nazev', 'pattern', '....', '[\-0-9]{3,}\:[0-9]{2,}\:[0-9]{1,}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '076:21:1');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_pattern12()  // spravne
    {
        $this->object->setCode('{text:nazev}');
        $this->object->addRule('nazev', 'pattern', '....', '[\-0-9]{3,}\:[0-9]{2,}\:[0-9]{1,}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '-76:21:1');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_count() // spatny format
    {
        $this->object->setCode('{text:nazev|@|count:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_count1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|count|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_count' => array('name' => 'nazev', 'type' => 'count', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_count2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|count:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_count3()  // malo
    {
        $this->object->setCode('{select:nazev[];
- výběr položky
europe:
  cs: česky
  de: dojčasky
word:
  en: englišsky
  uk: ukrajinsky|$|multiple|,|size|:|10|@|count|:|mi byt vybrano pocet: %s|:|3}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => array('cs', 'de'));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_count4()  // moc
    {
        $this->object->setCode('{select:nazev[];
- výběr položky
europe:
  cs: česky
  de: dojčasky
word:
  en: englišsky
  uk: ukrajinsky|$|multiple|,|size|:|10|@|count|:|mi byt vybrano pocet: %s|:|3}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => array('cs', 'de', 'en', 'uk'));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_count5()  // presne
    {
        $this->object->setCode('{select:nazev[];
- výběr položky
europe:
  cs: česky
  de: dojčasky
word:
  en: englišsky
  uk: ukrajinsky|$|multiple|,|size|:|10|@|count|:|mi byt vybrano pocet: %s|:|3}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => array('cs', 'de', 'en'));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_is_in() // spatny format
    {
        $this->object->setCode('{text:nazev|@|is_in:....|:|[1, 2, 3, 4]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionConfigurator
     */
    public function testIsValid_is_in1()  // spatny format, vyplnen pouze argument, spatny vstup do dekoredu
    {
        $this->object->setCode('{text:nazev|@|is_in|:|....:[1, 2, 3, 4]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_is_in2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|is_in:....:[1, 2, 3, 4]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_is_in3()  // spatny argument
    {
        $this->object->setCode('{text:nazev|@|is_in|:|....|:|55}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_is_in4()  // nic
    {
        $this->object->setCode('{text:nazev|@|is_in|:|....|:|[1, 2, 3, 4]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_is_in5()  // moc
    {
        $this->object->setCode('{text:nazev|@|is_in|:|....|:|[1, 2, 3, 4]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '7');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_is_in6()  // spravne
    {
        $this->object->setCode('{text:nazev|@|is_in|:|....|:|[1, 2, 3, 4]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '2');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_equal() // spatny format
    {
        $this->object->setCode('{text:nazev|@|equal:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_equal1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|equal|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_equal' => array('name' => 'nazev', 'type' => 'equal', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_equal2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|equal:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equal3()  // nic
    {
        $this->object->setCode('{text:nazev|@|equal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equal4()  // malo
    {
        $this->object->setCode('{text:nazev|@|equal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '4');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equal5()  // moc
    {
        $this->object->setCode('{text:nazev|@|equal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '6');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equal6()  // presne
    {
        $this->object->setCode('{text:nazev|@|equal|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_equalinput() // spatny format
    {
        $this->object->setCode('{text:nazev|@|equalinput:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_equalinput1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|equalinput|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_equalinput' => array('name' => 'nazev', 'type' => 'equalinput', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_equalinput2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|equalinput:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equalinput3()  // spoatny nazev elementu
    {
        $this->object->setCode('{text:mujnazev}{text:nazev|@|equalinput|:|....|:|mujnazevXX}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equalinput4()  // nic
    {
        $this->object->setCode('{text:mujnazev}{text:nazev|@|equalinput|:|....|:|mujnazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equalinput5()  // spatne
    {
        $this->object->setCode('{text:mujnazev}{text:nazev|@|equalinput|:|....|:|mujnazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '', 'mujnazev' => '....');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equalinput6()  // spatne
    {
        $this->object->setCode('{text:mujnazev}{text:nazev|@|equalinput|:|....|:|mujnazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'dfsdfdsfsdf', 'mujnazev' => 'qwqwqwqwqwqw');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     */
    public function testIsValid_equalinput7()  // spravne
    {
        $this->object->setCode('{text:mujnazev}{text:nazev|@|equalinput|:|....|:|mujnazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj', 'mujnazev' => 'ahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_same() // spatny format
    {
        $this->object->setCode('{text:nazev|@|same:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_same1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|same|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_same' => array('name' => 'nazev', 'type' => 'same', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_same2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|same:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_same3()  // nic
    {
        $this->object->setCode('{text:nazev|@|same|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_same4()  // spatne
    {
        $this->object->setCode('{text:nazev|@|same|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_same5()  // presne
    {
        $this->object->setCode('{text:nazev|@|same|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_filled()  // nic
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_filled1() // dost
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_filled2()  // nic
    {
        $this->object->setCode('{file:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => '', 'type' => '', 'tmp_name' => '', 'error' => 4, 'size' => 0));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_filled3()  // vyplneno
    {
        $this->object->setCode('{file:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'application/pdf', 'tmp_name' => '/tmp/phphzWSe4', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_filled4()
    {
        $this->object->setCode('{text:nazev[cs]}{text:nazev[en]}{text:nazev[de]}');
        $this->object->addRule('nazev', 'filled', '.....');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => array('cs' => 'a', 'en' => 'b', 'de' => 'c'));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_filled5()
    {
        $this->object->setCode('{file:nazev[0]}{file:nazev[1]}{file:nazev[2]}');
        $this->object->addRule('nazev', 'filled', '.....');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => array('', ''), 'type' => array('', ''), 'tmp_name' => array('', ''), 'error' => array(4, 4), 'size' => array(0, 0)));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_less() // spatny format
    {
        $this->object->setCode('{text:nazev|@|less:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_less1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|less|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_less' => array('name' => 'nazev', 'type' => 'less', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_less2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|less:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_less3()  // nic
    {
        $this->object->setCode('{text:nazev|@|less|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_less4()  // moc
    {
        $this->object->setCode('{text:nazev|@|less|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '10');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_less5()  // moc
    {
        $this->object->setCode('{text:nazev|@|less|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_less6()  // akorat
    {
        $this->object->setCode('{text:nazev|@|less|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '4');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_more() // spatny format
    {
        $this->object->setCode('{text:nazev|@|more:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_more1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{text:nazev|@|more|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertEquals(array('nazev_more' => array('name' => 'nazev', 'type' => 'more', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_more2()  // spatny format
    {
        $this->object->setCode('{text:nazev|@|more:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_more3()  // nic
    {
        $this->object->setCode('{text:nazev|@|more|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_more4()  // malo
    {
        $this->object->setCode('{text:nazev|@|more|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '1');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_more5()  // malo
    {
        $this->object->setCode('{text:nazev|@|more|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '5');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_more6()  // dost
    {
        $this->object->setCode('{text:nazev|@|more|:|....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '6');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     * @covers classes\TplForm::removeRule
     */
    public function testIsValid_more_null()  // dost
    {
        $this->object->setCode('{text:nazev|@|more|:|....|:|5}');
        $this->object->removeRule('nazev', 'more');
        $this->assertEquals(array('nazev_more' => 'null'), $this->object->getRules());
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '2');
        $this->object->render();
        $this->assertEmpty($this->object->getRules());
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_maxfilesize() // spatny format
    {
        $this->object->setCode('{file:nazev|@|maxfilesize:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_maxfilesize1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{file:nazev|@|maxfilesize|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $this->object->render();
        $this->assertEquals(array('nazev_maxfilesize' => array('name' => 'nazev', 'type' => 'maxfilesize', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_maxfilesize2()  // spatny format
    {
        $this->object->setCode('{file:nazev|@|maxfilesize:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_maxfilesize3()  // nic, nevybrano ale nepovinne
    {
        $this->object->setCode('{file:nazev|@|maxfilesize|:|....|:|1024}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => '', 'type' => '', 'tmp_name' => '', 'error' => 4, 'size' => 0));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_maxfilesize4()  // moc
    {
        $this->object->setCode('{file:nazev|@|maxfilesize|:|....|:|1024}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'application/pdf', 'tmp_name' => '/tmp/phphzWSe4', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_maxfilesize5()  // akorat
    {
        $this->object->setCode('{file:nazev|@|maxfilesize|:|....|:|1024}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'application/pdf', 'tmp_name' => '/tmp/phphzWSe4', 'error' => 0, 'size' => 1023));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_mimetype() // spatny format
    {
        $this->object->setCode('{file:nazev|@|mimetype:....|:|5}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::processRules
     * @ expectedException classes\ExceptionTplForm
     */
    public function testIsValid_mimetype1()  // spatny format, vyplnen pouze argument
    {
        $this->object->setCode('{file:nazev|@|mimetype|:|....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $this->object->render();
        $this->assertEquals(array('nazev_mimetype' => array('name' => 'nazev', 'type' => 'mimetype', 'negation' => false, 'message' => '', 'argv' => '....:5')), $this->object->getRules());
    }

    /**
     * @covers classes\TplForm::processRules
     * @expectedException classes\ExceptionTplForm
     */
    public function testIsValid_mimetype2()  // spatny format
    {
        $this->object->setCode('{file:nazev|@|mimetype:....:5}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $this->object->render();
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_mimetype3()  // nic
    {
        $this->object->setCode('{file:nazev|@|mimetype|:|....|:|application/pdf}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => '', 'type' => '', 'tmp_name' => '', 'error' => 4, 'size' => 0));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_mimetype4()  // spatne
    {
        $this->object->setCode('{file:nazev|@|mimetype|:|....|:|application/pdf}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'application/pdfXX', 'tmp_name' => '/tmp/phphzWSe4', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_mimetype5()  // spravne
    {
        $this->object->setCode('{file:nazev|@|mimetype|:|....|:|application/pdf}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'application/pdf', 'tmp_name' => '/tmp/phphzWSe4', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image()  // nic, prazdnota se kontroluji jinde!
    {
        $this->object->setCode('{file:nazev|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => '', 'type' => '', 'tmp_name' => '', 'error' => 4, 'size' => 0));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image0()  // nic, prazdnota se kontroluji jinde!
    {
        $this->object->setCode('{file:nazev[]|$|multiple|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => array(''), 'type' => array(''), 'tmp_name' => array(''), 'error' => array(4), 'size' => array(0)));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image1()  // spatne
    {
        $this->object->setCode('{file:nazev|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'application/pdf', 'tmp_name' => '/tmp/phphzWSe4', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image2()  // spravne
    {
        $this->object->setCode('{file:nazev|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'image/png', 'tmp_name' => 'logo.png', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image3()  // spravne
    {
        $this->object->setCode('{file:nazev|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'image/jpeg', 'tmp_name' => 'logo.png', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image4()  // spravne
    {
        $this->object->setCode('{file:nazev|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => 'nejaky nazev', 'type' => 'image/gif', 'tmp_name' => 'logo.png', 'error' => 0, 'size' => 293810));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_image5()  // spravne (multiple)
    {
        $this->object->setCode('{file:nazev[]|$|multiple|@|image|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...',);
        $_FILES = array('nazev' => array('name' => array('nejaky nazev', 'nazev 2'), 'type' => array('image/png', 'image/gif'), 'tmp_name' => array('logo.png', 'logo.png'), 'error' => array(0, 0), 'size' => array(293810, 264521)));
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure()
    {
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return in_array($val, $arg); }, '...', array(12, 14));
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'ahoj');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure2()
    {
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return in_array($val, $arg); }, '...', array(12, 14));
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 12);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure3()
    {
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return $val || $arg; }, '...', 0);
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 12);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure4()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 0, 'nazev1' => 15);
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return $val || $arg; }, '...', $_POST['nazev1']);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure5()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 15, 'nazev1' => null);
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return $val || $arg; }, '...', $_POST['nazev1']);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure6()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 15);
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return $val || $arg; }, '...', isset($_POST['nazev1']) ? $_POST['nazev1'] : null);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure7()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => null);
        $this->object->setCode('{name:nazev}');
        $this->object->addRule('nazev', function($val, $arg) { return $val || $arg; }, '...', isset($_POST['nazev1']) ? $_POST['nazev1'] : null);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure8()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 25);
        $this->object->setCode('{name:nazev}');
        $d = 24;
        $ff = function($val, $arg) use ($d) { return ($val == $arg) && ($arg == $d); };
        $this->object->addRule('nazev', $ff, '...', 25);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure9()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 25);
        $this->object->setCode('{name:nazev}');
        $d = 25;
        $ff = function($val, $arg) use ($d) { return ($val == $arg) && ($arg == $d); };
        $this->object->addRule('nazev', $ff, '...', 25);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure10()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 25);
        $this->object->setCode('{name:nazev}');
        $ff = function($val, $arg) { return $val == 25; };
        $this->object->addRule('nazev', $ff, '...');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_closure11()
    {
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 25);
        $this->object->setCode('{name:nazev}');
        $ff = function($val) { return $val == 25; };
        $this->object->addRule('nazev', $ff, '...');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    function funct($v, $a) {
      return ($v % $a) == 0;
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_function()
    {
        $this->object->setCode('{name:nazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 2);
        $this->object->addRule('nazev', array(__CLASS__, 'funct'), '...', 2);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isValid
     */
    public function testIsValid_function2()
    {
        $this->object->setCode('{name:nazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 3);
        $this->object->addRule('nazev', array(__CLASS__, 'funct'), '...', 2);
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::isSuccess
     */
    public function testIsSuccess()
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->object->render();
        $this->assertTrue($this->object->isSuccess());
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
    }

    /**
     * @covers classes\TplForm::getErrors
     */
    public function testGetErrors()
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
        $this->assertEquals(array('....'), $this->object->getErrors());
    }

    /**
     * @covers classes\TplForm::getErrors
     */
    public function testGetErrors1()
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lerem');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
        $this->assertNull($this->object->getErrors());
    }

    /**
     * @covers classes\TplForm::getValues
     */
    public function testGetValues()
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => '');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertFalse($this->object->isValid());
        $this->assertEquals(array('nazev' => ''), $this->object->getValues());
    }

    /**
     * @covers classes\TplForm::getValues
     */
    public function testGetValues1()
    {
        $this->object->setCode('{text:nazev|@|filled|:|....}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lorem');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
        $this->assertEquals(array('nazev' => 'lorem'), $this->object->getValues());
    }

    /**
     * @covers classes\TplForm::getValues
     */
    public function testGetValues2()
    {
        $this->object->setCode('{text:nazev[]}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => array('lorem'));
        $this->object->render();
        $this->assertEquals(array('nazev' => array('lorem')), $this->object->getValues(true));  // vystup v raw
    }

    /**
     * @covers classes\TplForm::getValues
     */
    public function testGetValues3()
    {
        $this->object->setCode('{text:nazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'name0' => 'cba', 'nazev' => 'a<p>bc');
        $this->object->render();
        $this->assertTrue($this->object->isSubmitted());
        $this->assertEquals(array('nazev' => 'a&lt;p&gt;bc'), $this->object->getValues());
        $this->assertEquals(array('nazev' => 'a&lt;p&gt;bc'), $this->object->getValues(false));
        $this->assertEquals(array('nazev' => 'a<p>bc'), $this->object->getValues(true));
        $this->assertEquals(array('nazev' => 'a&lt;p&gt;bc', 'name0' => 'cba'), $this->object->getValues(false, array('name0')));  // neprobiha konktrola xss
        $this->assertEquals(array('nazev' => 'a&lt;p&gt;bc', 'name0' => 'cba'), $this->object->getValues(null, array('name0')));  // neprobiha konktrola xss
        $this->assertEquals(array('nazev' => 'a<p>bc', 'name0' => 'cba'), $this->object->getValues(true, array('name0')));
    }

    /**
     * @covers classes\TplForm::setDefaults
     */
    public function testSetDefaults()
    {
        $this->object->setCode('{text:nazev}');
        $_POST = array($this->object->getSubmittedBy() => '');
        $this->object->setDefaults(array('nazev' => 'test default'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev" value="test default"/></form>', $this->object->render());
        $this->assertFalse($this->object->isSubmitted());
    }

    /**
     * @covers classes\TplForm::setReturnValues
     */
    public function testSetReturnValues() // bez postu
    {
        $this->object->setCode('{text:nazev}');
        $_POST = array($this->object->getSubmittedBy() => '...');
        $this->object->setReturnValues(array('nazev' => 'test return 1'));
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev" value="test return 1"/></form>', $this->object->render());
        $this->assertTrue($this->object->isSubmitted());
    }

    /**
     * @covers classes\TplForm::setReturnValues
     */
    public function testSetReturnValues1()  // z postu
    {
        $this->object->setCode('{text:nazev}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'test return 2');
        $this->object->setReturnValues($_POST);
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev" value="test return 2"/></form>', $this->object->render());
        $this->assertTrue($this->object->isSubmitted());
    }

    /**
     * @covers classes\TplForm::setAutoHide
     */
    public function testSetAutoHide()
    {
        $this->object->setCode('{text:nazev}')->setAutoHide(true);
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->assertEquals('', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setAutoHide
     */
    public function testSetAutoHide1()
    {
        $this->object->setCode('{text:nazev}')->setAutoHide(true);
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->assertEquals('', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setAutoHide
     */
    public function testSetAutoHide2()
    {
        $this->object->setCode('{text:nazev}')->setAutoHide(false);
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setSubmitBlocker
     * @runInSeparateProcess
     */
    public function testSetSubmitBlocker()
    {
        $this->object->setCode('{text:nazev}{submit:;}');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/><input type="submit" name="__button0__" onclick="this.style.visibility=\'hidden\';" ondblclick="this.style.visibility=\'hidden\';"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setSubmitBlocker
     * @runInSeparateProcess
     */
    public function testSetSubmitBlocker1()
    {
        $this->object->setCode('{text:nazev}{submit:;}')->setSubmitBlocker(true);
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/><input type="submit" name="__button0__" onclick="this.style.visibility=\'hidden\';" ondblclick="this.style.visibility=\'hidden\';"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setSubmitBlocker
     * @runInSeparateProcess
     */
    public function testSetSubmitBlocker2()
    {
        $this->object->setCode('{text:nazev}{submit:;}')->setSubmitBlocker(false);
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/><input type="submit" name="__button0__"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::setSubmitSecurity
     */
    public function testSetSubmitSecurity()
    {
        $this->object->setCode('{text:nazev|@|filled|:|...}{submit:;}');
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
        $this->assertTrue($this->object->isSuccess(true));
        $this->assertTrue($this->object->isSuccess(true));
    }

    /**
     * @covers classes\TplForm::setSubmitSecurity
     */
    public function testSetSubmitSecurity1()
    {
        $this->object->setCode('{text:nazev|@|filled|:|...}{submit:;}')->setSubmitSecurity(false);
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum');
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
        $this->assertTrue($this->object->isSuccess(true));
        $this->assertTrue($this->object->isSuccess(true));
    }

    /**
     * @covers classes\TplForm::setSubmitSecurity
     */
    public function testSetSubmitSecurity2()
    {
        $this->object->setCode('{text:nazev|@|filled|:|...}{submit:;}')
            ->setSubmitBlocker(false)
            ->setSubmitSecurity(true);
        $text = $this->object->getSecurityText();
        $butt = '__button'.TplForm::getCountForm().'__';
        $this->assertEquals('__security'.$butt, $this->object->getSecurityName());
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/><input type="submit" name="'.$butt.'"/><input type="hidden" name="'.$this->object->getSecurityName().'" value="'.$text.'"/></form>', $this->object->render());
        $_POST = array($this->object->getSubmittedBy() => '...', 'nazev' => 'lolem ipsum', $this->object->getSecurityName() => $text);
        $this->assertTrue($this->object->isSubmitted());
        $this->assertTrue($this->object->isValid());
        $this->assertTrue($this->object->isSuccess(true));
        $this->assertFalse($this->object->isSuccess(true));
    }

    /**
     * @covers classes\TplForm::render
     */
    public function testRender()
    {
        $this->object->setCode('{text:nazev}');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/></form>', $this->object->render());
    }

    /**
     * @covers classes\TplForm::__toString
     */
    public function test__toString()
    {
        $this->object->setCode('{text:nazev}');
        $this->assertEquals('<form action="" method="post" autocomplete="on"><input type="text" name="nazev"/></form>', (string) $this->object);
    }
}
