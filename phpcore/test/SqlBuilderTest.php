<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\SqlBuilder" sqlbuilder.php
 * mv -v SqlBuilderTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-01-04 at 21:46:17.
 */
class SqlBuilderTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var SqlBuilder
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // $this->object = new SqlBuilder;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\SqlBuilder::create
     */
    public function testCreate()
    {
        $sql = SqlBuilder::create('tabulka');
        $this->assertInstanceOf('classes\SqlBuilder', $sql);
        $this->assertEquals(SqlBuilder::CREATE, $sql->type());
    }

    /**
     * @covers classes\SqlBuilder::drop
     */
    public function testDrop()
    {
        $sql = SqlBuilder::drop('tabulka');
        $this->assertInstanceOf('classes\SqlBuilder', $sql);
        $this->assertEquals(SqlBuilder::DROP, $sql->type());
    }

    /**
     * @covers classes\SqlBuilder::column
     */
    public function testColumn()
    {
        $sql = SqlBuilder::create('tabulka');
        $this->assertEmpty($sql->getColumns());
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id');
        $this->assertEquals(array('id'), $sql->getColumns());
        $sql->column('jmeno')
            ->column('prijmeni');
        $this->assertEquals(array('id', 'jmeno', 'prijmeni'), $sql->getColumns());

        $s = SqlBuilder::create('tabulka');
        $s->c('id2');
        $this->assertEquals(array('id2'), $s->getColumns());
    }

    /**
     * @covers classes\SqlBuilder::getColumns
     */
    public function testGetColumns()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()
            ->column('jmeno')
            ->column('prijmeni');
        $this->assertEquals(array('id', 'jmeno', 'prijmeni'), $sql->getColumns());
    }

    /**
     * @covers classes\SqlBuilder::getColumn
     */
    public function testGetColumn()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()
            ->column('jmeno')
            ->column('prijmeni');

        $c = $sql->getColumn('jmeno');
        $this->assertNull($c[SqlBuilder::TYPE]);
    }

    /**
     * @covers classes\SqlBuilder::getColumn
     */
    public function testGetColumn1()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int();

        $c = $sql->getColumn('id');
        $this->assertEquals('INT', $c[SqlBuilder::TYPE]);
    }

    /**
     * @covers classes\SqlBuilder::getColumn
     * @expectedException classes\ExceptionSqlBuilder
     */
    public function testGetColumnException()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int();
        $sql->getColumn('neco');
    }

    /**
     * @covers classes\SqlBuilder::column
     */
    public function testRemove()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()
            ->column('jmeno')
            ->column('prijmeni');
        $sql->remove('jmeno');
        $this->assertEquals(array('id', 'prijmeni'), $sql->getColumns());

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()
            ->c('jmeno')
            ->c('prijmeni');
        $sql->remove('jmeno');
        $this->assertEquals(array('id', 'prijmeni'), $sql->getColumns());
    }

    /**
     * @covers classes\SqlBuilder::primary
     */
    public function testPrimary()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()->primary();

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::PK]);

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->pk()
            ->c('sloupec');

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::PK]);

        $c = $sql->getColumn('sloupec');
        $this->assertFalse($c[SqlBuilder::PK]);

    }

    /**
     * @covers classes\SqlBuilder::notNull
     */
    public function testNotNull()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()->notNull();

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::NN]);

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->nn()
            ->c('sloupec');

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::NN]);

        $c = $sql->getColumn('sloupec');
        $this->assertFalse($c[SqlBuilder::NN]);
    }

    /**
     * @covers classes\SqlBuilder::unique
     */
    public function testUnique() {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()->unique();

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::UQ]);

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->uq()
            ->c('sloupec');
        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::UQ]);

        $c = $sql->getColumn('sloupec');
        $this->assertFalse($c[SqlBuilder::UQ]);
    }

    /**
     * @covers classes\SqlBuilder::unsigned
     */
    public function testUnsigned() {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()->unsigned();

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::UN]);

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->un()
            ->c('sloupec');

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::UN]);

        $c = $sql->getColumn('sloupec');
        $this->assertFalse($c[SqlBuilder::UN]);
    }

    /**
     * @covers classes\SqlBuilder::autoIncrement
     */
    public function testAutoIncrement() {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()->autoIncrement();

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::AI]);

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->ai()
            ->c('sloupec');

        $c = $sql->getColumn('id');
        $this->assertTrue($c[SqlBuilder::AI]);

        $c = $sql->getColumn('sloupec');
        $this->assertFalse($c[SqlBuilder::AI]);
    }

    /**
     * @covers classes\SqlBuilder::defaultValue
     */
    public function testDefaultValue() {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int()->defaultValue(59);

        $c = $sql->getColumn('id');
        $this->assertEquals(59, $c[SqlBuilder::DF]);

        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->defaultValue(88)
            ->c('sloupec');

        $c = $sql->getColumn('id');
        $this->assertEquals(88, $c[SqlBuilder::DF]);

        $c = $sql->getColumn('sloupec');
        $this->assertNull($c[SqlBuilder::DF]);
    }

    /**
     * @covers classes\SqlBuilder::foreign
     */
    public function testForeign()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->foreign('users', 'iduser');

        $c = $sql->getColumn('id');
        $this->assertEquals('users', $c[SqlBuilder::FK][SqlBuilder::FK_FOR]);
        $this->assertEquals('iduser', $c[SqlBuilder::FK][SqlBuilder::FK_REF]);
        $this->assertEquals(SqlBuilder::FK_NO_ACTION, $c[SqlBuilder::FK][SqlBuilder::FK_DELETE]);
        $this->assertEquals(SqlBuilder::FK_NO_ACTION, $c[SqlBuilder::FK][SqlBuilder::FK_UPDATE]);

        $sql->c('id')->int()->fk('users', 'iduser', SqlBuilder::FK_SET_NULL, SqlBuilder::FK_CASCADE);
        $c = $sql->getColumn('id');
        $this->assertEquals('users', $c[SqlBuilder::FK][SqlBuilder::FK_FOR]);
        $this->assertEquals('iduser', $c[SqlBuilder::FK][SqlBuilder::FK_REF]);
        $this->assertEquals(SqlBuilder::FK_SET_NULL, $c[SqlBuilder::FK][SqlBuilder::FK_DELETE]);
        $this->assertEquals(SqlBuilder::FK_CASCADE, $c[SqlBuilder::FK][SqlBuilder::FK_UPDATE]);
    }

    /**
     * @covers classes\SqlBuilder::foreign
     */
    public function testComment()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->int()->comment('toto je cislo');

        $c = $sql->getColumn('id');
        $this->assertEquals('toto je cislo', $c[SqlBuilder::CM]);
    }

    /**
     * @covers classes\SqlBuilder::__call
     */
    public function test__call()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->column('id')->int();
        $this->assertEquals('INT', $sql->getType('id'));
        $sql->varchar(20);
        $this->assertEquals('VARCHAR(20)', $sql->getType('id'));
        $sql->number(5, 2);
        $this->assertEquals('NUMBER(5,2)', $sql->getType('id'));
        $sql->date();
        $this->assertEquals('DATE', $sql->getType('id'));
        $sql->datetime();
        $this->assertEquals('DATETIME', $sql->getType('id'));
        $sql->neco(1, 2, 3);
        $this->assertEquals('NECO(1,2,3)', $sql->getType('id'));
        $sql->enum(array('a', 'b', 'c'));
        $this->assertEquals('ENUM(\'a\', \'b\', \'c\')', $sql->getType('id'));
    }

    /**
     * @covers classes\SqlBuilder::__call
     * @expectedException classes\ExceptionSqlBuilder
     */
    public function test__callException()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->getType('cosik');
    }

    /**
     * @covers classes\SqlBuilder::getSQLite3
     */
    public function testGetSQLite3()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->pk()->ai()
            ->c('jmeno')->varchar(30)
            ->c('prijmeni')->varchar(50)
            ->c('login')->varchar(50)->nn()->uq()
            ->c('vek')->int()->un()->comment('cislo veku')
            ->c('plat')->int()->defaultValue(10000)
            ->fk('user', 'iduser');
        $this->assertEquals('CREATE TABLE IF NOT EXISTS tabulka (
  id  NULL PRIMARY KEY AUTOINCREMENT,
  jmeno VARCHAR(30) NULL,
  prijmeni VARCHAR(50) NULL,
  login VARCHAR(50) NOT NULL,
  vek INTEGER UNSIGNED NULL /* cislo veku */,
  plat INTEGER NULL DEFAULT 10000,
  UNIQUE (login),
  CONSTRAINT fk_user_plat
    FOREIGN KEY(plat)
    REFERENCES user(iduser)
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
)', $sql->getSQLite3());

        $sql = SqlBuilder::drop('tabulka');
        $this->assertEquals('DROP TABLE IF EXISTS tabulka', $sql->getSQLite3());
    }

    /**
     * @covers classes\SqlBuilder::getMySQL
     */
    public function testGetMySQL()
    {
        $sql = SqlBuilder::create('tabulka');
        $sql->c('id')->pk()->ai()
            ->c('jmeno')->varchar(30)
            ->c('prijmeni')->varchar(50)
            ->c('login')->varchar(50)->nn()->uq()
            ->c('vek')->int()->un()->comment('cislo veku')
            ->c('plat')->int()->defaultValue(10000)
            ->fk('user', 'iduser');

        $this->assertEquals("CREATE TABLE IF NOT EXISTS `tabulka` (
  `id`  NULL AUTO_INCREMENT,
  `jmeno` VARCHAR(30) NULL,
  `prijmeni` VARCHAR(50) NULL,
  `login` VARCHAR(50) NOT NULL,
  `vek` INT UNSIGNED NULL COMMENT 'cislo veku',
  `plat` INT NULL DEFAULT 10000,
  PRIMARY KEY (`id`),
  UNIQUE INDEX (`login`),
  INDEX `fk_plat_index` (`plat` ASC),
  CONSTRAINT `fk_user_plat`
    FOREIGN KEY (`plat`)
    REFERENCES `user` (`iduser`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
)
ENGINE = InnoDB
CHARSET = utf8
COLLATE = utf8_general_ci", $sql->getMySQL());

        $sql = SqlBuilder::drop('tabulka');
        $this->assertEquals('DROP TABLE IF EXISTS `tabulka`', $sql->getMySQL());
    }

    /**
     * @covers classes\SqlBuilder::getAs
     */
    public function testGetAs()
    {
        $sql = SqlBuilder::drop('tabulka');
        $this->assertEquals('DROP TABLE IF EXISTS tabulka', $sql->getAs(SqlBuilder::SQLITE3));
        $this->assertEquals('DROP TABLE IF EXISTS `tabulka`', $sql->getAs(SqlBuilder::MYSQL));
    }
}
