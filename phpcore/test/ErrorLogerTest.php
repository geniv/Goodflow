<?php
namespace classes;

/**
 * phpunit-skelgen --bootstrap ../loader.php --test -- "classes\ErrorLoger" errorloger.php
 * mv -v ErrorLogerTest.php ../test/
 */

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-05-25 at 11:18:00.
 * @runTestsInSeparateProcesses
 */
class ErrorLogerTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var ErrorLoger
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //~ $this->object = new ErrorLoger;
        ErrorLoger::enableErrorLog(false);  // vypnuti logovani, blokuje totiz testovani
        $_SERVER['REMOTE_ADDR'] = '127.0.0.1';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        // 100% reseni mazani
        array_map('unlink', glob('*.log')); // smazani *.log souboru
    }

    /**
     * @covers classes\ErrorLoger::enable
     * @runInSeparateProcess
     */
    public function testEnable()  // jen stdout
    {
        $this->assertFalse(ErrorLoger::isEnabled());
        ErrorLoger::enable();
        //~ ErrorLoger::setPrintStdOut(false);
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertNull(ErrorLoger::getPath());
        $this->assertNull(ErrorLoger::getEmail());
    }

    /**
     * @covers classes\ErrorLoger::enable
     * @runInSeparateProcess
     */
    public function testEnable2()  // jen log (bez stdout)
    {
        $this->assertFalse(ErrorLoger::isEnabled());
        ErrorLoger::enable(__DIR__ . '/');
        ErrorLoger::setPrintStdOut(false);
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertEquals(__DIR__ . '/', ErrorLoger::getPath());
        $this->assertNull(ErrorLoger::getEmail());
    }

    /**
     * @covers classes\ErrorLoger::enable
     * @runInSeparateProcess
     */
    public function testEnable3()  // jen email (bez stdout, okamzite odesilani)
    {
        $this->assertFalse(ErrorLoger::isEnabled());
        ErrorLoger::enable(null, 'email@email.com');
        ErrorLoger::setPrintStdOut(false);
        //~ ErrorLoger::setInstantlySend(true);
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertNull(ErrorLoger::getPath());
        $this->assertEquals('email@email.com', ErrorLoger::getEmail());
    }

    /**
     * @covers classes\ErrorLoger::enable
     * @runInSeparateProcess
     */
    public function testEnable4()  // log + email (bez stdout, okamzite odesilani)
    {
        $this->assertFalse(ErrorLoger::isEnabled());
        ErrorLoger::enable(__DIR__ . '/', 'email@email.com');
        ErrorLoger::setPrintStdOut(false);
        //~ ErrorLoger::setInstantlySend(true);
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertEquals(__DIR__ . '/', ErrorLoger::getPath());
        $this->assertEquals('email@email.com', ErrorLoger::getEmail());
    }

    /**
     * @covers classes\ErrorLoger::enable
     * @runInSeparateProcess
     */
    public function testEnable5()  // log + email (bez stdout, odesilani na vyzadani pres cron)
    {
        $this->assertFalse(ErrorLoger::isEnabled());
        ErrorLoger::enable(__DIR__ . '/', 'email@email.com');
        ErrorLoger::setPrintStdOut(false);
        ErrorLoger::setInstantlySend(false);
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertEquals(__DIR__ . '/', ErrorLoger::getPath());
        $this->assertEquals('email@email.com', ErrorLoger::getEmail());
        //~ ErrorLoger::synchronizeCron();
    }

    /**
     * @covers classes\ErrorLoger::enable
     * @covers classes\ErrorLoger::addLog
     */
    public function testEnable6Real()
    {
        ErrorLoger::enable(__DIR__ . '/');
        ErrorLoger::setEmail('nejaky@email.com');
        ErrorLoger::setPrintStdOut(false);  // pro adminy true
        ErrorLoger::setInstantlySend(false);  // pro adminy false

        ErrorLoger::addLog('Cron spusten, cas vykonavani ...');  // zalogovani
        $this->assertFileExists(__DIR__ . '/'); //soubor existuje
        $this->assertStringEqualsFile(__DIR__ . '/'.ErrorLoger::getFileNameLog(), date('Y-m-d H:i:s').' [E_USER_NOTICE] [127.0.0.1] Cron spusten, cas vykonavani ...' . PHP_EOL);
    }

    /**
     * @covers classes\ErrorLoger::save
     */
    public function testSave()
    {
        ErrorLoger::enable(__DIR__ . '/', 'email@email.com');
        $this->assertTrue(ErrorLoger::isEnabled());
        ErrorLoger::save();
        $this->assertFileExists(ErrorLoger::DEFAULT_CONFIG_NAME);
    }

    /**
     * @covers classes\ErrorLoger::load
     */
    public function testLoad()
    {
        $this->assertFileExists(ErrorLoger::DEFAULT_CONFIG_NAME);
        ErrorLoger::load();
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertEquals(__DIR__ . '/', ErrorLoger::getPath());
        $this->assertEquals('email@email.com', ErrorLoger::getEmail());
        unlink(ErrorLoger::DEFAULT_CONFIG_NAME);
    }

    /**
     * @covers classes\Emailer
     * @covers classes\ErrorLoger::save
     */
    public function testSave1()
    {
        $email = new Emailer;
        $email->setFrom('error@project.com')
              ->addTo('to.addres@email.com')
              ->setSubject('error log ze stranek xyz');

        ErrorLoger::enable(__DIR__.'/', $email);
        $this->assertTrue(ErrorLoger::isEnabled());
        ErrorLoger::save();
        $this->assertFileExists(ErrorLoger::DEFAULT_CONFIG_NAME);
    }

    /**
     * @covers classes\ErrorLoger::load
     */
    public function testLoad1()
    {
        $this->assertFileExists(ErrorLoger::DEFAULT_CONFIG_NAME);
        ErrorLoger::load();
        $this->assertTrue(ErrorLoger::isEnabled());
        $this->assertEquals(__DIR__.'/', ErrorLoger::getPath());

        $email = new Emailer;
        $email->setFrom('error@project.com')
              ->addTo('to.addres@email.com')
              ->setSubject('error log ze stranek xyz');
        $this->assertEquals($email, ErrorLoger::getEmail());
        unlink(ErrorLoger::DEFAULT_CONFIG_NAME);
    }

    /**
     * @covers classes\ErrorLoger::setEmailer
     */
    public function testSetEmailer()
    {
        $email = new Emailer;
        $email->setFrom('error@project.com')
              ->addTo('to.addres@email.com')
              ->setSubject('error log ze stranek xyz');
        ErrorLoger::enable(null, $email);
        $this->assertEquals($email, ErrorLoger::getEmail());
    }

    /**
     * @covers classes\ErrorLoger::setEmail
     * @covers classes\ErrorLoger::getEmail
     */
    public function testSetEmailer1()
    {
        $email = new Emailer;
        $email->setFrom('error@project.com')
              ->addTo('to.addres@email.com')
              ->setSubject('error log ze stranek xyz');

        ErrorLoger::enable();
        $this->assertNull(ErrorLoger::getEmail());

        ErrorLoger::setEmail($email);
        $this->assertEquals($email, ErrorLoger::getEmail());
    }

    /**
     * @covers classes\ErrorLoger::synchronizeCron
     */
    public function testSynchronizeCron()
    {
        ErrorLoger::enable(__DIR__ . '/', 'email@email.com');
        $this->assertTrue(ErrorLoger::isEnabled());
        ErrorLoger::save();

        $this->assertFileExists(ErrorLoger::DEFAULT_CONFIG_NAME);
        $this->assertEquals(0, ErrorLoger::synchronizeCron());

        unlink(ErrorLoger::DEFAULT_CONFIG_NAME);
    }

    /**
     * @covers classes\ErrorLoger::_shutdownHandler
     */
    public function test_shutdownHandler()  //pri uklidu
    {
        ErrorLoger::enable();
        $this->expectOutputString(date('Y-m-d H:i:s').' [E_NOTICE] [127.0.0.1] Undefined variable: gg1 in ' . __FILE__ . ' on line ' . (__LINE__ + 1).PHP_EOL); // ocekava text na stdout
        if ($gg1) {}
        $this->assertEquals(date('Y-m-d H:i:s').' [E_NOTICE] [127.0.0.1] Undefined variable: gg1 in ' . __FILE__ . ' on line '.(__LINE__ - 1), ErrorLoger::getMessage());
    }

    /**
     * @covers classes\ErrorLoger::_exceptionHandler
     * @covers classes\ErrorLoger::logTryCatchException
     */
    public function test_exceptionHandler() //exception
    {
        ErrorLoger::enable();
        ErrorLoger::setPrintStdOut(false);
        try {
          throw new \Exception('wa-ta');
        } catch (\Exception $e) {
          ErrorLoger::logTryCatchException($e); // manualni predani exceptionu
        }
        $this->assertEquals(date('Y-m-d H:i:s').' [Exception (0)] [127.0.0.1] wa-ta in ' . __FILE__ . ' on line '.(__LINE__ - 4), ErrorLoger::getMessage());
    }

    /**
     * @covers classes\ErrorLoger::_errorHandler
     */
    public function test_errorHandler() // pri erroru
    {
        ErrorLoger::enable();
        ErrorLoger::setPrintStdOut(false);
        $this->expectOutputString(''); // ocekava text na stdout
        array_merge(55, array());
        $this->assertEquals(date('Y-m-d H:i:s').' [E_WARNING] [127.0.0.1] array_merge(): Argument #1 is not an array in ' . __FILE__ . ' on line '.(__LINE__ - 1), ErrorLoger::getMessage());
    }

    /**
     * @covers classes\ErrorLoger::_errorHandler
     */
    public function test_errorHandler1() // pri erroru
    {
        ErrorLoger::enable();
        $this->expectOutputString(''); // ocekava text na stdout
        $a = array();
        echo @$a['ggg'];
        $this->assertEquals(date('Y-m-d H:i:s').' [E_NOTICE] [127.0.0.1] Undefined index: ggg in ' . __FILE__ . ' on line '.(__LINE__ - 1), ErrorLoger::getMessage());
    }

    /**
     * @covers classes\ErrorLoger::_errorHandler
     */
    public function test_errorHandler2() // pri erroru
    {
        ErrorLoger::enable();
        //~ ErrorLoger::setPrintStdOut(true);
        $this->expectOutputString(''); // ocekava text na stdout
        $a = array();
        echo @unlink($a['ggg2']);
        $this->assertEquals(date('Y-m-d H:i:s').' [E_WARNING] [127.0.0.1] unlink(): No such file or directory in ' . __FILE__ . ' on line '.(__LINE__ - 1), ErrorLoger::getMessage());
    }

    /**
     * @covers classes\ErrorLoger::setErrorPage
     */
    public function testSetErrorPage()
    {
        ErrorLoger::enable();
        $page = '{$type}, zprava: {$message}, soubor: {$file}';
        ErrorLoger::setErrorPage($page);
        //~ ErrorLoger::setPrintStdOut(false);
        $this->expectOutputString('E_NOTICE, zprava: Undefined variable: gg0, soubor: ' . __FILE__ . PHP_EOL); // ocekava text na stdout
        echo $gg0;
        $this->assertEquals('E_NOTICE, zprava: Undefined variable: gg0, soubor: ' . __FILE__, ErrorLoger::getMessage());
    }
}
