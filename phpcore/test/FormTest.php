<?php
namespace classes;

/**
 * phpunit-skelgen --test -- "classes\Form" Form.php
 * mv -v FormTest.php ../test/
 * phpunit --bootstrap ../classes/Form.php FormTest
 */

//TODO jednotlive testy na Form, FormControl, FormGroup, FormRule (FormRules)
//~ classes\FormRules,
//~ classes\FormControl,
//~ classes\FormGroup,
//~ classes\FormRule;

/*
  poznamka: nemuze se odesilat nad jednou instanci 2x jiny POST!! je to kravina a programove by to bylo mnoho prace navic
  (muselo by se cistit kaskadova nekolik instanci uvnitr instance)

  bacha pri kazdem volani $f se pripisuje do instance!!!
*/

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-10-28 at 10:16:26.
 */
class FormTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Form
     */
    protected $object;

    private $countries = array(
              'Europe' => array(
                  'CZ' => 'Česká Republika',
                  'SK' => 'Slovensko',
                  'GB' => 'Velká Británie',
              ),
              'rusko' => array(
                'a' => 'aaaaa',
                'b' => 'bbbb',
                'c' => 'cccc',
                'd' => 'dddd',
              ),
              'CA' => 'Kanada',
              'US' => 'USA',
              '?'  => 'jiná',
            );

    private $countries2 = array(
                'CA' => 'Kanada',
                'US' => 'USA',
                '?'  => 'jiná',
            );

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        Html::setBreakDepth(true);
        $this->object = new Form;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers classes\Form::getAction
     * @covers classes\Form::setAction
     */
    public function testAction()
    {
        $this->assertEquals('', $this->object->getAction());
        $this->object->setAction('pokus.php');
        $this->assertEquals('pokus.php', $this->object->getAction());
        $this->assertEquals('<form action="pokus.php" method="post"></form>', $this->object);
    }

    /**
     * @covers classes\Form::getMethod
     * @covers classes\Form::setMethod
     * @covers classes\Form::getMethodValues
     */
    public function testMethod()
    {
        $this->assertEquals(Form::POST, $this->object->getMethod());
        $_POST = array('a' => 1, 'b' => 2);
        $this->assertEquals($_POST, $this->object->getMethodValues());

        $this->assertEquals('<form action="" method="post"></form>', $this->object);

        $this->object->setMethod(Form::GET);
        $this->assertEquals(Form::GET, $this->object->getMethod());
        $_GET = array('a' => 1, 'b' => 2);
        $this->assertEquals($_GET, $this->object->getMethodValues());
        $this->assertEquals('<form action="" method="get"></form>', $this->object);
    }

    /**
     * @covers classes\Form::getFromAttributes
     * @covers classes\Form::setFormAttribute
     */
    public function testFromAttributes()
    {
        $atr = $this->object->getFormAttributes();
        $this->assertEquals(Form::POST, $atr['method']);

        $this->object->setFormAttribute('class', 'muj_form');
        $atr = $this->object->getFormAttributes();
        $this->assertEquals('muj_form', $atr['class']);
        $this->assertEquals('<form action="" method="post" class="muj_form"></form>', $this->object);

    }

    /**
     * @covers classes\Form::addGroup
     * @covers classes\Form::removeGroup
     * @covers classes\Form::getGroup
     * @covers classes\Form::getCurrentGroup
     * @covers classes\Form::getGroups
     */
    public function testAddGroup()
    {
        $g = $this->object->getGroups();
        $this->assertEquals('', $g[0]->getCaption());
        $this->assertCount(1, $g);
        $this->assertEquals('', $this->object->getCurrentGroup()->getCaption());

        $this->object->addGroup('novy');
        $g = $this->object->getGroups();
        $this->assertEquals('novy', $g[1]->getCaption());
        $this->assertCount(2, $g);
        $this->assertEquals('novy', $this->object->getCurrentGroup()->getCaption());

        $this->assertEquals('', $this->object->getGroup('')->getCaption());
        $this->assertEquals('novy', $this->object->getGroup('novy')->getCaption());

        $this->assertCount(2, $this->object->getGroups());
        $this->object->removeGroup('novy');
        $this->assertCount(1, $this->object->getGroups());

        $f = new Form;
        $f->addText('a')
          ->addText('b')
          ->addText('c')
            ->addGroup('xx')
          ->addText('d')
            ->addGroup('yy')
          ->addText('e')
            ->addGroup('xx')
          ->addText('f')
            ->addGroup()
          ->addText('g');

        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="a" />
    <input type="text" name="b" />
    <input type="text" name="c" />
  </fieldset>
  <fieldset>
    <legend>xx</legend>
    <input type="text" name="d" />
  </fieldset>
  <fieldset>
    <legend>yy</legend>
    <input type="text" name="e" />
  </fieldset>
  <fieldset>
    <legend>xx</legend>
    <input type="text" name="f" />
  </fieldset>
  <input type="text" name="g" />
</form>', $f);

    }

    //~ /**
    //~ * @expectedException classes\ExceptionForm
    //~ */
    //~ public function testGroupException1() {
        //~ $this->object->addGroup('');
    //~ }

    /**
    * @expectedException classes\ExceptionForm
    */
    public function testGroupException2() {
        $this->object->getGroup('jiny');
    }

    /**
    * @expectedException classes\ExceptionForm
    */
    public function testGroupException3() {
        $this->object->removeGroup('novy');
    }

    /**
     * @covers classes\Form::addBackLink
     */
    public function testAddBackLink()
    {
        $this->object->addBackLink('zpet', array('a' => 'b'));
        $this->assertEquals('<form action="" method="post">
  <a href="?a=b" title="zpet">zpet</a>
</form>', $this->object);
    }

    /**
     * @expectedException classes\ExceptionForm
     */
    public function test__callException1() {
      //volani bez nastaveneho submit tlacitka
      $this->object->isSubmitted();
    }

    /**
     * @expectedException classes\ExceptionForm
     */
    public function test__callException2() {
      //volani bez nastaveneho submit tlacitka
      $this->object->isSuccess();
    }

    public function testSubmitWrongData1() {
        $f = $this->object;
        $f->addText('myname', 'Jméno:')
            ->setRequired('Zadejte prosím jméno') //alias pro filled
          ->addSubmit('tl', null, 'Tlacitko');
        //~ $f->render();
        $this->assertFalse($f->isSubmitted());  // neodeslano
        // nastaveny spatne data
        $_POST = array('myname' => null, 'tl' => 'Tlacitko');
        //isSubmitted
        $this->assertTrue($f->isSubmitted()); // po odeslani (bez kontroly podminek)
        $this->assertFalse($f->hasErrors());
        $this->assertCount(0, $f->getErrors());
        $this->assertEquals($_POST, $f->getValues());
    }

    public function testSubmitWrongData2() {
        $f = $this->object;
        $f->addText('myname', 'Jméno:')
            ->setRequired('Zadejte prosím jméno') //alias pro filled
          ->addSubmit('tl');
        //~ $f->render();
        $this->assertFalse($f->isSubmitted());  // neodeslano
        // nastaveny spatne data
        $_POST = array('tl' => '');
        //isValid
        $this->assertTrue($f->isSubmitted());
        $this->assertFalse($f->isValid());  // po validaci
        $this->assertTrue($f->hasErrors());
        $this->assertCount(1, $f->getErrors());
    }

    public function testSubmitWrongData3() {
        $f = $this->object;
        $f->addText('myname', 'Jméno:')
            ->setRequired('Zadejte prosím jméno') //alias pro filled
          ->addSubmit('tl', null, 'Tlacitko');
        $this->assertFalse($f->isSubmitted());  // neodeslano

        // nastaveny spatne data
        $_POST = array('myname' => null, 'tl' => 'Tlacitko');
        //isSuccess
        $this->assertFalse($f->isSuccess());  // po odelsani a validaci
        $this->assertTrue($f->hasErrors());
        $this->assertCount(1, $f->getErrors());
    }

    public function testSubmitGoodData() {
        $f = $this->object;
        $f->addText('myname', 'Jméno:')
            ->setRequired('Zadejte prosím jméno') //alias pro filled
          ->addSubmit('tl', null, 'Tlacitko');

        $f->render();

        $this->assertFalse($f->isSubmitted());  // neodeslano

         // nastaveny spravne data
        $_POST = array('myname' => 'pokusne jmeno', 'tl' => 'Tlacitko');
        //isSubmitted
        $this->assertTrue($f->isSubmitted()); // po odeslani (bez kontroly podminek)
        $this->assertFalse($f->hasErrors()); //jeste nevyhodnocoval
        $this->assertCount(0, $f->getErrors());
        $this->assertEquals($_POST, $f->getValues());
        //isValid
        $this->assertTrue($f->isSubmitted());
        $this->assertTrue($f->isValid());  // po validaci
        $this->assertFalse($f->hasErrors());
        $this->assertCount(0, $f->getErrors());
        //isSuccess
        $this->assertTrue($f->isSuccess());  // po odelsani a validaci
        $this->assertFalse($f->hasErrors());
        $this->assertCount(0, $f->getErrors());
    }

    // __call:addText, varianta 1, nette compatible
    public function test__callAddText1() {
        $this->object->addText('name_text');
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="name_text" />
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 2
    public function test__callAddText2() {
      $this->object->addText('name_text', array('value' => 'my_value'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input value="my_value" type="text" name="name_text" />
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 3, nette compatible
    public function test__callAddText3() {
        $this->object->addText('name_text', null, 'my_value');  //pokud neni label potreba
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input value="my_value" type="text" name="name_text" />
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 4
    public function test__callAddText4() {
        $this->object->setFormAttribute(FORM::CALLBACK_LABEL, function($r) { return $r['html']::label()->add($r['html']::span()->setText($r['label']))->add($r['element']); });
        $this->object->addText('name_text', array('label' => 'my label'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <label>
      <span>my label</span>
      <input type="text" name="name_text" />
    </label>
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 5, nette compatible
    public function test__callAddText5() {
        $this->object->setFormAttribute(FORM::CALLBACK_LABEL, function($r) { return $r['html']::label()->add($r['html']::span()->setText($r['label']))->add($r['element']); });
        $this->object->addText('name_text', 'my label');
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <label>
      <span>my label</span>
      <input type="text" name="name_text" />
    </label>
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 6
    public function test__callAddText6() {
        $this->object->setFormAttribute(FORM::CALLBACK_LABEL, function($r) { return $r['html']::label()->add($r['html']::span()->setText($r['label']))->add($r['element']); });
        $this->object->addText('name_text', array('label' => 'my label', 'value' => 'my_value'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <label>
      <span>my label</span>
      <input value="my_value" type="text" name="name_text" />
    </label>
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 7, nette compatible
    public function test__callAddText7() {
        $this->object->setFormAttribute(FORM::CALLBACK_LABEL, function($r) { return $r['html']::label()->add($r['html']::span()->setText($r['label']))->add($r['element']); });
        $this->object->addText('name_text', 'my label', 'my_value');
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <label>
      <span>my label</span>
      <input value="my_value" type="text" name="name_text" />
    </label>
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 8
    public function test__callAddText8() {
        $this->object->setFormAttribute(FORM::CALLBACK_LABEL, function($r) { return $r['html']::label()->add($r['html']::span()->setText($r['label']))->add($r['element']); });
        $this->object->addText('name_text', array('label' => 'my label', 'value' => 'my_value', 'class' => 'my_class'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <label>
      <span>my label</span>
      <input value="my_value" class="my_class" type="text" name="name_text" />
    </label>
  </fieldset>
</form>', $this->object);
    }

    // __call:addText, varianta 9, nette compatible (az na ten konec to je zpetna kompatibilita)
    public function test__callAddText9() {
        $this->object->setFormAttribute(FORM::CALLBACK_LABEL, function($r) { return $r['html']::label()->add($r['html']::span()->setText($r['label']))->add($r['element']); });
        $this->object->addText('name_text', 'my label', 'my_value', array('class' => 'my_class'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <label>
      <span>my label</span>
      <input value="my_value" class="my_class" type="text" name="name_text" />
    </label>
  </fieldset>
</form>', $this->object);
    }

    /**
     * test pravidla Form::EQUAL
     */
    public function testRuleEQUAL1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => ''); //same jako name=>null
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleEQUAL2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => '5', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 55, 'tl' => '');
      $this->assertFalse($f->isSuccess());
      //~ var_dump($f->getErrors());
    }

    public function testRuleEQUAL5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => '55', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleEQUAL6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleEQUAL7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => '5', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleEQUAL8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 55, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => '55', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL10() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');  //nesmi byt rovno 5
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL11() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => '5.01', 'tl' => '');  //nesmi byt rovno 5
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL12() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, null, 5)  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 5.01, 'tl' => '');  //nesmi byt rovno 5
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL13() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, array(10, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => array(10, 12), 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL14() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, array(10, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => array(10, '12'), 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL15() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EQUAL, null, array(10, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => array(10.0, '12'), 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleEQUAL16() {
      $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, 'Bylo použito zakázané uživatelské jméno', array('admin', 'administrator'))
                        ->addSubmit('tl');
      $_POST = array('name' => 'admin', 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testRuleEQUAL17() {
      $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::EQUAL, 'Bylo použito zakázané uživatelské jméno', array('admin', 'administrator'))
                        ->addSubmit('tl');
      $_POST = array('name' => 'adminA', 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
    }

    /**
     * test pravidla Form::IS_IN
     */
    public function testRuleIS_IN1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::IS_IN, null, array(5, 15, 20, 30))
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleIS_IN2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::IS_IN, null, array(5, 15, 20, 30))
                        ->addSubmit('tl');
      $_POST = array('name' => 6, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleIS_IN3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::IS_IN, null, array(5, 15, 20, 30))
                        ->addSubmit('tl');
      $_POST = array('name' => 15.1, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleIS_IN4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::IS_IN, null, array(5, 15, 20, 30))  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 15, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleIS_IN5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::IS_IN, null, array(5, 15, 20, 30))  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleIS_IN6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::IS_IN, null, array(5, 15, 20, 30))  // negace
                        ->addSubmit('tl');
      $_POST = array('name' => 15.1, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleIS_IN7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::IS_IN, null, array(5, 15, 20, 30))
                        ->addSubmit('tl');
      $_POST = array('name' => 15, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::SAME
     */
    public function testRuleSAME1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::SAME, null, 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => ''); //same jako name=>null
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleSAME2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::SAME, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => '5', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleSAME3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::SAME, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleSAME4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::SAME, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleSAME5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::SAME, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5.0, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::LESS
     */
    public function testRuleLESS1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LESS, null, 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => ''); //same jako name=>null
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleLESS2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LESS, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleLESS3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LESS, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 4, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleLESS4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LESS, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => '4', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    //~ /** alias k MIN
     //~ * test pravidla Form::LESSOREQUAL
     //~ */
    //~ public function testRuleLESSOREQUAL1() {
      //~ $f = $this->object->addText('name', 'Jmeno:')
                          //~ ->addRule(Form::LESSOREQUAL, null, 5)
                        //~ ->addSubmit('tl');
      //~ $_POST = array('tl' => ''); //same jako name=>null
      //~ $this->assertFalse($f->isSuccess());
    //~ }

    /**
     * test pravidla Form::MORE
     */
    public function testRuleMORE1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MORE, null, 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => ''); //same jako name=>null
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleMORE2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MORE, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleMORE3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MORE, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 6, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleMORE4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MORE, null, 5)
                        ->addSubmit('tl');
      $_POST = array('name' => '6', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    //~ /** alias k MAX
     //~ * test pravidla Form::MOREOREQUAL
     //~ */
    //~ public function testRuleMOREOREQUAL1() {
      //~ $f = $this->object->addText('name', 'Jmeno:')
                          //~ ->addRule(Form::MOREOREQUAL, null, 5)
                        //~ ->addSubmit('tl');
      //~ $_POST = array('tl' => ''); //same jako name=>null
      //~ $this->assertFalse($f->isSuccess());
    //~ }

    /**
     * test pravidla Form::FILLED
     */
    public function testRuleFILLED1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('tl' => ''); //same jako name=>null
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleFILLED2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => '', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleFILLED3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => null, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleFILLED4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => 'ahoj', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleFILLED5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => '', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleFILLED6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(~Form::FILLED)  //negace
                        ->addSubmit('tl');
      $_POST = array('name' => 'sdsfdf', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleFILLED7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => 5564, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleFILLED8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          //~ ->addRule(Form::FILLED)
                          ->setRequired()
                        ->addSubmit('tl');
      $_POST = array('name' => 0, 'tl' => '');  //bacha takovy zvastni stav, odcyhcen diky testu ;)
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleFILLED9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => '0', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleFILLED10() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::FILLED)
                        ->addSubmit('tl');
      $_POST = array('name' => ' ', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::MIN_LENGTH
     */
    public function testRuleMIN_LENGTH1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'jmeno musi mit minilaln %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => ''); //same jako name=>null
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleMIN_LENGTH2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'jmeno musi mit minilaln %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcd', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleMIN_LENGTH3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'jmeno musi mit minilaln %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcde', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleMIN_LENGTH4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'jmeno musi mit minilaln %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdeabcdeabcde', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::MAX_LENGTH
     */
    public function testMAX_LENGTH1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX_LENGTH, 'jmeno musi mit maximalni %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX_LENGTH2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX_LENGTH, 'jmeno musi mit maximalni %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcd', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX_LENGTH3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX_LENGTH, 'jmeno musi mit maximalni %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcde', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX_LENGTH4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX_LENGTH, 'jmeno musi mit maximalni %d znaku', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdef', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::LENGTH
     */
    public function testLENGTH1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d az %d znaku', array(4, 12))
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testLENGTH2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d az %d znaku', array(4, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testLENGTH3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d az %d znaku', array(4, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdefghijklmn', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testLENGTH4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d az %d znaku', array(4, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcd', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testLENGTH5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d az %d znaku', array(4, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdefghijkl', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testLENGTH6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d az %d znaku', array(4, 12))
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdef', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    //--------------------------------------------------------------------------

    public function testLENGTH7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcde', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testLENGTH8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testLENGTH9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::LENGTH, 'jmeno musi mit delku %d', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdef', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::EMAIL
     */
    public function testEMAIL1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testEMAIL2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcdef', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testEMAIL3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('name' => 'email@domena.com', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testEMAIL4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('name' => 'email.email.email.emaildom_ena@domena.com', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testEMAIL5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('name' => 'email@dom_ena.com', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testEMAIL6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('name' => 'email@domena.co_ze', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testEMAIL7() {
      $f = $this->object->addText('name', 'Jmeno:')
                        ->setEmptyValue('@')
                          ->addRule(Form::FILLED)
                          //~ ->addRule(Form::EMAIL, 'musi jit o korektni email')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::URL
     */
    public function testURL1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testURL2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('name' => 'email@domena.com', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testURL3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('name' => 'www.coze.cz', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testURL4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('name' => 'http://www.coze.cz', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testURL5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('name' => 'http://www.coze.cz/', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testURL6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('name' => 'http://www.coze.cz/~jmeno', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testURL7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::URL, 'musi jit o korektni url')
                        ->addSubmit('tl');
      $_POST = array('name' => 'http://www.coze.cz/a=1&b=2', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::PATTERN
     */
    public function testPATTERN1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testPATTERN2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => 'http://www.coze.cz', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testPATTERN3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => '123456', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testPATTERN4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => 123456, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testPATTERN5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => '12345', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testPATTERN6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => 12345, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testPATTERN7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testPATTERN8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::PATTERN, 'musi odpovidat vzoru PSC', '[0-9]{5}')
                        ->addSubmit('tl');
      $_POST = array('name' => 'abcde', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::INTEGER
     */
    public function testINTEGER1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '--1234', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '-1234', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testINTEGER5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testINTEGER6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => -1234, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testINTEGER7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 1234, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testINTEGER8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '--1234.545', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '-1234.545', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER10() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234.545', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER11() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 1234.545, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testINTEGER12() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::INTEGER, 'musi byt cele cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => -1234.545, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::DOUBLE
     */
    public function testDOUBLE() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '--1234', 'tl' => '');
      $this->assertFalse($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234', 'tl' => '');
      $this->assertTrue($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '-1234', 'tl' => '');
      $this->assertTrue($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 1234, 'tl' => '');
      $this->assertTrue($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234.545', 'tl' => '');
      $this->assertTrue($f->isSuccess());

      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::DOUBLE, 'musi byt double cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 1234.545, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::NUMERIC
     */
    public function testNUMERIC1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testNUMERIC2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testNUMERIC3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '--1234', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testNUMERIC4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '-1234', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '--1234.545', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testNUMERIC7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '-1234.545', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => '1234.545', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => -1234, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC10() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 1234, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC11() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => -1234.545, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testNUMERIC12() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::NUMERIC, 'musi byt cislo')
                        ->addSubmit('tl');
      $_POST = array('name' => 1234.545, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::MIN
     * minimalni hodnota cisla!
     */
    public function testMIN1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMIN2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '18', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMIN3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 18, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMIN4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '--20', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMIN5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => -20, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMIN6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '20', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMIN7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 20, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMIN8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '28', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMIN9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MIN, 'musi byt minimalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 28, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::MAX
     * maximalni hodnota cisla!
     */
    public function testMAX1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '23', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 23, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX5() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '20', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX6() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 20, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX7() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '18', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX8() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => 18, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX9() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '--15', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX10() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => '-15', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX11() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(Form::MAX, 'musi byt maximalne %d', 20)
                        ->addSubmit('tl');
      $_POST = array('name' => -15, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::RANGE
     */
    public function testRuleRANGE1() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl', null, '');
      $_POST = array('age' => null, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE2() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl', null, '');
      $_POST = array('age' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE3() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl', null, '');
      $_POST = array('age' => '--18', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE4() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl', null, '');
      $_POST = array('age' => '--120', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE5() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => 15, 'tl' => 'Tlacitko');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE6() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => -15, 'tl' => 'Tlacitko');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE7() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl', null);
      $_POST = array('age' => 18, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleRANGE8() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => 20, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleRANGE9() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => -20, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE10() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => 120, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testRuleRANGE11() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => -120, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testRuleRANGE12() {
      $f = $this->object->addText('age', 'Věk:')
                          ->addRule(Form::RANGE, 'Věk musí být od %d do %d let', array(18, 120))
                        ->addSubmit('tl');
      $_POST = array('age' => 130, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::COUNT
     */
    public function testCOUNT1() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(Form::COUNT, null, 2)
                        ->addSubmit('tl', null, '');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCOUNT2() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(1), 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCOUNT3() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(1, 2, 3), 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCOUNT4() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(1, 2), 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCOUNT5() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(~Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(1, 2, 3), 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCOUNT6() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(~Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(1), 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCOUNT7() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(~Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(1, 2), 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCOUNT8() {
      $f = $this->object->addSelect('vyber')
                          ->setItems($this->countries2)
                          ->addRule(Form::COUNT, null, 2)
                        ->addSubmit('tl');
      $_POST = array('vyber' => array(), 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * testy uploadu
     *
     * test pravidla Form::MAX_FILE_SIZE
     */
    public function testMAX_FILE_SIZE1() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MAX_FILE_SIZE, null, 64 * 1024)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array();
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX_FILE_SIZE2() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MAX_FILE_SIZE, null, 64 * 1024)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.pdf',
                                        'type' => 'application/pdf',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 163794,
                                        )
                      );
      $this->assertFalse($f->isSuccess());
    }

    public function testMAX_FILE_SIZE3() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MAX_FILE_SIZE, null, 64 * 1024)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.pdf',
                                        'type' => 'application/pdf',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => (64 * 1024) - 1,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    public function testMAX_FILE_SIZE4() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MAX_FILE_SIZE, null, 64 * 1024)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.pdf',
                                        'type' => 'application/pdf',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    /**
     * test pravidla Form::MIME_TYPE
     */
    public function testMIME_TYPE1() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MIME_TYPE, null, 'application/pdf')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array();
      $this->assertFalse($f->isSuccess());
    }

    public function testMIME_TYPE2() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MIME_TYPE, null, 'application/pdf')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.pdf',
                                        'type' => 'application/pdf',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    public function testMIME_TYPE3() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::MIME_TYPE, null, 'application/pdf')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.pdf',
                                        'type' => 'application/pdfX',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla Form::IMAGE
     */
    public function testIMAGE1() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::IMAGE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array();
      $this->assertFalse($f->isSuccess());
    }

    public function testIMAGE2() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::IMAGE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.pdf',
                                        'type' => 'application/pdfX',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertFalse($f->isSuccess());
    }

    public function testIMAGE3() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::IMAGE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.png',
                                        'type' => 'image/png',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    public function testIMAGE4() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::IMAGE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.jpg',
                                        'type' => 'image/jpeg',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    public function testIMAGE5() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::IMAGE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.gif',
                                        'type' => 'image/gif',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    public function testIMAGE6() {
      $f = $this->object->addUpload('soubor')
                          ->addRule(Form::IMAGE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('soubor' => array(
                                        'name' => 'pravdepodobnost.gif',
                                        'type' => 'image/gifX',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertFalse($f->isSuccess());
    }

    // callback funkce pro rule
    function cmpRule($value, $arg) {
      return ($value % $arg) === 1;
    }

    /**
     * test pravidla (static) function xyz($value, $arg) {}
     */
    public function testCustomValidationFunctions1() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(array(__CLASS__, 'cmpRule'), 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * @expectedException classes\ExceptionForm
     */
    public function testCustomValidationFunctions2() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(array(__CLASS__, 'cmpRuleA'), 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 2, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCustomValidationFunctions3() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(array(__CLASS__, 'cmpRule'), 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 11, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCustomValidationFunctions4() {
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule(array(__CLASS__, 'cmpRule'), 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * test pravidla anonymni funkce $xyz = function($value, $arg) {}
     */
    public function testCustomAnonymousFunctions1() {
      $func = function($value, $arg) {
        return ($value % $arg) === 1;
      };
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule($func, 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    /**
     * @expectedException classes\ExceptionForm
     */
    public function testCustomAnonymousFunctions2() {
      $func = function($value, $arg) {
        return ($value % $arg) === 1;
      };
      $func1 = "...";
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule($func1, 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 2, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCustomAnonymousFunctions3() {
      $func = function($value, $arg) {
        return ($value % $arg) === 1;
      };
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule($func, 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 11, 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCustomAnonymousFunctions4() {
      $func = function($value, $arg) {
        return ($value % $arg) === 1;
      };
      $f = $this->object->addText('name', 'Jmeno:')
                          ->addRule($func, 'nesplnuje uzivatelskou funkci', 5)
                        ->addSubmit('tl');
      $_POST = array('name' => 5, 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCustomAnonymousFunctions5() {
      $this->object->addText('oddNumber', 'Liché číslo')
                     ->addRule(Form::INTEGER)
                     ->addRule(function ($value) {
                          return ($value % 2);
                     }, 'Musíte uvést liché číslo')
                  ->addSubmit('tl');
      $_POST = array('oddNumber' => 6, 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testCustomAnonymousFunction6() {
      $this->object->addText('oddNumber', 'Liché číslo')
                     ->addRule(Form::INTEGER)
                     ->addRule(function ($value) {
                          return ($value % 2);
                     }, 'Musíte uvést liché číslo')
                  ->addSubmit('tl');
      $_POST = array('oddNumber' => 5, 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
    }

    /**
     * test kombinovanych pravidel
     */
    public function testCombinationRule1() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*')
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    // addPassword

    public function testCombinationRule2() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'ab', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule3() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'abc', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule4() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]+.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'a1', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule5() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]+.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'ac3', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCombinationRule6() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]{2}.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'ac3', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule7() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]{2}.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'a4c3', 'tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule8() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]{2}.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'ac53', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCombinationRule9() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]+.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'a5c3', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCombinationRule10() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]*.*')
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'acb', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCombinationRule11() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9]+.*')  //vice zasebou
                        ->addSubmit('tl');
      $_POST = array('heslo' => 'acb6654', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    public function testCombinationRule12() {
      $f = $this->object->addPassword('heslo', 'Jmeno:')
                          ->addRule(Form::MIN_LENGTH, 'Heslo musí mít alespoň %d znaky', 3)
                          ->addRule(Form::PATTERN, 'Musí obsahovat číslici', '.*[0-9].*') //kdekoliv
                        ->addSubmit('tl');
      $_POST = array('heslo' => '1a4', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    // addUpload

    public function testCombinationRule13() {
      $f = $this->object->addUpload('avatar', 'Avatar:')
                          ->addRule(Form::FILLED)
                          ->addRule(Form::IMAGE, 'Avatar musí být JPEG, PNG nebo GIF.')
                          ->addRule(Form::MAX_FILE_SIZE, 'Maximální velikost souboru je 64 kB.', 64 * 1024 /* v bytech */)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule14() {
      $f = $this->object->addUpload('avatar', 'Avatar:')
                          ->addRule(Form::FILLED)
                          ->addRule(Form::IMAGE, 'Avatar musí být JPEG, PNG nebo GIF.')
                          ->addRule(Form::MAX_FILE_SIZE, 'Maximální velikost souboru je 64 kB.', 64 * 1024 /* v bytech */)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('avatar' => array(
                                        'name' => 'pravdepodobnost.gif',
                                        'type' => 'image/gifX',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule15() {
      $f = $this->object->addUpload('avatar', 'Avatar:')
                          ->addRule(Form::FILLED)
                          ->addRule(Form::IMAGE, 'Avatar musí být JPEG, PNG nebo GIF.')
                          ->addRule(Form::MAX_FILE_SIZE, 'Maximální velikost souboru je 64 kB.', 64 * 1024 /* v bytech */)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('avatar' => array(
                                        'name' => 'pravdepodobnost.gif',
                                        'type' => 'image/gif',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024 + 1,
                                        )
                      );
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule16() {
      $f = $this->object->addUpload('avatar', 'Avatar:')
                          ->addRule(Form::FILLED)
                          ->addRule(Form::IMAGE, 'Avatar musí být JPEG, PNG nebo GIF.')
                          ->addRule(Form::MAX_FILE_SIZE, 'Maximální velikost souboru je 64 kB.', 64 * 1024 /* v bytech */)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $_FILES = array('avatar' => array(
                                        'name' => 'pravdepodobnost.gif',
                                        'type' => 'image/gif',
                                        'tmp_name' => '/tmp/phpEu3kf5',
                                        'error' => 0,
                                        'size' => 64 * 1024,
                                        )
                      );
      $this->assertTrue($f->isSuccess());
    }

    // addCheckbox

    public function testCombinationRule17() {
      $f = $this->object->addCheckbox('agree', 'Souhlasím s podmínkami')
                          ->addRule(Form::EQUAL, 'Je potřeba souhlasit s podmínkami', TRUE)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $this->assertFalse($f->isSuccess());
    }

    public function testCombinationRule18() {
      $f = $this->object->addCheckbox('agree', 'Souhlasím s podmínkami')
                          ->addRule(Form::EQUAL, 'Je potřeba souhlasit s podmínkami', true)
                        ->addSubmit('tl');
      $_POST = array('agree' => 'on', 'tl' => '');
      $this->assertTrue($f->isSuccess());
    }

    // onSubmit

    public function testCombinationRule19() {
      $f = $this->object->addCheckbox('agree', 'Souhlasím s podmínkami')
                          ->addRule(Form::EQUAL, 'Je potřeba souhlasit s podmínkami', true)
                        ->addSubmit('tl');
      $_POST = array('tl' => '');
      $thx = $this;
      $f->onSubmit = function($form) use ($thx) {
        $thx->assertFalse($form->isSuccess());
      };
    }

    public function testCombinationRule20() {
      $f = $this->object->addCheckbox('agree', 'Souhlasím s podmínkami')
                          ->addRule(Form::EQUAL, 'Je potřeba souhlasit s podmínkami', true)
                        ->addSubmit('tl');
      $_POST = array('agree' => 'on', 'tl' => '');
      $thx = $this;
      $f->onSubmit = function($form) use ($thx) {
        $thx->assertTrue($form->isSuccess());
      };
    }

    public function testCombinationRule21() {
      $f = $this->object->addCheckbox('agree', 'Souhlasím s podmínkami')
                          ->addRule(Form::EQUAL, 'Je potřeba souhlasit s podmínkami: %value, %label, %name', 'yy')
                        ->addSubmit('tl');
      $_POST = array('agree' => 'xx', 'tl' => '');
      $thx = $this;
      $f->onSubmit = function($form) use ($thx) {
        $thx->assertFalse($form->isSuccess());
        $thx->assertTrue($form->hasErrors());
        $e = $form->getErrors();
        $thx->assertEquals("Je potřeba souhlasit s podmínkami: xx, Souhlasím s podmínkami, agree", $e[0]);
      };
    }

    // addSelect + setItems + setPrompt + setDefaultValue + setRequired

    public function testCombinationRule22() {
      $this->object->addSelect('country', 'Země:')
                      ->setItems($this->countries2)
                      ->setPrompt('Zvolte zemi')
                      ->setDefaultValue('')
                      ->setRequired()
                    ->addSubmit('tl');
      $_POST = array('country' => null, 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testCombinationRule23() {
      $this->object->addSelect('country', 'Země:')
                      ->setItems($this->countries2)
                      ->setPrompt('Zvolte zemi')
                      ->setDefaultValue('')
                      ->setRequired()
                    ->addSubmit('tl');
      $_POST = array('country' => '', 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testCombinationRule24() {
      $this->object->addSelect('country', 'Země:')
                      ->setItems($this->countries2)
                      ->setPrompt('Zvolte zemi')
                      ->setDefaultValue('')
                      ->setRequired()
                    ->addSubmit('tl');
      $_POST = array('country' => '?', 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
    }

    public function testCombinationRule25() {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => null, 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testCombinationRule26() {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => 'abc', 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testCombinationRule27() {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => '9', 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
    }

    public function testCombinationRule28() {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => '22', 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
    }

    /**
     * @covers classes\Form::__call
     * zakladni test dotupnych elementu
     */
    public function test__call1()
    {
        $this->object->addText('text')
                      ->addPassword('pass')
                      ->addTextArea('area1')
                      ->addTextarea('area2')
                      ->addHidden('hide')
                      ->addSubmit('sub')
                      ->addReset('res')
                      ->addImage('img', 'path')
                      ->addButton('but')
                      ->addUpload('file')
                      ->addSelect('sel')
                        ->setItems($this->countries)
                      ->addMultiSelect('multisel')
                        ->setItems($this->countries2)
                      ->addCheckbox('check')
                      ->addCheckList('checkolist')
                        ->setItems($this->countries)
                      ->addRadioList('radio')
                        ->setItems($this->countries)

                      ->addEmail('email')
                      ->addUrl('url')
                      ->addPhone('phone')
                      ->addNumber('num')
                      ->addRange('range')
                      ->addSearch('search')
                      ->addColor('col')
                      //~ ->addDatalist('data', array('value' => $this->countries2))
                      ->addDatalist('data')
                        ->setItems($this->countries2)
                      ->addDate('dat')
                      ->addWeek('week')
                      ->addMonth('month')
                      ->addTime('tim')
                      ->addDatetime('dat1')
                      ->addDateTime('dat2')
                      ->addDatetimeLocal('dateloc1')
                      ->addDateTimeLocal('dateloc2')
                      ->addLabel('lab')
                      //~ ->addElement()
                      ;

        $this->assertEquals('<form action="" enctype="multipart/form-data" method="post">
  <fieldset>
    <input type="text" name="text" />
    <input type="password" name="pass" />
    <textarea cols="40" rows="10" name="area1"></textarea>
    <textarea cols="40" rows="10" name="area2"></textarea>
    <input type="hidden" name="hide" />
    <input type="submit" name="sub" />
    <input type="reset" name="res" />
    <input src="path" type="image" name="img" />
    <input type="button" name="but" />
    <input type="file" name="file" />
    <select name="sel">
      <optgroup label="Europe">
        <option value="CZ">Česká Republika</option>
        <option value="SK">Slovensko</option>
        <option value="GB">Velká Británie</option>
      </optgroup>
      <optgroup label="rusko">
        <option value="a">aaaaa</option>
        <option value="b">bbbb</option>
        <option value="c">cccc</option>
        <option value="d">dddd</option>
      </optgroup>
      <option value="CA">Kanada</option>
      <option value="US">USA</option>
      <option value="?">jiná</option>
    </select>
    <select size="4" multiple="multiple" name="multisel[]">
      <option value="CA">Kanada</option>
      <option value="US">USA</option>
      <option value="?">jiná</option>
    </select>
    <input type="checkbox" name="check" />
    <div>
      <input type="checkbox" name="checkolist[]" value="Europe" />
      <span>Česká RepublikaSlovenskoVelká Británie</span>
      <input type="checkbox" name="checkolist[]" value="rusko" />
      <span>aaaaabbbbccccdddd</span>
      <input type="checkbox" name="checkolist[]" value="CA" />
      <span>Kanada</span>
      <input type="checkbox" name="checkolist[]" value="US" />
      <span>USA</span>
      <input type="checkbox" name="checkolist[]" value="?" />
      <span>jiná</span>
    </div>
    <div>
      <input type="radio" name="radio" value="Europe" />
      <span>Česká RepublikaSlovenskoVelká Británie</span>
      <input type="radio" name="radio" value="rusko" />
      <span>aaaaabbbbccccdddd</span>
      <input type="radio" name="radio" value="CA" />
      <span>Kanada</span>
      <input type="radio" name="radio" value="US" />
      <span>USA</span>
      <input type="radio" name="radio" value="?" />
      <span>jiná</span>
    </div>
    <input type="email" name="email" />
    <input type="url" name="url" />
    <input type="tel" name="phone" />
    <input type="number" name="num" />
    <input type="range" name="range" />
    <input type="search" name="search" />
    <input type="color" name="col" />
    <datalist id="data">
      <option value="CA">Kanada</option>
      <option value="US">USA</option>
      <option value="?">jiná</option>
    </datalist>
    <input type="date" name="dat" />
    <input type="week" name="week" />
    <input type="month" name="month" />
    <input type="time" name="tim" />
    <input type="datetime" name="dat1" />
    <input type="datetime" name="dat2" />
    <input type="datetime-local" name="dateloc1" />
    <input type="datetime-local" name="dateloc2" />
    <label>lab</label>
  </fieldset>
</form>', strval($this->object));
    }

    // setPrompt + setDefaults

    public function test__call2() {
      $this->object->addSelect('country', 'Země:')
                      ->setItems($this->countries2)
                      ->setPrompt('Zvolte zemi')
                    ->addSubmit('sub')
                    ->setDefaults(array('country' => ''));
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <select name="country">
      <option value="" selected="selected">Zvolte zemi</option>
      <option value="CA">Kanada</option>
      <option value="US">USA</option>
      <option value="?">jiná</option>
    </select>
    <input type="submit" name="sub" />
  </fieldset>
</form>', strval($this->object));
      $this->assertEquals('Zvolte zemi', $this->object['country']->getPrompt());
      $this->assertEquals($this->countries2, $this->object['country']->getItems());
    }

    public function test__call3() {
      $this->object->addCheckbox('agree', 'Agree with conditions')
                      ->setDefaultValue('on');
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="checkbox" name="agree" checked="checked" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call4() {
      $this->object->addCheckbox('agree', 'Agree with conditions')
                      ->setDefaultValue(true);
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="checkbox" name="agree" checked="checked" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call5() {
      $this->object->addText('name', 'Jméno')
                  ->addText('age', 'Věk')
                  ->addSubmit('sub');
      $this->object->setDefaults(array(
          'name' => 'John',
          'age' => '33'
      ));
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="name" value="John" />
    <input type="text" name="age" value="33" />
    <input type="submit" name="sub" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call6() {
      $this->object->addText('email', 'E-mail:')
                    ->setEmptyValue('@'); //predvyplneny zavinac
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="email" value="@" />
  </fieldset>
</form>', strval($this->object));
      $this->assertEquals('@', $this->object['email']->getEmptyValue());
    }

    public function test__call7() {
      $this->object->addText('email', 'E-mail')
                    ->setDefaultValue('user@example.com')
                  ->addSubmit('sub');
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="email" value="user@example.com" />
    <input type="submit" name="sub" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call8() {
      $this->object->addText('email', 'E-mail')
                    ->setDefaultValue('user@example.com')
                    ->addRule(Form::EMAIL)
                  ->addSubmit('sub');
      $_POST = array('email' => 'user@example.cz', 'sub' => '');
      $this->assertTrue($this->object->isSuccess());
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="email" value="user@example.com" />
    <input type="submit" name="sub" />
  </fieldset>
</form>', strval($this->object));
      $this->object->setReturnValues($_POST);
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="email" value="user@example.cz" />
    <input type="submit" name="sub" value="" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call9() {
      $this->object->addText('email', 'E-mail')
                    ->setDefaultValue('user@example.com')
                    ->addRule(Form::EMAIL)
                  ->addSubmit('sub');
      $_POST = array('email' => 'user@example.cz', 'sub' => '');
      $this->assertTrue($this->object->isSuccess());
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="email" value="user@example.com" />
    <input type="submit" name="sub" />
  </fieldset>
</form>', strval($this->object));
      $this->object->setReturnValues($_POST, array('email')); //ignorace elementu email
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="email" value="user@example.com" />
    <input type="submit" name="sub" value="" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call10() {
      $this->object->addRange('rozsah', array('max' => 20))
                    ->addSelect('vyberRange', array('range' => array(5, 8)))
                    ->addSelect('vyberInterval', array('range' => array(date('H') - 1, date('H') + 1)));
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input max="20" type="range" name="rozsah" />
    <select name="vyberRange">
      <option value="5">5</option>
      <option value="6">6</option>
      <option value="7">7</option>
      <option value="8">8</option>
    </select>
    <select name="vyberInterval">
      <option value="'.(date('H')-1).'">'.(date('H')-1).'</option>
      <option value="'.(date('H')*1).'">'.(date('H')*1).'</option>
      <option value="'.(date('H')+1).'">'.(date('H')+1).'</option>
    </select>
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call11() {
      $this->object->addElement('captcha', 'popisek', Html::img()->src('logo.png'));
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <img alt="" src="logo.png" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call12() {
      $this->object->addText('mytext', array('id' => 'idee', 'class' => 'claaas'));
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input id="idee" class="claaas" type="text" name="mytext" />
  </fieldset>
</form>', strval($this->object));
      $this->assertEquals('claaas', $this->object['mytext']->getAttribute('class'));
      $this->assertEquals('idee', $this->object['mytext']->getAttribute('id'));
    }

    public function test__call13() {
      $this->object->addText('mytext', 'label', 'moje value');
      $this->assertEquals('moje value', $this->object['mytext']->getValue());
    }

    public function test__call14() {
      $this->object->setLegend('hlavni field')
                    ->addText('mytext');
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <legend>hlavni field</legend>
    <input type="text" name="mytext" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call15() {
      $this->object->addBackLink('tu pro zpet', array('a' => 'b', 'c' => 2))
                    ->setLegend('hlavni field')
                    ->addText('mytext');
      $this->assertEquals('<form action="" method="post">
  <a href="?a=b&amp;c=2" title="tu pro zpet">tu pro zpet</a>
  <fieldset>
    <legend>hlavni field</legend>
    <input type="text" name="mytext" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call16() {
      $leg_cb = function($row) { return $row['html']::legend()->add($row['html']::span()->setText($row['caption'])); };
      $fie_cb = function($row) { return $row['html']::fieldset()->add($row['legend'])->add($row['html']::p()->add($row['elements'])); };
      $this->object->setLegend('hlavni field')
                      ->addText('mytext')
                    ->addGroup('medovy nadpis', array(Form::CALLBACK_LEGEND => $leg_cb, Form::CALLBACK_FIELDSET => $fie_cb))
                      ->addText('youtext')
                    ->addGroup('kervavy field')
                      ->addText('owntext');
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <legend>hlavni field</legend>
    <input type="text" name="mytext" />
  </fieldset>
  <fieldset>
    <legend>
      <span>medovy nadpis</span>
    </legend>
    <p>
      <input type="text" name="youtext" />
    </p>
  </fieldset>
  <fieldset>
    <legend>kervavy field</legend>
    <input type="text" name="owntext" />
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call17() {
      $inp_obl = function($row) { return $row['html']::span()->add($row['rows']); };
      $inp_elm = function($row) {
                          $res[] = $row['element'];
                          $res[] = $row['html']::p()->setText($row['value']);
                          return $res; };
      $this->object->addCheckList('checklist2', array(Form::CALLBACK_OBAL => $inp_obl, Form::CALLBACK_ELEMENT => $inp_elm))
                    ->setItems($this->countries2);
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <span>
      <input type="checkbox" name="checklist2[]" value="CA" />
      <p>Kanada</p>
      <input type="checkbox" name="checklist2[]" value="US" />
      <p>USA</p>
      <input type="checkbox" name="checklist2[]" value="?" />
      <p>jiná</p>
    </span>
  </fieldset>
</form>', strval($this->object));
    }

    public function test__call18() {
      $back_lnk = function($row) { return $row['html']::a()->href('', $row['href'])->title($row['text'])->class('backlink')->setText($row['text']); };
      $this->object->addBackLink('tu pro zpet', array('a' => 'b', 'c' => 2), array(Form::CALLBACK_BACKLINK => $back_lnk))
                    ->setLegend('hlavni field')
                    ->addText('mytext');
      $this->assertEquals('<form action="" method="post">
  <a href="?a=b&amp;c=2" title="tu pro zpet" class="backlink">tu pro zpet</a>
  <fieldset>
    <legend>hlavni field</legend>
    <input type="text" name="mytext" />
  </fieldset>
</form>', strval($this->object));
    }

    /**
     * @covers classes\Form::setItems
     */
    public function testSetItems()
    {
        $this->object->addSelect('vyber');
        $this->assertEquals(array(), $this->object['vyber']->getItems());
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <select name="vyber"></select>
  </fieldset>
</form>', $this->object);

    }

    public function testSetItems2() {
        $this->object->addSelect('vyber')->setItems($this->countries2);
        $this->assertEquals($this->countries2, $this->object['vyber']->getItems());
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <select name="vyber">
      <option value="CA">Kanada</option>
      <option value="US">USA</option>
      <option value="?">jiná</option>
    </select>
  </fieldset>
</form>', $this->object);
    }

    /**
     * @covers classes\Form::getAttribute
     */
    public function testGetAttribute()
    {
        $this->object->addText('text', array('class' => 'foo'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input class="foo" type="text" name="text" />
  </fieldset>
</form>', $this->object);
    }

    public function testGetAttribute1() {
        $this->object->addText('text', 'popisek', 'hodnota', array('class' => 'foo'));
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input value="hodnota" class="foo" type="text" name="text" />
  </fieldset>
</form>', $this->object);
    }

    /**
     * @covers classes\Form::setAttribute
     */
    public function testSetAttribute()
    {
        $this->object->addText('text')->setAttribute('class', 'bar');
        $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="text" class="bar" />
  </fieldset>
</form>', $this->object);
    }

    public function testSetAttribute1() {
      $this->object->addText('text');
      $this->object['text']->setAttribute('class', 'bar');
      $this->assertEquals('<form action="" method="post">
  <fieldset>
    <input type="text" name="text" class="bar" />
  </fieldset>
</form>', $this->object);
    }

    /**
     * @covers classes\Form::getValues
     */
    public function testGetValues()
    {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => '22', 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
      $this->assertEquals($_POST, $this->object->getValues());
    }

    /**
     * @covers classes\Form::getValues
     */
    public function testGetValues2()
    {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => '22', 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
      $val = $this->object->getValues();
      $this->assertEquals($_POST, $val);
      $this->assertEquals('22', $val['age']);
      $this->assertEquals('', $val['tl']);
    }

    /**
     * @covers classes\Form::getErrors
     */
    public function testGetErrors()
    {
      $this->object->addSelect('country', 'Země:')
                      ->setItems($this->countries2)
                      ->setPrompt('Zvolte zemi')
                      ->setDefaultValue('')
                      ->setRequired()
                    ->addSubmit('tl');
      $_POST = array('country' => '', 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
      $e = $this->object->getErrors();
      $this->assertEquals("Please complete mandatory field.", $e[0]);
    }

    /**
     * @covers classes\Form::hasErrors
     */
    public function testHasErrors()
    {
      $this->object->addSelect('country', 'Země:')
                      ->setItems($this->countries2)
                      ->setPrompt('Zvolte zemi')
                      ->setDefaultValue('')
                      ->setRequired()
                    ->addSubmit('tl');
      $_POST = array('country' => '', 'tl' => '');
      $this->assertFalse($this->object->isSuccess());
      $this->assertTrue($this->object->hasErrors());
    }

    /**
     * @covers classes\Form::isSuccess
     */
    public function testIsSuccess()
    {
      $this->object->addText('age', 'Your age')
                      ->addRule(Form::FILLED, 'Enter your age')
                      ->addRule(Form::INTEGER, 'Age must be numeric value')
                      ->addRule(Form::RANGE, 'Age must be in range from %d to %d', array(10, 100))
                    ->addSubmit('tl');
      $_POST = array('age' => '22', 'tl' => '');
      $this->assertTrue($this->object->isSuccess());
    }

    /**
     * @covers classes\Form::offsetExists
     */
    public function testOffsetExists()
    {
      $this->object->addText('age', 'Your age')
                    ->addSubmit('tl');
      $this->assertTrue(isset($this->object['age']));
      $this->assertFalse(isset($this->object['ageX']));
    }

    /**
     * @covers classes\Form::offsetGet
     */
    public function testOffsetGet()
    {
      $this->object->addText('age', 'Your age')
                    ->addSubmit('tl');
      $this->assertEquals('age', $this->object['age']->getHtmlName());
    }

    //~ /**
     //~ * @covers classes\Form::offsetSet
     //~ */
    //~ public function testOffsetSet()
    //~ {
      //~ $this->object->addText('age', 'Your age')
                    //~ ->addSubmit('tl');
    //~ }

    //~ /**
     //~ * @covers classes\Form::offsetUnset
     //~ */
    //~ public function testOffsetUnset()
    //~ {
      //~ $this->object->addText('age', 'Your age')
                    //~ ->addSubmit('tl');
      //~ $this->assertEquals('<form action="" method="post">
  //~ <fieldset>
    //~ <input type="text" name="age" />
    //~ <input type="submit" name="tl" />
  //~ </fieldset>
//~ </form>', $this->object);
      //~ unset($this->object['age']);
      //~ echo $this->object->render();
    //~ }
}
