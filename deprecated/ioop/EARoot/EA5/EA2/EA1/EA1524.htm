<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
<!--title>Text</title-->
<link href="../../../../css/ea.css" rel="stylesheet" type="text/css" />
<script>
function initPage(src) {
	if(parent==this&&(this.location+"").indexOf('EARoot')!=-1)
		document.location=(this.location+"").substring(0,(this.location+"").indexOf('EARoot'))+"index"+(this.location+"").substring((this.location+"").lastIndexOf('.'))+"?goto="+((this.location+"").substring((this.location+"").indexOf('EARoot')+7,(this.location+"").lastIndexOf('.')).replace(/\//g,':').replace(/EA/g,""));
	else
		parent.initPage(src);
}
</script>
</head>
<body onload="initPage(this);" class="Content">
<div class="pageHeader"></div>
<div class="PageBody">
	<span class="ObjectTitle">Text  : </span>
	
	<div class="ObjectDetailsNotes">&lt;ul&gt;&lt;li&gt;Funkcionální programování pat&#345;í mezi deklarativní programovací principy. Alonzo Church vytvo&#345;il formální výpo&#269;tový model nazvaný lambda-kalkul. &lt;/li&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Výpo&#269;tem funkcionálního programu je posloupnost vzájemn&#283; ekvivalentních výraz&#367;, které se postupn&#283; zjednodu&#353;ují. Výsledkem výpo&#269;tu je výraz v normální form&#283;, tedy dále nezjednodu&#353;itelný. &lt;/li&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;Program je chápán jako jedna funkce obsahující vstupní parametry mající jediný výstup. Tato funkce pak m&#367;&#382;e být dále rozlo&#382;itelná na podfunkce.&lt;/li&gt;&lt;br /&gt;&lt;/p&gt;&lt;p&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/p&gt;</div>

<div class="pageFooter"></div>
 
</body>
</html>