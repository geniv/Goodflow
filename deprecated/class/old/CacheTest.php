<?php
namespace classes;

//classes\Cache,

/**
 * phpunit-skelgen --test -- "classes\Cache" cache.php
 * mv -v CacheTest.php ../test/
 * phpunit --bootstrap ../classes/cache.php CacheTest
 */

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-12 at 11:46:59.
 */
class CacheTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Cache
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $_SERVER = array('SCRIPT_FILENAME' => '/var/www/www/svn/goodflow_cook/index.php',
                        'SCRIPT_NAME' => '/www/svn/goodflow_cook/index.php',
                        'REQUEST_URI' => '/www/svn/goodflow_cook/ggg',
                        //~ 'SERVER_ADDR' => '127.0.0.1'
                        );

        $this->object = new Cache;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Cache::getInstance
     */
    public function testGetInstance()
    {
        $this->assertInstanceOf('classes\Cache', $this->object);
        $this->assertTrue($this->object->getOutputBuffering());
        $this->assertEquals('', $this->object->getPrefix());
    }

    /**
     * @covers Cache::getCacheExpire
     */
    public function testGetCacheExpire()
    {
        $this->assertEquals('1 day', $this->object->getCacheExpire());
    }

    /**
     * @covers Cache::setCacheExpire
     * @covers Cache::getCacheExpire
     */
    public function testSetCacheExpire()
    {
        $this->object->setCacheExpire('1 month');
        $this->assertEquals('1 month', $this->object->getCacheExpire());
    }

    /**
     * @covers Cache::getCacheDir
     */
    public function testGetCacheDir()
    {
        $this->assertEquals('.cache', $this->object->getCacheDir());
    }

    /**
     * @covers Cache::setCacheDir
     * @covers Cache::getCacheDir
     */
    public function testSetCacheDir()
    {
        $this->object->setCacheDir('.cacheDir');
        $this->assertEquals('.cacheDir', $this->object->getCacheDir());

        $this->object->setCacheDir('.cache');

        $this->assertEquals('/var/www/www/svn/goodflow_cook/.cache', $this->object->getCachePathDir());
        //~ $this->assertEquals('/var/www/www/svn/goodflow_cook/.cache/.www.svn.goodflow_cook.ggg30341c0adbd64d315ebe3e39b9aa50ce', $this->object->getCachePathName());
    }

    /**
     * @covers Cache::getCache
     */
    public function testGetCache()
    {
        $this->assertFalse($this->object->isCache());
    }

    /**
     * @covers Cache::setCache
     */
    public function testSetCache()
    {
        $this->object->setCache(true);
        $this->assertTrue($this->object->isCache());
    }

    /**
     * @covers Cache::isCached
     */
    public function testIsCached()
    {
        $this->assertFalse($this->object->isCached());
        //~ $this->object->setCache(true);
        //~ $this->assertTrue($this->object->isCached());
        //~ $this->object->setCache(false);
        //~ $this->assertFalse($this->object->isCached());
    }

    //test cache s ob
    public function testCacheWithOb() {
        $cach = new Cache;
        $cach->setCache(true)->setCacheExpire('5 minute');
        //$cach->clearCache();  //vymazani predesle verze

        if ($cach->isCached()) {
          $this->assertEquals('ahoj test2', $cach->getOutBuff());
        } else {
          $cach->initOutBuff();
          echo 'ahoj test2';
          $cach->setOutBuff();
        }
        //~ echo $cach->getCacheInfo();
    }

    //test cache s ob
    public function testCacheWithObException() {
        $cach = new Cache;
        $cach->setCache(true)->setCacheExpire('5 minute')->setExceptionUri(array('ggg'));
        //$cach->clearCache();  //vymazani predesle verze

        if ($cach->isCached()) {
          echo $cach->getOutBuff();
        } else {
          $cach->initOutBuff();
          //echo 'ahoj test2';
          $cach->setOutBuff();
        }
        $this->assertNull($cach->getOutBuff());
        //$this->assertEquals('ahoj test2', $cach->getOutBuff());
        //echo $cach->getCacheInfo();
        $cach->clearExceptionUri(); //vymazani exception kvuli singletonu
    }

    //test cache bez ob
    public function testCacheWithoutOb() {
        $cach = new Cache;
        $cach->setOutputBuffering(false)
            ->setCache(true)
            ->setCacheExpire('5 minute');
        //$cach->clearCache();  //vymazani predesle verze

        $this->assertFalse($cach->getOutputBuffering());
        $this->assertTrue($cach->isCached());
        $this->assertTrue($cach->isCache());

        if ($cach->isCached()) {
          $t = $cach->getCacheContent();
        } else {
          $t = 'ahoj test3';
          $cach->setCacheContent($t);
        }
        //echo $t;
        //$this->assertEquals('ahoj test3', $t);
        //~ echo $cach->getCacheInfo();
        $cach->getElapseTime();
        $cach->getRemainTime();
    }
}
