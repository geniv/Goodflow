<?php
namespace classes;

require '../classes/dateandtime.php';

/**
 * phpunit-skelgen --test -- "classes\Response" response.php
 * mv -v ResponseTest.php ../test/
 * phpunit --bootstrap ../classes/response.php ResponseTest
 **/

/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-09-25 at 16:08:17.
 */
class ResponseTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Response
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new Response;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Response::setCode
     */
    public function testSetCode()
    {
        $r = new Response();
        $r->setCode(404);
        $this->assertEquals(404, $r->getCode());
    }

    /**
     * @expectedException classes\ExceptionResponse
     */
    public function testResponseException1() {
      $r = new Response();
      $r->setCode(808);
    }

    /**
     * @covers Response::getCode
     */
    public function testGetCode()
    {
        $r = new Response();
        $this->assertEquals(200, $r->getCode());
    }

    /**
     * @covers Response::setHeader
     */
    public function testSetHeader()
    {
        $r = new Response();
        $r->setHeader('Authorization','Basic YWRtaW46YWRtaW4xMg==');
        $this->assertContains('Authorization: Basic YWRtaW46YWRtaW4xMg==', xdebug_get_headers());
    }

    /**
     * @covers Response::addHeader
     */
    public function testAddHeader()
    {
        $r = new Response();
        $r->addHeader('Authorization','Basic YWRtaW46YWRtaW4xMg==');
        $r->addHeader('Location','http://www.example.com/');
        $headers = xdebug_get_headers();
        $this->assertContains('Authorization: Basic YWRtaW46YWRtaW4xMg==', $headers);
        $this->assertContains('Location: http://www.example.com/', $headers);
    }

    /**
     * @covers Response::setContentType
     */
    public function testSetContentType()
    {
        $r = new Response();
        $r->setContentType('text/html');
        $this->assertContains('Content-Type: text/html; charset=UTF-8', xdebug_get_headers());
    }

    /**
     * @covers Response::redirect
     */
    public function testRedirect()
    {
        $r = new Response();
        $r->redirect('example.com', null, false);
        $this->assertContains('Location: example.com', xdebug_get_headers());
    }

    /**
     * @covers Response::setExpiration
     */
    public function testSetExpiration()
    {
        //0
        $r = new Response();
        $r->setExpiration(0);
        $headers = xdebug_get_headers();

        $out = array('Cache-Control: s-maxage=0, max-age=0, must-revalidate',
                    'Expires: Mon, 23 Jan 1978 10:00:00 GTM',
                    'Cache-Control: max-age=0',
                    'Expires: '.Response::date(0)
                    );
        $this->assertEquals($out, $headers);

        //null
        $r = new Response();
        $r->setExpiration(null);
        $headers = xdebug_get_headers();
        $this->assertEquals($out, $headers);

        //+1 day
        $r = new Response();
        $r->setExpiration('+1 day');
        $headers = xdebug_get_headers();
        $this->assertContains('Cache-Control: max-age=', $headers[0]);
        $this->assertContains('Expires: '.Response::date('+ 1 day'), $headers);
    }

    /**
     * @covers Response::isSent
     */
    public function testIsSent()
    {
        $r = new Response();
        $r->setExpiration(null);  //jak vyvolat true?!
        $this->assertFalse($r->isSent());
    }

    /**
     * @covers Response::getHeader
     */
    public function testGetHeader()
    {
        $r = new Response();
        $r->setContentType('text/html');

        //var_dump($r->getHeader('Content-Type'));  //neotestovatelne :|
    }

    /**
     * @covers Response::getHeaders
     */
    public function testGetHeaders()
    {
        $r = new Response();
        $r->setContentType('text/html');

        $r->getHeaders(); //neotestoatelne :|
    }

    /**
     * @covers Response::date
     */
    public function testDate()
    {
        $this->assertEquals(date('D, d M Y H:i:s \G\M\T'), Response::date('GMT'));
    }

    /**
     * @covers Response::setCookie
     * @covers Response::deleteCookie
     */
    public function testSetCookie()
    {
        $r = new Response();
        $r->setCookie('klic', 'hodnota', 3600);
        //var_dump($_COOKIE); //neotestovatelne :|
    }
}
