/*
  private function VykresliBlokMenu($id)
  {
    //zada se pocatecni bod, zbytek se bude dogenerovavat podleadresy
    //var_dump($id);
    $menu = explode("-", $_GET[$this->var->get_kam_menu]);

    if (!Empty($menu[0]))
    {
      for ($i = 0; $i < count($menu); $i++)
      {
        $submenu = $this->NavratSubmenu($menu[$i]);
        $sub = explode("-",  $submenu);
//print_r($submenu);
          for ($j = 0; $j < count($sub); $j++)
          {
            if (!Empty($sub[0]))
            {
              $rozklad = "";
              $roz = explode("-", $_GET[$this->var->get_kam_menu]);

              for ($k = 0; $k <= $i; $k++)
              {
                $rozklad .= "{$roz[$k]}-";
              }

              $nazev = $this->NavratJmena($sub[$j]);
              $odsazeni = str_repeat("---", $i + 1);
//print_r($sub);

$vsu = $this->NavratSubmenu($sub[$j]);
echo "{$vsu}<br>";
              if (false)
              {
                $result .= "--vsuvka?<br />";

              }
Zpracovat tuto funkci na rekurzivni volani!!!!!!!! jinak neni plnhodnotna!!

//echo " <{$sub[$j]}><br>";//=={$roz[$i]}

              $oznpodm = in_array($sub[$j], $roz);

//{$_GET[$this->var->get_kam_menu]}-{$sub[$j]}
//odkaz; z:{$i} [{$sub[$j]}] ({$submenu})
              $result .=
              "{$odsazeni} ($vsu) <a href=\"?{$this->var->get_kam_menu}={$rozklad}{$sub[$j]}\">".($oznpodm ? "[ " : "")."{$nazev}".($oznpodm ? " ]" : "")."</a><br />
              ";

            }


              else
            {
              $result .= "konecny ne odkaz.<br />";
            }


          }

        //}

      }
    }



        //$sub = explode("-", $this->NavratSubmenu($menu[$i]));
//var_dump($menu[$i]);
        //if ($id == $sub[$i])

//print_r($sub);
//$result .= $this->VykresliBlokMenu($sub[$i]);
/*
        if (!Empty($sub[0]))
        {
          for ($i = 0; $i < count($sub); $i++)
          {
            $subwhere .= "id={$sub[$i]} OR "; //vygenerovani dotazu
          }
          $subwhere = substr($subwhere, 0, -4);

          if ($res = @$this->sqlite->query("SELECT id, nazev, zanoreni FROM menu WHERE {$subwhere};", NULL, $error))
          {
            if ($res->numRows() != 0)
            {
              while ($data = $res->fetchObject())
              {
                $odsazeni = str_repeat("---", $data->zanoreni);

                $result .=
                "{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$_GET[$this->var->get_kam_menu]}-{$data->id}\" title=\"{$data->nazev}\">".($oznpodm ? "[ " : "")."{$data->nazev}".($oznpodm ? " ]" : "")."</a> - {$data->zanoreni}<br />
                ";
              }
            }
          }
            else
          {
            $this->var->main[0]->ErrorMsg($error);
          }
        }
*/


/*
    $sub = explode("-", $this->NavratSubmenu($id));  //rozdeleni submenu

    if (!Empty($sub[0]))
    {
      for ($i = 0; $i < count($sub); $i++)
      {
        $subwhere .= "id={$sub[$i]} OR "; //vygenerovani dotazu
      }
      $subwhere = substr($subwhere, 0, -4);
    }
*/





/*
    if ($res = @$this->sqlite->query("SELECT submenu FROM menu WHERE id={$id};", NULL, $error))
    {
      if ($res->numRows() == 1)
      {
        $submenu = $res->fetchObject()->submenu;
//echo $submenu;
        $sub = explode("-", $submenu);  //rozdeleni submenu

        if (!Empty($sub[0]))
        {
          for ($i = 0; $i < count($sub); $i++)
          {
            $subwhere .= "id={$sub[$i]} OR "; //vygenerovani dotazu
          }
          $subwhere = substr($subwhere, 0, -4);

          if ($res = @$this->sqlite->query("SELECT id, nazev, zanoreni FROM menu WHERE {$subwhere};", NULL, $error))
          {
            if ($res->numRows() != 0)
            {
              while ($data = $res->fetchObject())
              {
                //$submenu = $this->VykresliBlokMenu($data->submenu); //rekurzivni volani

                $odsazeni = str_repeat("---", $data->zanoreni);

                $subadresa = explode("-", $_GET[$this->var->get_kam_menu]);
                print_r($subadresa);
//var_dump($_GET[$this->var->get_kam_menu]);
                $oznpodm = ($subadresa[count($subadresa) - 1] == $data->id);
//var_dump($subadresa[count($subadresa) - 1]);
                $result .=
                "{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$predchozid}-{$data->id}\" title=\"{$data->nazev}\">".($oznpodm ? "[ " : "")."{$data->nazev}".($oznpodm ? " ]" : "")."</a> - {$data->zanoreni}<br />
                ".($oznpodm ? $this->VykresliBlokMenu("{$predchozid}-{$data->id}", $subadresa[count($subadresa) - 1]) : "")." ";//
//".($sub[$data->zanoreni] == $data->id ? $this->VykresliBlokMenu($sub[$data->zanoreni]) : "")."
              }
            }
          }
            else
          {
            $this->var->main[0]->ErrorMsg($error);
          }


        }


      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    if ($res = @$this->sqlite->query("SELECT submenu FROM menu WHERE id={$id};", NULL, $error))
    {
      if ($res->numRows() == 1)
      {
        $submenu = $res->fetchObject()->submenu;

        $sub = explode("-", $submenu);  //rozdeleni submenu

        if (!Empty($sub[0]))
        {
          for ($i = 0; $i < count($sub); $i++)
          {
            $subwhere .= "id={$sub[$i]} OR "; //vygenerovani dotazu
          }
          $subwhere = substr($subwhere, 0, -4);

          //var_dump($sub);
          //print_r($sub);

          if ($res = @$this->sqlite->query("SELECT id, nazev, zanoreni FROM menu WHERE {$subwhere};", NULL, $error))
          {
            if ($res->numRows() != 0)
            {
              while ($data = $res->fetchObject())
              {
                //$submenu = $this->VykresliBlokMenu($data->submenu); //rekurzivni volani

                $odsazeni = str_repeat("---", $data->zanoreni);

                $subadresa = explode("-", $_GET[$this->var->get_kam_menu]);
                //print_r($subadresa);
//var_dump($_GET[$this->var->get_kam_menu]);
                $oznpodm = ($subadresa[count($subadresa) - 1] == $data->id);
//var_dump($subadresa[count($subadresa) - 1]);
                $result .=
                "{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$_GET[$this->var->get_kam_menu]}-{$data->id}\" title=\"{$data->nazev}\">".($oznpodm ? "[ " : "")."{$data->nazev}".($oznpodm ? " ]" : "")."</a> - {$data->zanoreni}<br />
                ".($oznpodm ? $this->VykresliBlokMenu($subadresa[count($subadresa) - 1]) : "")." ";
//".($sub[$data->zanoreni] == $data->id ? $this->VykresliBlokMenu($sub[$data->zanoreni]) : "")."
              }
            }
          }
            else
          {
            $this->var->main[0]->ErrorMsg($error);
          }


        }


      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }


    //var_dump($id);
    //var_dump($this->VykresliBlokMenu($id));

      if ($res = @$this->sqlite->query("SELECT id, nazev, submenu, zanoreni FROM menu WHERE id={$id};", NULL, $error))
      {
        if ($res->numRows() != 0)
        {
          while ($data = $res->fetchObject())
          {
            $sub = explode("-", $data->submenu);  //rozdeleni submenu

            if (!Empty($sub[0]))
            {
              for ($i = 0; $i < count($sub); $i++)
              {
                $subwhere .= "id={$sub[$i]} OR "; //vygenerovani dotazu
              }
              $subwhere = substr($subwhere, 0, -4);

              if ($res = @$this->sqlite->query("SELECT id, nazev, submenu, zanoreni FROM menu WHERE {$subwhere};", NULL, $error))
              {
                if ($res->numRows() != 0)
                {
                  while ($data = $res->fetchObject())
                  {
                    //$submenu = $this->VykresliBlokMenu($data->submenu); //rekurzivni volani

                    $odsazeni = str_repeat("--", $data->zanoreni);

                    $result .=
                    "{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$id}-{$data->id}\" title=\"{$data->nazev}\">{$data->nazev}</a> - {$data->zanoreni}<br />
                    ".($sub[$data->zanoreni] == $data->id ? $this->VykresliBlokMenu($sub[$data->zanoreni]) : "")." ";
                    / *
                    <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=add&amp;id={$data->id}&amp;zanoreni=".($data->zanoreni + 1)."\" title=\"\">přidat podsekci</a>
                    <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=edit&amp;id={$data->id}\" title=\"\">upravit sekci</a>
                    <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=del&amp;id={$data->id}\" title=\"\">smazat sekci</a> <br />
                    * /
                  }
                }
              }
                else
              {
                $this->var->main[0]->ErrorMsg($error);
              }
            }


            //$result .=
            //"{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$data->id}\" title=\"{$data->nazev}\">{$data->nazev}</a> - {$data->zanoreni}<br />
            //{$submenu}";

            //

            //$result .=
            //"{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$data->id}\" title=\"{$data->nazev}\">{$data->nazev}</a> - {$data->zanoreni}<br />
            //{$submenu}";
            /*
            <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=add&amp;id={$data->id}&amp;zanoreni=".($data->zanoreni + 1)."\" title=\"\">přidat podsekci</a>
            <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=edit&amp;id={$data->id}\" title=\"\">upravit sekci</a>
            <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=del&amp;id={$data->id}\" title=\"\">smazat sekci</a> <br />

          }
        }
      }
        else
      {
        $this->var->main[0]->ErrorMsg($error);
      }



    $sub = explode("-", $submenu);

    if (!Empty($sub[0]))  //konrola prvniho indexu, rozhodnuti dalsiho volani
    {
      for ($i = 0; $i < count($sub); $i++)
      {
        $subwhere .= "id={$sub[$i]} OR "; //vygenerovani dotazu
      }
      $subwhere = substr($subwhere, 0, -4);

      if ($res = @$this->sqlite->query("SELECT id, nazev, submenu, zanoreni FROM menu WHERE {$subwhere};", NULL, $error))
      {
        if ($res->numRows() != 0)
        {
          while ($data = $res->fetchObject())
          {
            $submenu = $this->VykresliBlokMenu($data->submenu); //rekurzivni volani

            $odsazeni = str_repeat("--", $data->zanoreni);

            $result .=
            "{$odsazeni} ({$data->id}) <a href=\"?{$this->var->get_kam_menu}={$data->id}\" title=\"{$data->nazev}\">{$data->nazev}</a> - {$data->zanoreni}<br />
            {$submenu}";
            / *
            <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=add&amp;id={$data->id}&amp;zanoreni=".($data->zanoreni + 1)."\" title=\"\">přidat podsekci</a>
            <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=edit&amp;id={$data->id}\" title=\"\">upravit sekci</a>
            <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=del&amp;id={$data->id}\" title=\"\">smazat sekci</a> <br />
            * /
          }
        }
      }
        else
      {
        $this->var->main[0]->ErrorMsg($error);
      }
    }


    return $result;
  } */
/*
    <form>
      <fieldset>
        <input type=\"text\" name=\"nazev\">
        <input type=\"submit\" value=\"Přidat hlavní sekci\">
      </fieldset>
    </form>
*/
//$this->VykresliBlokMenu($subadresa[0])
/*
          <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=add&amp;id={$data->id}&amp;zanoreni=".($data->zanoreni + 1)."\" title=\"\">přidat podsekci</a>
          <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=edit&amp;id={$data->id}\" title=\"\">upravit sekci</a>
          <a href=\"?{$this->var->get_kam_menu}={$this->var->adresaadminu}&amp;co=del&amp;id={$data->id}\" title=\"\">smazat sekci</a> <br />
          */
  //dal rekurzvn sestup!

/*
              $result .=
              "
              <script type=\"text/javascript\">
                document.getElementById('tlacitko_odeslat').click();
              </script>
              <form method=\"post\" onsubmit=\"return confirm('Opravdu smazat: \'{$data->nazev}\' ?');\">
                <fieldset>
                  <input type=\"submit\" name=\"tlacitko\" id=\"tlacitko_odeslat\" value=\"Smazat\" />
                </fieldset>
              </form>j
              ";
*/
//$result = "smazáno: '{$data->nazev}' (zatím jako)";
/*
    $handle = opendir("modules/dynamicky_obsah/dynamicky_obsah.php");// /dynamicky_obsah/dynamicky_obsah.php
    while($soub = readdir($handle))
    {
      echo "{$soub}<br/>";
    }
    closedir($handle);
*/

/*
 * SELECT id, submenu FROM menu WHERE id IN(20, 25, 32) ORDER BY LOWER(nazev) ASC
 * WHERE submenu LIKE ( "%-24-%" ) OR submenu LIKE ( "24-%" ) OR submenu LIKE ( "%-24" ) //<--
 */
 /*
 <?php

/**
 *
 * Blok dynamicky generovaneho obsahu eshopu
 *
 * public funkce:\n
 * construct: DynamicObsahEshop - hlavni konstruktor tridy\n
 * DynamickyObsahEshop() - hlavni vypis eshop obsahu\n
 * PridejStranku() - funkce pridavana do externich modulu na propojeni stranek\n
 *
 */

class DynamicObsahEshopPicture
{
  private $var;
  private $sqlite;
  private $dbname = ".dbdynobsaheshop.sqlite2";

/**
 *
 * Konstruktor obsahu
 *
 * @param var pruchodova struktura
 * @param index prideleny index pri generovani
 */
  public function __construct() //konstruktor
  {
    if (!$this->sqlite = @new SQLiteDatabase($this->dbname, 0777, $error))
    {
      echo $error;
    }

    $id = $_GET["id"];
    settype($id, "integer");

    $typ = $_GET["typ"];

    $result = "";
    if ($id != 0 &&
        !Empty($typ))
    {
      $result = $this->PrevedBlobNaObrazek($id, $typ);
    }

    echo $result;
  }

  private function PrevedBlobNaObrazek($id, $typ)
  {
    switch ($typ)
    {
      case "mini":
        $slopec = ", nahled as obr";
      break;

      case "full":
        $slopec = ", obrazek as obr";
      break;
    }

    if ($res = @$this->sqlite->query("SELECT typ{$slopec} FROM obsah_eshop WHERE id='{$id}';", NULL, $error))
    {
      if ($res->numRows() == 1)
      {
        $data = $res->fetchObject();

        $typ = $data->typ;
        $result = stripslashes(base64_decode($data->obr));
      }
    }

    header("Content-Type: {$typ}"); //hlavička

    return $result;
  }
}

  $foto = new DynamicObsahEshopPicture();
?>

 */

AND
                                          MONTH(NOW())=MONTH(datum) AND
                                          YEAR(NOW())=YEAR(datum)


      ///
      $text = "PHP iiis 224-337-4687 the website scripting language of choice!";
      $regular = "/\d{3}\-\d{3}-\d{4}/";
      preg_match($regular, $text, $ret, PREG_OFFSET_CAPTURE);  //, PREG_OFFSET_CAPTURE, PREG_PATTERN_ORDER, PREG_SET_ORDER
      var_dump($ret);
      ///

/**
 *
 * Druhy vypis menu pro propojovani menu s obsahem, vola se externi funkce: PridejStranku() z modulu nacteneho  v __construct
 *
 * @return vypis menu stejny jako to vidi uzivatel
 *
  private function AdminVypisKlikMenu()
  {
    $ext_dyn_obsah = $this->var->main[0]->PripojModul("DynamicObsahEshop");
    $this->var->main[0]->NactiFunkci(2, "SmazStranku", $this->UpravaStoupani($id));

    $result = "";
    if ($res = @$this->sqlite->query("SELECT id, nazev, submenu, zanoreni FROM menu WHERE zanoreni=0 ORDER BY LOWER(nazev) ASC;", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        while ($data = $res->fetchObject())
        {
          $subadresa = explode("-", $_GET["adr"]);

          $oznpodm = ($subadresa[0] == $data->id);

          $exter_add = $ext_dyn_obsah->PridejSmazStranku("{$data->id}");  //pripojeni externiho modulu

          $result .=
          "<a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;{$this->var->get_submenu}={$this->sub_menu_klik}&amp;adr={$data->id}\" title=\"{$data->nazev}\">".($oznpodm ? "[ " : "")."{$data->nazev}".($oznpodm ? " ]" : "")."</a> {$exter_add} - ({$data->id}, {$data->zanoreni})<br />

          ".($oznpodm ? $this->RekurzivniKlikMenu($subadresa[0]) : "")."
          ";
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }*/

/**
 *
 * Rekurzivni vypis pro propojovani menu s obsahem, vola se externi funkce: PridejStranku() z modulu nacteneho  v __construct
 *
 * @param id cislo posledniho zanoreni
 * @return vypisuje slouzenou cast submenu jak ho vidi uzivatel
 *
  private function RekurzivniKlikMenu($id)
  {
    $ext_dyn_obsah = $this->var->main[0]->PripojModul("DynamicObsahEshop");
    $this->var->main[0]->NactiFunkci(2, "SmazStranku", $this->UpravaStoupani($id));

    $sub = explode("-", $this->NavratSubmenu($id)); //rozdeleni podmenu
    $subadr = explode("-", $_GET["adr"]);  //rozdeleni adresy

    if (!Empty($sub[0]))  //je-li prni prvek v pomenu neprazdny
    {
      $subwhere = "";
      for ($i = 0; $i < count($sub); $i++)  //vygenerovani dotazu pro vyps menu
      {
        $subwhere .= "{$sub[$i]}, ";
      }
      $subwhere = substr($subwhere, 0, -2);

      $result = "";
      if ($res = @$this->sqlite->query("SELECT id, nazev, zanoreni FROM menu WHERE id IN ({$subwhere}) ORDER BY LOWER(nazev) ASC;", NULL, $error))
      {
        if ($res->numRows() != 0)
        {
          while ($data = $res->fetchObject())
          {
            $odsazeni = str_repeat("---", $data->zanoreni); //poctani zanoreni

            $oznpodm = ($data->id == $subadr[$data->zanoreni]); //rekurzivni podminka

            $rozklad = "";
            for ($i = 0; $i < $data->zanoreni; $i++)  //rozklad adresy
            {
              $rozklad .= "{$subadr[$i]}-";
            }

            $exter_add = $ext_dyn_obsah->PridejSmazStranku("{$rozklad}{$data->id}");  //pripojeni externiho modulu

            $result .=
            "{$odsazeni} <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;{$this->var->get_submenu}={$this->sub_menu_klik}&amp;adr={$rozklad}{$data->id}\" title=\"{$data->nazev}\">".($oznpodm ? "[ " : "")."{$data->nazev}".($oznpodm ? " ]" : "")."</a> {$exter_add} - ({$data->id}, {$data->zanoreni})<br />
            ".($oznpodm ? $this->RekurzivniKlikMenu($subadr[$data->zanoreni]) : "")."
            ";
          }
        }
      }
        else
      {
        $this->var->main[0]->ErrorMsg($error);
      }
    }

    return $result;
  }
*/
    //$this->AdminVypisKlikMenu()
/*    //najde id na smazani v DB (4 zpusoby: -X-, -X, X-, X)
    if ($res = @$this->sqlite->query("SELECT id FROM menu WHERE submenu LIKE ('%-{$delid}-%') OR submenu LIKE ('{$delid}-%') OR submenu LIKE ('%-{$delid}') OR submenu='{$delid}';", NULL, $error))
    {
      if ($res->numRows() == 1)
      {
        $endid = $res->fetchObject()->id;
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }
*/
//$result = $this->var->main[$index]->$funkce($parametr);//hlavni nacitaci funkce
//$pole = array(1, 2);
//$class = "Funkce";

//var_dump(call_user_func_array(array($class, "pokus"), $pole));
//call_user_func(array("Funkce", "pokus"));


/**
 *
 * Porovna graficky dva soubory
 *
 * @return graficke porovnani

  private function PorovnatSobory()
  {
    $soubor = $_GET["file"];

    if (!Empty($soubor) &&
        file_exists($soubor) &&
        $soubor != "index.php" &&
        $soubor != ".htaccess" &&
        $soubor != "config_promenne.php")
    {
      $u = fopen($soubor, "r");
      $file1 = stripslashes(htmlspecialchars(fread($u, filesize($soubor)), ENT_QUOTES));  //lokalni soubor
      fclose($u);

      $file2 = $this->NactiUrl("{$this->var->depozitar}?{$this->get_showsource}={$soubor}");  //soubor na webu

      $result =
      "<pre>{$file1}</pre>
*******************************************************************************
      <pre>{$file2}</pre>
      ";
    }

    return $result;
  } */
//private $iddiff = "diff";
        case "{$this->idmodul}{$this->iddiff}": //porovnavani verzi
          $result = $this->PorovnatSobory();
        break;
//<a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}{$this->iddiff}&amp;file={$cesta}\" title=\"zaloha DB\">porovnat soubory</a>
/*
      if (!Empty($showsource))
      {
        $u = fopen($showsource, "r");
        $result = stripslashes(htmlspecialchars(fread($u, filesize($showsource)), ENT_QUOTES));
        fclose($u);
      }
*/
// ||
        //!Empty($showsource))
        //$showsource = $_GET[$this->get_showsource];
        //private $get_showsource = "soucefile";
/*
          $result =
          "
          <form method=\"post\">
            <fieldset>
              formulář: {$this->VyberSekce($form)}<br />

              posl. id: {$l_id}

              popisek: <input type=\"text\" name=\"popisek\" /><br />
              <input type=\"submit\" name=\"tlacitko_form\" value=\"Přidat formulář\" />
            </fieldset>
          </form>

          <form method=\"post\">
            <fieldset>
              {$this->VyberTypu()}<br />
              nazev: <input type=\"text\" name=\"nazev_elem\" /><br />
              <input type=\"submit\" name=\"tlacitko_elem\" value=\"Přidat prvek\" />
            </fieldset>
          </form>
          ";
*/

/*
        for ($j = 0; $j < count($oznacovani); $j++)  //nahradi switch
        {
          if ($oznacovani[$j] == $this->var->admin_ozn_menu)
          {
            var_dump($oznacovani[$j]);
            break;
          }
        }
*/
        //$ozn[$i] = ($podm[$i] ? "" : "");
/*
    $result =
    "
    <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}\" title=\"uvod adminu\">uvod adminu</a><br />
    <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}\" title=\"kontrola aktualizaci\">kontrola aktualizaci</a><br />
    <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}{$this->idzaloha}\" title=\"zaloha DB\" onclick=\"return confirm('Opravdu zalohovat databazi??');\">zaloha DB</a><br />
    ";
*/
/*
  dodelat tady ten styl vypisu
  + nova funkce AdminTitle() + GenerovaniAdminTitle()
*/
/*
    include_once "promenne.php";
    include_once "funkce.php";
    $var = new Promenne();
    $class_fun = new Funkce($var, 0);

    $result = $class_fun->NactiFunkci("Funkce", "CallAdminTitle", $this->adresa_menu);
*/
/*
    include_once "promenne.php";
    include_once "funkce.php";
    $var = new Promenne();
    $class_fun = new Funkce($var, 0);

    $result = $class_fun->NactiFunkci("Funkce", "CallAdminMenu", $this->adresa_menu);
*//*
  public function NastavitAdresuMenu($adresa)
  {
    $this->adresa_menu = $adresa;
  }
*/
/**
 *
 * Administracni title
 *
 * @return title adminu
 */
/*
  public function AdminTitle()
  {
    $result = $this->var->main[0]->NactiFunkci("Funkce", "CallAdminTitle", $this->adresa_menu);

    return $result;
  }
*/
/**
 *
 * Administracni menu
 *
 * @return odkazy menu
 */
/*
  public function AdminMenu()
  {
    $result = $this->var->main[0]->NactiFunkci("Funkce", "CallAdminMenu", $this->adresa_menu);

    return $result;
  }
*/
/**
 *
 * Strankuje hlavni vypis, definovano na jednu tabulku
 *
 * @param neco
 * @return neco
 */
  private function Strankovani($strana, $adresa, $pocet, &$limit)
  {
    //$pocet = $this->PocetPolozekObsahu();  //pocet radku taulky
    $pocetstran = ceil($pocet / ($this->strankovani * $this->pocet_sloupcu));  //vypocteny pocet stran podle strankovani

    settype($strana, "integer");

    $mezai = false;
    if ($pocetstran > 7)
    {
      for ($i = 0; $i < 3; $i++)
      {
        $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
        $poc = $i + 1;  //predvipocotani poctu

        if ($str == $strana)  //detekce oznacene stranky
        {
          $jdi .= "{$poc}, ";
          $aktualni = $poc;
        }
          else
        {
          $jdi .= "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ";
        }
      }

      if (($strana / ($this->strankovani * $this->pocet_sloupcu)) >= 2 && ($strana / ($this->strankovani * $this->pocet_sloupcu)) <= ($pocetstran - 3))
      {
        $mezi = true;
      }
        else
      {
        $jdi .= "..., ";
      }

      for ($i = $pocetstran - 3; $i < $pocetstran; $i++)
      {
        $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
        $poc = $i + 1;  //predvipocotani poctu

        if ($str == $strana)  //detekce oznacene stranky
        {
          $jdi .= "{$poc}, ";
          $aktualni = $poc;
        }
          else
        {
          $jdi .= "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ";
        }
      }
    }
      else
    {
      for ($i = 0; $i < $pocetstran; $i++)
      {
        $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
        $poc = $i + 1;  //predvipocotani poctu

        if ($str == $strana)  //detekce oznacene stranky
        {
          $jdi .= "{$poc}, ";
          $aktualni = $poc;
        }
          else
        {
          $jdi .= "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ";
        }
      }
    }

    if ($mezi)
    {
      $i = 0;
      $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
      $poc = $i + 1;  //predvipocotani poctu
      $jdi = "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ..., ";

      $i = ($strana / ($this->strankovani * $this->pocet_sloupcu)) - 1;
      $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
      $poc = $i + 1;  //predvipocotani poctu
      $jdi .= "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ";

      $i = ($strana / ($this->strankovani * $this->pocet_sloupcu));
      $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
      $poc = $i + 1;  //predvipocotani poctu
      $jdi .= "{$poc}</a>, ";

      $aktualni = $poc;

      $i = ($strana / ($this->strankovani * $this->pocet_sloupcu)) + 1;
      $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
      $poc = $i + 1;  //predvipocotani poctu
      $jdi .= "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ..., ";

      $i = $pocetstran - 1;
      $str = $i * ($this->strankovani * $this->pocet_sloupcu); //stranka do DB
      $poc = $i + 1;  //predvipocotani poctu
      $jdi .= "<a href=\"{$adresa}&amp;str={$str}\" title=\"\">{$poc}</a>, ";
    }

    $jdi = substr($jdi, 0, -2); //odebrani carky

    $limit = "LIMIT {$strana}, ".($this->strankovani * $this->pocet_sloupcu); //dodatecny dotaz do DB

    $result =
    "
    <div id=\"strankovani\">
      {$jdi}
      <p id=\"vpravo\">
        Strana: {$aktualni} z {$pocetstran}
      </p>
    </div>
    ";

    return $result;
  }
              <li class=\"zadny_soubor\">Složka CSS je prázdná</li>
            <li>styles.css</li>
            <li>styles.css</li>

            <li>highslide-full.js</li>
            <li>highslide-full.js</li>
            <li>highslide-full - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie.js</li>
            <li>highslide-full - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie.js</li>
            <li>highslide-full.js</li>
<li class=\"zadny_soubor\">Složka JS je prázdná</li>
            <li>highslide-full.js</li>
            <li>highslide-full - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie.js</li>
            <li>highslide-full.js</li>
            <li>highslide-full.js</li>
            <li>highslide-full.js</li>
            <li>highslide-full - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie.js</li>
            <li>highslide-full - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie - Kopie.js</li>
            <li>highslide-full.js</li>
header("Content-type: image/png");
    $obr3 = imagecreate(400,400);
    $black = imagecolorallocate($obr3, 0, 0, 0);
    imageline($obr3, 150,0,250,100, $black);
    imagepng($obr3);
    exit(0);
    //$trid = new CustomModule();
    //$adresa_menu = $trid->MenuFunkce();
/*
    $adresa_menu = array(array("main_href" => "",
                          "odkaz" => "Úvodní strana",
                          "title" => "Úvodní strana",
                          "id" => "",
                          "class" => "uvodni_strana_menu",
                          "akce" => ""),

                    array("main_href" => "{$this->idmodul}",
                          "odkaz" => "Kontrola aktualizací",
                          "title" => "Kontrola aktualizací",
                          "id" => "",
                          "class" => "kontrola_aktualizaci_menu",
                          "akce" => ""),

                    array("main_href" => "{$this->idmodul}{$this->idzaloha}",
                          "odkaz" => "Záloha databáze",
                          "title" => "Záloha databáze",
                          "id" => "",
                          "class" => "zaloha_databaze_menu",
                          "akce" => " onclick=\"return confirm('Opravdu chcete zálohovat aktuální databázi ?');\""),
                    );
*/
//$adresa_menu = $this->NactiFunkci("CustomModule", "MenuFunkce");
/*
          $result =
          "
<h2>Vítejte v administraci {$this->var->nazevwebu}</h2>
{$this->SouhrnnenIformaceWebu()}
<h2>Výpis všech záloh databáze</h2>
{$this->VypisZalohyDB()}
          ";
*/
$cis = -1;
      for ($i = 0; $i < count($this->var->moduly); $i++)
      {
        if ($this->var->moduly[$i]["class"] == $index)
        {
          $cis = $i;
          break;
        }
      }
/*
            admin_ozn_menu: <input type=\"text\" name=\"admin_ozn_menu\" value=\"{$dat[0]}\" /><br />
            select_admin_oznac:<br />
            poc ozn. - kon ozn. <input type=\"text\" name=\"select_admin_oznac0\" value=\"{$dat[1]}\" /> -
            <input type=\"text\" name=\"select_admin_oznac1\" value=\"{$dat[2]}\" /><br />
            class <input type=\"text\" name=\"select_admin_oznac2\" value=\"{$dat[3]}\" /><br />
            id <input type=\"text\" name=\"select_admin_oznac3\" value=\"{$dat[4]}\" /><br />
            nazevwebu: <input type=\"text\" name=\"nazevwebu\" value=\"{$dat[5]}\" /><br />
            default: <input type=\"text\" name=\"default\" value=\"{$dat[6]}\" /><br />
            klenot: <input type=\"checkbox\" name=\"klenot\"".($dat[7] ? " checked=\"checked\"" : "")." /><br />
            autoklenot: <input type=\"checkbox\" name=\"autoklenot\"".($dat[8] ? " checked=\"checked\"" : "")." /><br />
            aktualizovat: <input type=\"checkbox\" name=\"aktualizovat\"".($dat[9] ? " checked=\"checked\"" : "")." /><br />
            htaccess: <input type=\"checkbox\" name=\"htaccess\"".($dat[10] ? " checked=\"checked\"" : "")." /><br />
            administrace: <input type=\"checkbox\" name=\"administrace\"".($dat[11] ? " checked=\"checked\"" : "")." /><br />
            adresaadminu: <input type=\"text\" name=\"adresaadminu\" value=\"{$dat[12]}\" /><br />
            souborymenu: <input type=\"text\" name=\"souborymenu\" value=\"{$dat[13]}\" /><br />
            souboryinclude: <input type=\"text\" name=\"souboryinclude\" value=\"{$dat[14]}\" /><br />
            get_kam: <input type=\"text\" name=\"get_kam\" value=\"{$dat[15]}\" /><br />
            get_idmodul: <input type=\"text\" name=\"get_idmodul\" value=\"{$dat[16]}\" /><br />
            get_submenu: <input type=\"text\" name=\"get_submenu\" value=\"{$dat[17]}\" /><br />
*/
/*
        $prom[] = stripslashes(htmlspecialchars($_GET["admin_ozn_menu"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["select_admin_oznac0"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["select_admin_oznac1"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["select_admin_oznac2"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["select_admin_oznac3"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["nazevwebu"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["default"], ENT_QUOTES));
        $prom[] = (!Empty($_GET["klenot"]) ? 1 : 0);
        $prom[] = (!Empty($_GET["autoklenot"]) ? 1 : 0);
        $prom[] = (!Empty($_GET["aktualizovat"]) ? 1 : 0);
        $prom[] = (!Empty($_GET["htaccess"]) ? 1 : 0);
        $prom[] = (!Empty($_GET["administrace"]) ? 1 : 0);
        $prom[] = stripslashes(htmlspecialchars($_GET["adresaadminu"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["souborymenu"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["souboryinclude"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["get_kam"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["get_idmodul"], ENT_QUOTES));
        $prom[] = stripslashes(htmlspecialchars($_GET["get_submenu"], ENT_QUOTES));
*/
/*
    $result =
    "
<dl>
  <dt>Celkový počet modulů:</dt>
  <dd>{$poc}</dd>
  <dt>Celkový počet databází:</dt>
  <dd>{$dbpoc}</dd>
  <dt>Celková velikost všech modulů</dt>
  <dd>{$this->Velikost($this->VelikostAdresare("modules", true))}</dd>
  <dt>Celková velikost všech databází:</dt>
  <dd>{$this->Velikost($sum)}</dd>
  <dt>Celková velikost záloh:</dt>
  <dd>{$this->Velikost($this->VelikostAdresare($this->var->zalohadir))}</dd>
  <dt>Velikost celého webu:</dt>
  <dd>{$this->Velikost($this->VelikostAdresare("./", true))}</dd>
  <dt>Celková velikost stylů:</dt>
  <dd>{$this->Velikost($this->VelikostAdresare("styles", true))}</dd>
  <dt>Celková velikost skriptů:</dt>
  <dd>{$this->Velikost($this->VelikostAdresare("script", true))}</dd>
  <dt>Celková velikost obrázků:</dt>
  <dd>{$this->Velikost($this->VelikostAdresare("obr", true))}</dd>
  <dt>Celková velikost sekcí:</dt>
  <dd>{$this->Velikost($this->VelikostAdresare($this->var->souborymenu, true))}</dd>
</dl>
    ";
*//*
        "<p>
          {$nazev} ([{$adresar}] - {$soubor}) -<br /><strong>{$fun_dat} ({$this->Velikost($velikost)})</strong> || depozit: <strong>{$dep_dat} ".(!Empty($zprava_velikost) ? "({$this->Velikost($zprava_velikost)})" : "")."</strong> -<br />{$info}
          <br />
          <br />
        </p>";
*/

    //include ".unikatni_fukce.php";
    //$result = $this->NactiPole($sekce, $this->var); //doresit!!!

    /*
     * otvirat soubrory bud to najednou.
     * nebo otevrit a specialnim kodem prepsat
     * nebo fyzicky otevrit a zpracovat pote
     * nekam definovat pole aby bylo pristupne z celeho kodu
     *
     * nevracet to pres jedo pole ale pres objekty a to tak ze bude objekt ten bude mit svoje public
     * funkce ktere se budou specialne za timto ucelem volat a s parametrama kteryma se to bude prepisovat
     * a nebo udelat tak aby tam byla univerzalni funkce v textu to bylo stylem %%1%% s tim ze by funkce mela promenny pocet
     * parametru a promenne by se tam vlkadali vyklicky... texy ptomennych by byl simbolicky a stuketcen promenne by se vlkladaly
     * skrz volitelne parametry! ... promyslet... toto by totiz slo! <= 1x naincludovany soubor ... a provedeni... by slo z jednoho souboru
     * aby byla funkce oddelena od samotneho prepisovani! ... otestovat pametove a vypocetni predpoklady!
     */

    //print_r(get_included_files());
//var_dump(in_array($soubor, get_included_files()));
    //$path = dirname($_SERVER["SCRIPT_FILENAME"]);
    if (file_exists($soubor)) //promyslet!! a hlavne prepsat!!!
    {
      //(in_array("{$path}/{$soubor}", get_included_files()) ?  : NULL)

/*
      $data = ($once ? include_once $soubor : include $soubor);
      $result = ($data[$sekce] != NULL ? $data[$sekce] : NULL);
      $data = NULL;
*/

      $result = $this->unikatni[$sekce];
      //($this->unikatni[$sekce] != NULL ? $this->unikatni[$sekce] : NULL);
      //$result = new UnikatniFunkce($sekce, $this->var);
    }
      else
    {
      $this->ErrorMsg("chyba: soubor: <strong>{$soubor}</strong> neexistuje", NULL, true);
    }

    return $result;
<?php
  $result = array("pokus1" => "<li>
      <a href=\"?%%1%%=logoff\" title=\"Odhlásit se\" class=\"odhlasit_se_menu\">Odhlásit se - %%2%%, (%%3%%), [%%4%%]</a>
    </li>");

  return $result;
?>
/*
    $result = "";
    if ($admin && !$this->var->aktivniadmin)  //omezeni na admin, optimalizace
    {
      return $result; //kdyz je admin=true && aktivitaadmnu=false => preskoceni zbytecneho nacitani
    }
*/
 *  * @param cesta cesta k souboru
 * @param once nactat informace z 1x nebo libovolne
public function UnikatniText($sekce)
  {
    $paramatr = func_get_args();
    $pocet = func_num_args();

    $result = $this->pokus_unikat[$sekce];

    for ($i = 1; $i < $pocet; $i++)
    {
      $result = str_replace("%%{$i}%%", $paramatr[$i], $result);
    }

    return $result;
  }
//var_dump($this->unikatni);
    //$adresa_menu = $this->NactiUnikatniObsah(".unikatni_fukce.php", "admin_menu");
    //$this->NactiObsahSouboru(".menu_funkce.php");
    //$this->NastavitAdresuMenu($adresa_menu);
//$this->pokus_unikat = include_once ".pokusny.php";  //to je vono... jiank u modulu tam bude i dirname
          //$result = $result[$i][$klic[$j]];
/**
 * Vykreslovaci trida menu adminu
 */
class VykresleniMenu
{
  public $i, $admin_menu, $main_href, $class, $id, $akce, $ozn_odkaz_l, $ozn_odkaz_r, $prvni, $posledni, $ente;
}

/**
 * Vykreslovaci trida info uvodu
 */
class VykresleniInfoUvod
{
  public $poc, $dbpoc, $sum;
}

/**
 * Vykreslovaci trida aktualizace
 */
class VykresleniAktualizace
{
  public $nazev, $adresar, $soubor, $fun_dat, $velikost, $dep_dat, $zprava_velikost, $info;
}

class VykresleniUploadu
{
  public $soubor;
}
/*
include_once ".unikatni_fukce.php";
class MeziTrida extends UnikatniFunkce
{
  //
}
*/
    $this->pom_menu = new VykresleniMenu(); //pomocna trida na vykreslovani menu
    $this->pom_info = new VykresleniInfoUvod(); //pomocna trida na vykreslen info uvod
    $this->pom_akt = new VykresleniAktualizace(); //pomocna trida na vykreslovani akualizace
    $this->pom_upl = new VykresleniUploadu(); //pomocna trida na vykreslovani uploadu
  //$once = true, $admin = true
/**
 *presunout asi do default module!!
 * Nacitani unikatnich obsahu stranek z promenne kde se nazrazuji za skutecny obsah
 *
 * pouziti: <strong>$text = $this->var->main[0]->NactiFunkci("Funkce", "NactiUnikatniObsah", $this->unikatni["sekce"][, "parametry", ...]);</strong>
 *
 * @param sekce sekce z pole
 * @return obsah dane sekce
 */
/*
  public function NactiUnikatniObsah($sekce)
  {
    $paramatr = func_get_args();
    $pocet = func_num_args();

    $result = $sekce;
    //$this->unikatni[$sekce];

    if (is_array($result))  //kontrola na pole
    {
      for ($i = 0; $i < count($result); $i++)
      {
        $klic = array_keys($result[$i]);
        for ($j = 0; $j < count($klic); $j++)
        {
          for ($k = 1; $k < $pocet; $k++)
          {
            $result[$i][$klic[$j]] = str_replace("%%{$k}%%", $paramatr[$k], $result[$i][$klic[$j]]);
          }
        }
      }
    }
      else
    {
      for ($i = 1; $i < $pocet; $i++)
      {
        $result = str_replace("%%{$i}%%", $paramatr[$i], $result);
      }
    }

    return $result;
  }
*/
//$this->unikatni[$sekce];
//include ".unikatni_fukce.php";
//$soubor = "{$this->var->souboryinclude}/{$soubor}";
/*
            $obr = ($suffix == "jpg" ||
                    $suffix == "png" ||
                    $suffix == "gif" ?
                    $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_obr"], "{$cesta}/{$soub}") : "");
*/
$subwhere[] = "";
      var_dump($sub);
      for ($i = 0; $i < count($sub); $i++)  //vygenerovani dotazu pro vyps menu
      {
        $subwhere[$i] = $sub[$i];
      }
//substr($subwhere, 0, -2);
//str_repeat("../", count($subadresa) - 1)
//(count($subadresa) > 1 ? "../" : "")."

vážený pane proděkaně(děkaně),žádám o přestup ze školy (VUT) fakulta informatiky
na naši univerzitu v pardubicich na fakultu elektrotechniky a informatiky obor
informatika. Důvodem mi je že mi školy nesplinila moje dostavadní očekávání,
tím myslim nybyli zde předměty ktere při dosavadnim studiu postrádám a nazaznost
předmětu nebyla dobra, a chci přestoupt na vačši fakultu fei i z duvodu že sem
dostal mnoho kladnych referenci na vaši školu tedy fakultu. Na prestup mi bylo
oznameno ze mam navrhnout termi a ten je: 3.8. 2009
..tedy jestli neposeru tedy ty 2 zkousky. :D

$adresa_menu = array( array("main_href" => "{$this->idmodul}",
                                "odkaz" => "Přepínání podle sekcí",
                                "title" => "Přepínání podle sekcí",
                                "id" => "",
                                "class" => "prepinani_sekci_menu",
                                "akce" => ""),
                          );

    $this->NastavitAdresuMenu($adresa_menu);
  switch ($_GET[$this->var->get_idmodul])
      {
        case $this->idmodul:  //id modul
          $result = $this->AdministraceObsahu();
        break;
      }
$ret = $_GET["ret"];
                if (!Empty($ret)) //pokud je nastavena vraceci adresa
                {
                  $this->var->main[0]->AutoClick(1, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$ret}");  //auto kliknuti
                }
                  else
                {
                  }
/*
    $data = explode("-", $adr);
    $result = "";
    for ($i = 0; $i < count($data); $i++)
    {
      $result .=
      "
      <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->adrobsahu}&amp;co=edit&amp;id={$data[$i]}&amp;ret={$_GET[$this->var->get_idmodul]}\" title=\"{$this->adresy[$data[$i]]}\">{$this->adresy[$data[$i]]}</a><br />
      ";
    }
*/
/**
 *
 * Externi odkaz do dalsich modulu, kontroluje se s existenci adresy v DB
 *
 * @param cesta cesta k obsahu
 * @return odkaz nebo zprava
 */
  public function PridejSmazStranku($cesta)
  {
    $result = ($this->ExistujeOdkaz($cesta) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_del_true"],
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=deladress&amp;adresa={$cesta}",
                                              $cesta) :
                                              $this->NactiUnikatniObsah($this->unikatni["admin_add_del_false"],
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=add&amp;adresa={$cesta}")
              );

    return $result;
  }
"admin_add_del_true" => "Již existuje obsah <a href=\"%%1%%\" onclick=\"return confirm('Opravdu smazat  adresu: \'%%2%%\' ?');\">Odstranit obsah</a>",
                  "admin_add_del_false" => "<a href=\"%%1%%\">Přidej obsah</a>",
/**
 *
 * Vrati v poli o id indexech adresy
 *
 * @return indexovane pole adres
 */
  private function SeznamAdres()
  {
    $result = "";
    if ($res = @$this->sqlite->query("SELECT id, adresa
                                      FROM dynamicky_obsah;", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        while ($data = $res->fetchObject())
        {
          $result[$data->id] = $data->adresa;
        }
      }
        else
      {
        if ($this->vypis_chybu)
        {
          $result = $this->NactiUnikatniObsah($this->unikatni["normal_seznam_adres_null"]);
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }
  $this->var->main[0]->AutoClick(1, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$this->idmodul}");  //auto kliknuti
      switch ($_GET[$this->var->get_idmodul])
      {
        case $this->idmodul:  //id modul
          $result = $this->AdministraceObsahu();
        break;
      }
 array("include" => "modules/dynamicky_gtk_admin/gtk_module.php",
                                  "class" =>  "DynamicGtkModule",
                                  "admin" => true,
                                  "databaze" => ".dbdyngtk.sqlite2",
                                  "zobrazit" => true,
                                  "uloziste" => "sqlite"),
/*
    $index = $this->var->main[0]->NajdiIndexPodleTridy($this->sourcedb);  //najde index tridy
    if ($index >= 0)
    {
      $this->dirpath = dirname($this->var->moduly[$index]["include"]);
      $this->dbname = $this->var->moduly[$index]["databaze"];

      if (!$this->sqlite = @new SQLiteDatabase("{$this->dirpath}/{$this->dbname}", 0777, $error))
      {
        $this->var->main[0]->ErrorMsg($error);
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg("Modul: '{$this->sourcedb}' nenalezen");
    }
*/
/*
      $this->sourcequery = $this->NactiUnikatniObsah($this->unikatni["set_sourcequery_{$tvar}"],
                                                    $jazyk);
*/
/**
 *
 * Overuje jestli existuje polozda v DB
 *
 * @param nazev nazev sekce
 * @param zanoreni cislo zanoreni sekce
 * @return true/false - existuje / neexistuje
 */
  private function ExistujePolozka($adresa)
  {
    if ($res = @$this->sqlite->query("SELECT id FROM cyklicky_lang_obsah WHERE adresa='{$adresa}';", NULL, $error))
    {
      $result = ($res->numRows() == 1 ? true : false);
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }
//mktime(date("H", $dat), date("i", $dat), date("s", $dat), date("n", $dat), date("j", $dat) - 1, date("Y", $dat)));
$dat = strtotime($data->datum);
array("include" => "modules/dynamic_rss/rss.php",
                                  "class" =>  "DynamicRSS",
                                  "admin" => false,
                                  "databaze" => "",
                                  "zobrazit" => true,
                                  "uloziste" => "sqlite"),


array(33) { ["HTTP_HOST"]=>  string(12) "geniv-laptop" ["HTTP_USER_AGENT"]=>  string(105) "Mozilla/5.0 (X11; U; Linux i686; cs-CZ; rv:1.9.0.10) Gecko/2009042523 Ubuntu/9.04 (jaunty) Firefox/3.0.10" ["HTTP_ACCEPT"]=>  string(63) "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ["HTTP_ACCEPT_LANGUAGE"]=>  string(23) "cs,en-us;q=0.7,en;q=0.3" ["HTTP_ACCEPT_ENCODING"]=>  string(12) "gzip,deflate" ["HTTP_ACCEPT_CHARSET"]=>  string(30) "ISO-8859-2,utf-8;q=0.7,*;q=0.7" ["HTTP_KEEP_ALIVE"]=>  string(3) "300" ["HTTP_CONNECTION"]=>  string(10) "keep-alive" ["HTTP_COOKIE"]=>  string(45) "LANG=2; SSID=4764a0023519a2cec1f2dca2a2d4cfeb" ["HTTP_CACHE_CONTROL"]=>  string(9) "max-age=0" ["PATH"]=>  string(28) "/usr/local/bin:/usr/bin:/bin" ["SERVER_SIGNATURE"]=>  string(113) "
Apache/2.2.11 (Ubuntu) PHP/5.2.6-3ubuntu4.1 with Suhosin-Patch Server at geniv-laptop Port 80
" ["SERVER_SOFTWARE"]=> string(62) "Apache/2.2.11 (Ubuntu) PHP/5.2.6-3ubuntu4.1 with Suhosin-Patch" ["SERVER_NAME"]=> string(12) "geniv-laptop" ["SERVER_ADDR"]=> string(9) "127.0.1.1" ["SERVER_PORT"]=> string(2) "80" ["REMOTE_ADDR"]=> string(9) "127.0.1.1" ["DOCUMENT_ROOT"]=> string(8) "/var/www" ["SERVER_ADMIN"]=> string(19) "webmaster@localhost" ["SCRIPT_FILENAME"]=> string(28) "/var/www/phplayout/index.php" ["REMOTE_PORT"]=> string(5) "50566" ["GATEWAY_INTERFACE"]=> string(7) "CGI/1.1" ["SERVER_PROTOCOL"]=> string(8) "HTTP/1.1" ["REQUEST_METHOD"]=> string(3) "GET" ["QUERY_STRING"]=> string(0) "" ["REQUEST_URI"]=> string(11) "/phplayout/" ["SCRIPT_NAME"]=> string(20) "/phplayout/index.php" ["PHP_SELF"]=> string(20) "/phplayout/index.php" ["PHP_AUTH_USER"]=> string(5) "Geniv" ["PHP_AUTH_PW"]=> string(9) "tecraasus" ["REQUEST_TIME"]=> int(1244371189) ["argv"]=> array(0) { } ["argc"]=> int(0) }

array(31) { ["HTTP_HOST"]=>  string(12) "geniv-laptop" ["HTTP_USER_AGENT"]=>  string(105) "Mozilla/5.0 (X11; U; Linux i686; cs-CZ; rv:1.9.0.10) Gecko/2009042523 Ubuntu/9.04 (jaunty) Firefox/3.0.10" ["HTTP_ACCEPT"]=>  string(63) "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ["HTTP_ACCEPT_LANGUAGE"]=>  string(23) "cs,en-us;q=0.7,en;q=0.3" ["HTTP_ACCEPT_ENCODING"]=>  string(12) "gzip,deflate" ["HTTP_ACCEPT_CHARSET"]=>  string(30) "ISO-8859-2,utf-8;q=0.7,*;q=0.7" ["HTTP_KEEP_ALIVE"]=>  string(3) "300" ["HTTP_CONNECTION"]=>  string(10) "keep-alive" ["HTTP_COOKIE"]=>  string(45) "LANG=2; SSID=4764a0023519a2cec1f2dca2a2d4cfeb" ["HTTP_CACHE_CONTROL"]=>  string(9) "max-age=0" ["PATH"]=>  string(28) "/usr/local/bin:/usr/bin:/bin" ["SERVER_SIGNATURE"]=>  string(113) "
Apache/2.2.11 (Ubuntu) PHP/5.2.6-3ubuntu4.1 with Suhosin-Patch Server at geniv-laptop Port 80
" ["SERVER_SOFTWARE"]=> string(62) "Apache/2.2.11 (Ubuntu) PHP/5.2.6-3ubuntu4.1 with Suhosin-Patch" ["SERVER_NAME"]=> string(12) "geniv-laptop" ["SERVER_ADDR"]=> string(9) "127.0.1.1" ["SERVER_PORT"]=> string(2) "80" ["REMOTE_ADDR"]=> string(9) "127.0.1.1" ["DOCUMENT_ROOT"]=> string(8) "/var/www" ["SERVER_ADMIN"]=> string(19) "webmaster@localhost" ["SCRIPT_FILENAME"]=> string(28) "/var/www/phplayout/index.php" ["REMOTE_PORT"]=> string(5) "50570" ["GATEWAY_INTERFACE"]=> string(7) "CGI/1.1" ["SERVER_PROTOCOL"]=> string(8) "HTTP/1.1" ["REQUEST_METHOD"]=> string(3) "GET" ["QUERY_STRING"]=> string(0) "" ["REQUEST_URI"]=> string(11) "/phplayout/" ["SCRIPT_NAME"]=> string(20) "/phplayout/index.php" ["PHP_SELF"]=> string(20) "/phplayout/index.php" ["REQUEST_TIME"]=> int(1244371227) ["argv"]=> array(0) { } ["argc"]=> int(0) }

array(32) { ["HTTP_HOST"]=>  string(12) "geniv-laptop" ["HTTP_USER_AGENT"]=>  string(105) "Mozilla/5.0 (X11; U; Linux i686; cs-CZ; rv:1.9.0.10) Gecko/2009042523 Ubuntu/9.04 (jaunty) Firefox/3.0.10" ["HTTP_ACCEPT"]=>  string(63) "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" ["HTTP_ACCEPT_LANGUAGE"]=>  string(23) "cs,en-us;q=0.7,en;q=0.3" ["HTTP_ACCEPT_ENCODING"]=>  string(12) "gzip,deflate" ["HTTP_ACCEPT_CHARSET"]=>  string(30) "ISO-8859-2,utf-8;q=0.7,*;q=0.7" ["HTTP_KEEP_ALIVE"]=>  string(3) "300" ["HTTP_CONNECTION"]=>  string(10) "keep-alive" ["HTTP_COOKIE"]=>  string(45) "LANG=2; SSID=4764a0023519a2cec1f2dca2a2d4cfeb" ["PATH"]=>  string(28) "/usr/local/bin:/usr/bin:/bin" ["SERVER_SIGNATURE"]=>  string(113) "
Apache/2.2.11 (Ubuntu) PHP/5.2.6-3ubuntu4.1 with Suhosin-Patch Server at geniv-laptop Port 80
" ["SERVER_SOFTWARE"]=> string(62) "Apache/2.2.11 (Ubuntu) PHP/5.2.6-3ubuntu4.1 with Suhosin-Patch" ["SERVER_NAME"]=> string(12) "geniv-laptop" ["SERVER_ADDR"]=> string(9) "127.0.1.1" ["SERVER_PORT"]=> string(2) "80" ["REMOTE_ADDR"]=> string(9) "127.0.1.1" ["DOCUMENT_ROOT"]=> string(8) "/var/www" ["SERVER_ADMIN"]=> string(19) "webmaster@localhost" ["SCRIPT_FILENAME"]=> string(28) "/var/www/phplayout/index.php" ["REMOTE_PORT"]=> string(5) "50575" ["GATEWAY_INTERFACE"]=> string(7) "CGI/1.1" ["SERVER_PROTOCOL"]=> string(8) "HTTP/1.1" ["REQUEST_METHOD"]=> string(3) "GET" ["QUERY_STRING"]=> string(0) "" ["REQUEST_URI"]=> string(11) "/phplayout/" ["SCRIPT_NAME"]=> string(20) "/phplayout/index.php" ["PHP_SELF"]=> string(20) "/phplayout/index.php" ["PHP_AUTH_USER"]=> string(5) "Geniv" ["PHP_AUTH_PW"]=> string(9) "tecraasus" ["REQUEST_TIME"]=> int(1244371245) ["argv"]=> array(0) { } ["argc"]=> int(0) }
/*
        else
      {
        if (Empty($_SESSION["ADMIN_USER"]) && Empty($_SESSION["ADMIN_PASS"]))
        {
          $this->AutoClick(0, "{$this->AbsoluteUrl()}?{$this->var->get_kam}=logoff");
        }

      }
*/
/*
        if (!Empty($_SERVER["PHP_AUTH_USER"]) &&
            !Empty($_SERVER["PHP_AUTH_PW"]) &&
            $this->Autorizace($_SERVER["PHP_AUTH_USER"], $_SERVER["PHP_AUTH_PW"]))
        {
          $_SESSION["ADMIN_USER"] = $_SERVER["PHP_AUTH_USER"];
          $_SESSION["ADMIN_PASS"] = $_SERVER["PHP_AUTH_PW"];
        }
          else
        {
          unset($_SESSION["ADMIN_USER"]);
          unset($_SESSION["ADMIN_PASS"]);

          $this->AutoClick(0, $this->AbsoluteUrl());
        }
*/
    $logoff = $this->NactiUnikatniObsah($this->unikatni["text_autorizace_logoff"]);
//var_dump(date("H:i:s", $_SESSION["ADMIN_TIME"]));
//var_dump(date("H:i:s", $_SERVER["REQUEST_TIME"]));
//var_dump($_SERVER["REQUEST_TIME"]);
//, date("H:i:s", $_SERVER["REQUEST_TIME"])
print_r($_SESSION);
var_dump($this->var->aktivniadmin);
  else
    {
/*
      if (!Empty($_SESSION["ADMIN_USER"]) && !Empty($_SESSION["ADMIN_PASS"]))
      {
        $this->AutoClick(0, "{$this->AbsoluteUrl()}?{$this->var->get_kam}=logoff");
        echo $this->NactiUnikatniObsah($this->unikatni["text_autorizace_logoff"]);
        return;
      }
*/
    }

/*
    $end_index = count($parametr) - 1;  //algoritmus na slouceni pole s paramerem
    if ($parametr[$end_index][0] === "array_args")
    {
      $mezi = array_slice($parametr[$end_index], 1);  //odstraneni: array_args
      $parametr = array_slice($parametr, 0, -1);  //odstraneni posledniho indexu
      $parametr = array_merge($parametr, $mezi);  //slouceni pole parametru s vnucenym polem
    }
*/
/*
            if (Empty($_POST[$podminka[$i]["name"]]))
            {
              $check = false;
            }
              else
            {
              $poc++;
            }
*/
/*
    if ($_GET[$this->var->get_kam] == $this->var->adresaadminu)
    {
      if (Empty($_SERVER["PHP_AUTH_USER"]) && Empty($_SERVER["PHP_AUTH_PW"]))
      {
        header("WWW-Authenticate: Basic realm=\"{$logon}\"");
        header("HTTP/1.0 401 Unauthorized");

        if ($this->var->klenot)  //prepnuti pro ziskani dat z klenot
        {
          list($_SERVER["PHP_AUTH_USER"], $_SERVER["PHP_AUTH_PW"]) = explode(":", base64_decode(substr($_SERVER["REDIRECT_REMOTE_USER"], 6)));
        }

        echo $this->NactiUnikatniObsah($this->unikatni["text_autorizace_logoff"], $absolutni_url);
        exit(0);
      }
        else
      {
        //if (Empty($_SESSION["ADMIN_USER"]) && Empty($_SESSION["ADMIN_PASS"]) && $_GET["act"] == "true")
        //{
          $_SESSION["ADMIN_USER"] = $_SERVER["PHP_AUTH_USER"];
          $_SESSION["ADMIN_PASS"] = $_SERVER["PHP_AUTH_PW"];

          if (Empty($_GET["act"]) && Empty($_SESSION["ADMIN_USER"]))
          {
            $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}={$this->var->adresaadminu}&act=true");
          }

          if ($_GET["act"] == "true" && Empty($_SESSION["ADMIN_USER"]))
          {
            $_SESSION["ADMIN_USER"] = $_SERVER["PHP_AUTH_USER"];
            $_SESSION["ADMIN_PASS"] = $_SERVER["PHP_AUTH_PW"];

            $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}={$this->var->adresaadminu}");
          }
        //}
      }

      if (!$this->Autorizace($_SESSION["ADMIN_USER"], $_SESSION["ADMIN_PASS"]))
      {
        $this->var->aktivniadmin = false;

        //unset($_SESSION["ADMIN_USER"]);
        //unset($_SESSION["ADMIN_PASS"]);
        //unset($_SESSION["ADMIN_TIME"]);

        //$this->AutoClick(0, $absolutni_url);
      }
        else
      {
        if ($this->Autorizace($_SESSION["ADMIN_USER"], $_SESSION["ADMIN_PASS"]))
        {
          $this->var->aktivniadmin = true;

          if ($_SERVER["REQUEST_TIME"] > $_SESSION["ADMIN_TIME"])
          {
            unset($_SESSION["ADMIN_USER"]);
            unset($_SESSION["ADMIN_PASS"]);
            unset($_SESSION["ADMIN_TIME"]);

            $this->AutoClick(0, $absolutni_url);
          }

          $_SESSION["ADMIN_TIME"] = $nextdate;
        }
          else
        {
          $this->var->aktivniadmin = false;

          //unset($_SESSION["ADMIN_USER"]);
          //unset($_SESSION["ADMIN_PASS"]);
          //unset($_SESSION["ADMIN_TIME"]);

          //$this->AutoClick(0, $absolutni_url);
        }
      }
    }
      //else

      //if (!Empty($_SESSION["ADMIN_USER"]) && !Empty($_SESSION["ADMIN_PASS"]))
      //{
      //  unset($_SESSION["ADMIN_USER"]);
      //  unset($_SESSION["ADMIN_PASS"]);
      //  unset($_SESSION["ADMIN_TIME"]);
      //  $this->AutoClick(0, $absolutni_url);
      //  return;
      //}

    }
*/
//echo $_SERVER["PHP_AUTH_USER"];
  else
        {
          $this->var->aktivniadmin = false;

          $this->AutoClick(0, $absolutni_url);
        }
      $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}=logoff&act=true");

      if ($_GET["act"] == "true")
      {
        unset($_SESSION["ADMIN_TIME"]);
        $_SERVER["PHP_AUTH_USER"] = "";
        $_SERVER["PHP_AUTH_PW"] = "";
//var_dump(explode("||--x--||", $nacist[$i]));
                    //var_dump(array_slice(explode("||--x--||", $nacist[$i]), $pocpic * $pocpol, $pocpic + $pocpol));
//var_dump($pocpic * $pocpol, ($pocpic * $pocpol) + $pocpol - 1);
//var_dump($pocpic);
var_dump($last_pic);
//explode("||--x--||", $nacist[$i]));
//var_dump($nacist[$i]);
var_dump();
                    if (Empty($last_pic))
                    {
                      $pocpol = count(explode("||--x--||", $nacist[$i]));
                      $last_pic = explode("||--x--||", $nacist[$i]);
                    }
                      else
                    {
                      $last_pic = array_slice(explode("||--x--||", $nacist[$i]), $pocpic * $pocpol, ($pocpic * $pocpol) + $pocpol - 1);
                    }
/*
            for ($i = 1; $i < $pocet; $i++)
            {
              $result = str_replace("%%{$i}%%", $parametr[$i], $result);
            }
*/

//var_dump($ukladani);

            //$ukladani[$i] = implode("||--x--||", $uloz_obr);
//$mezi_uloz[$i] = implode("||--x--||", $uloz_obr);
/*
                  $w_mini = $_POST["w_mini{$podminka[$i]["id"]}"];
                  settype($w_mini, "integer");

                  $h_mini = $_POST["h_mini{$podminka[$i]["id"]}"];
                  settype($h_mini, "integer");

                  $w_full = $_POST["w_full{$podminka[$i]["id"]}"];
                  settype($w_full, "integer");

                  $h_full = $_POST["h_full{$podminka[$i]["id"]}"];
                  settype($h_full, "integer");
                  $w_mini = $_POST["w_mini"][$podminka[$i]["id"]];
                  settype($w_mini, "integer");

                  $h_mini = $_POST["h_mini"][$podminka[$i]["id"]];
                  settype($h_mini, "integer");

                  $w_full = $_POST["w_full"][$podminka[$i]["id"]];
                  settype($w_full, "integer");

                  $h_full = $_POST["h_full"][$podminka[$i]["id"]];
                  settype($h_full, "integer");

                  $url = "";
                  if (!Empty($_FILES[$podminka[$i]["obr"]]["tmp_name"][$podminka[$i]["id"]]))
                  {
                    $this->ZpracujObrazek($_FILES[$podminka[$i]["obr"]], $podminka[$i]["id"], $url, $w_mini, $h_mini, $w_full, $h_full, $_FILES[$podminka[$i]["nahled"]]);
                  }

                  $uloz_obr = "";
                  $uloz_obr[] = $url;
                  $uloz_obr[] = $w_mini;
                  $uloz_obr[] = $h_mini;
                  $uloz_obr[] = $w_full;
                  $uloz_obr[] = $h_full;

                  $ukladani[$i] = implode("||--x--||", $uloz_obr);
*/
//print_r($ukladani);
//str_replace("%%{$i}%%", implode("||--x--||", $uloz_obr), $ukladani[$cisloukl[$i]]);
/*
            $temp = $_FILES["elem_obr"];
            for ($i = 0; $i < count($temp["tmp_name"]); $i++)
            {
              $w_mini = $_POST["w_mini"][$podminka[$cisloukl[$i]]["id"]];
              settype($w_mini, "integer");

              $h_mini = $_POST["h_mini"][$podminka[$cisloukl[$i]]["id"]];
              settype($h_mini, "integer");

              $w_full = $_POST["w_full"][$podminka[$cisloukl[$i]]["id"]];
              settype($w_full, "integer");

              $h_full = $_POST["h_full"][$podminka[$cisloukl[$i]]["id"]];
              settype($h_full, "integer");

              $url = "";
              $this->ZpracujObrazek($temp, $i, $url, $w_mini, $h_mini, $w_full, $h_full, $_FILES["nahled_obr"]);

              $uloz_obr = "";
              $uloz_obr[] = $url;
              $uloz_obr[] = $w_mini;
              $uloz_obr[] = $h_mini;
              $uloz_obr[] = $w_full;
              $uloz_obr[] = $h_full;

              $ukladani[$cisloukl[$i]] = str_replace("%%{$i}%%", implode("||--x--||", $uloz_obr), $ukladani[$cisloukl[$i]]);
            }
*/
/*
                  $ukladani[$i] = "%%{$obr}%%";
                  $cisloukl[$obr] = $i;
                  $obr++;
*/
$temp = $_FILES["elem_obr"];
            $mezi_uloz = "";
            for ($i = 0; $i < count($temp["tmp_name"]); $i++)
            {
              $w_mini = $_POST["w_mini"][$podminka[$cisloukl[$i]]["id"]];
              settype($w_mini, "integer");

              $h_mini = $_POST["h_mini"][$podminka[$cisloukl[$i]]["id"]];
              settype($h_mini, "integer");

              $w_full = $_POST["w_full"][$podminka[$cisloukl[$i]]["id"]];
              settype($w_full, "integer");

              $h_full = $_POST["h_full"][$podminka[$cisloukl[$i]]["id"]];
              settype($h_full, "integer");

              $uloz_obr = "";
              $this->ZpracujObrazek($temp, $i, $url, $w_mini, $h_mini, $w_full, $h_full, $_FILES["nahled_obr"]);

              $uloz_obr[] = $url;
              $uloz_obr[] = $w_mini;
              $uloz_obr[] = $h_mini;
              $uloz_obr[] = $w_full;
              $uloz_obr[] = $h_full;

              $ukladani[$cisloukl[$i]] = str_replace("%%{$i}%%", implode("||--x--||", $uloz_obr), $ukladani[$cisloukl[$i]]);
            }
/*
                $url = "";
                if (!Empty($_FILES[$podminka[$i]["obr"]]["tmp_name"][$podminka[$i]["id"]]))
                {
                  $this->ZpracujObrazek($_FILES[$podminka[$i]["obr"]], $podminka[$i]["id"], $url, $w_mini, $h_mini, $w_full, $h_full, $_FILES[$podminka[$i]["nahled"]]);
                }
*/
//$rozdelit = explode("||--x--||", $nacist);
//                    $url = $rozdelit[0];
//var_dump($rozdelit);
$w_mini = $this->ValueConfig(0);
                    $h_mini = $this->ValueConfig(1);
                    $w_full = $this->ValueConfig(2);
                    $h_full = $this->ValueConfig(3);
                                  list($obr_w, $obr_h) = getimagesize("{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$data->nadpis_url}");
                                  /*
          $sloupce = "";
          $sloup = explode("|--|", $data->sloupce);
          $poc_sloup = count($sloup);
          for ($i = 0; $i < $poc_sloup; $i++)  //generovani hlavicky
          {
            $sloupce .= $this->NactiUnikatniObsah($this->unikatni["normal_vypis_table_header_{$tvar}"], $sloup[$i]);
          }
          * ,
                                              $sloupce
<tr>
          %%6%%
          </tr>
*/
"normal_vypis_table_header_1" => "<th>%%1%%</th>",
              //$value = stripslashes(htmlspecialchars($_POST["value"], ENT_QUOTES));
          /*
                // create a 200*200 image
                $img = imagecreatetruecolor(200, 200);
                // allocate some colors
                $white = imagecolorallocate($img, 255, 255, 255);
                $red   = imagecolorallocate($img, 255,   0,   0);
                $green = imagecolorallocate($img,   0, 255,   0);
                $blue  = imagecolorallocate($img,   0,   0, 255);
                // draw the head
                imagearc($img, 100, 100, 200, 200,  0, 360, $white);
                // mouthimagearc($img, 100, 100, 150, 150, 25, 155, $red);
                // left and then the right eye
                imagearc($img, 60, 75, 50, 50, 0, 360, $green);
                imagearc($img, 140, 75, 50, 50, 0, 360, $blue);
                // output image in the browser
                header("Content-type: image/png");
                imagepng($img);
                // free memory
                imagedestroy($img);

            $im = imagecreatetruecolor(350, 450);
            $blue = imagecolorallocate($im, 0, 0, 180);
            $black = imagecolorallocate($im, 0, 0, 0);
            $white = imagecolorallocate($im, 200, 200, 200);
            imagefilledrectangle($im, 0, 0, 349, 449, $white);
            $font = "/library/fonts/EuphemiaCASBold.ttf";
            $text = "Testing...1 2 3";
            imagettftext($im, 46, 70, 100, 421, $blue, $font, $text);
            header('Content-type: image/png');
            imagepng($im);

            */
//upravit, na select pridat akci onchange!
          //$l_id = $_GET["lastid"];  //ekv, id
          //settype($l_id, "integer");
//predelat!!!
/*
          if ($l_id == 0)
          { //pridani vzorku prvku
            $result = $this->NactiUnikatniObsah($this->unikatni["admin_add_elem1"], $this->VyberTypu());

            $nazev = stripslashes(htmlspecialchars($_POST["nazev"], ENT_QUOTES));
            $typ = $_POST["typ"];  //cislo formulare
            settype($typ, "integer");

            if (!Empty($_POST["tlacitko"]))
            {
              if (@$this->sqlite->queryExec("INSERT INTO prvek (id, formular, nazev, typ) VALUES
                                            (NULL, {$form}, '{$nazev}', {$typ});", $error))
              {
                $result = $this->NactiUnikatniObsah($this->unikatni["admin_add_elem1_hlaska"],
                                                    $this->VyberTypu($typ, true));

                $lastid = $this->sqlite->lastInsertRowid();
                settype($lastid, "integer");
              }
                else
              {
                $this->var->main[0]->ErrorMsg($error);
              }

              $this->var->main[0]->AutoClick(1, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$this->idmodul}&co=addelem&form={$form}&lastid={$lastid}");  //auto kliknuti
            }
          }
            else
          { //kompletni vyplneni
            if ($res = @$this->sqlite->query("SELECT id, nazev, typ FROM prvek WHERE id={$l_id} AND formular={$form};", NULL, $error))
            {
              if ($res->numRows() == 1)
              {
                $data = $res->fetchObject();
                $num_input = array_values($this->input);  //navrat dane hodnoty radku
                //print_r($num_input[$data->typ]); //posl. id: {$l_id}  $num_input[$data->typ][0]

                $jmeno_typu = array_keys($this->input);
                $jm_typ = $jmeno_typu[$data->typ];

                $text_hint = ($jm_typ == "text");
                $submit_hint = ($jm_typ == "submit");

                $show_povinne = ($jm_typ != "option" && $jm_typ != "optgroup" && $jm_typ != "hidden");
                $show_nazev = ($jm_typ != "optgroup" && $jm_typ != "hidden" && $jm_typ != "submit" && $jm_typ != "reset");
                //".($submit_hint ? $this->znakdoporuc : "")."
                //".($submit_hint || $text_hint ? $this->znakdoporuc : "")."

                $result = $this->NactiUnikatniObsah($this->unikatni["admin_add_elem2"],
                                                    $this->VyberSekce($form),
                                                    $this->VyberTypu($data->typ, true),
                                                    ($show_nazev ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_nazev"],
                                                                                            $data->nazev,
                                                                                            ($text_hint ? $this->znakdoporuc : "")) : ""),
                                                    (!Empty($num_input[$data->typ][3]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_name"],
                                                                                                                    ($submit_hint || $text_hint ? $this->znakdoporuc : "")) : ""),
                                                    (!Empty($num_input[$data->typ][4]) && Empty($num_input[$data->typ][9]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_value"],
                                                                                                                                                      ($submit_hint ? $this->znakdoporuc : "")) : ""),
                                                    (!Empty($num_input[$data->typ][9]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_src"]) : ""),
                                                    (!Empty($num_input[$data->typ][6]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_readonly"]) : ""),
                                                    (!Empty($num_input[$data->typ][7]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_disabled"]) : ""),
                                                    (!Empty($num_input[$data->typ][5]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_label"]) : ""),
                                                    ($num_input[$data->typ][0] ? " checked=\"checked\"" : ""),
                                                    (!Empty($num_input[$data->typ][1]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_konec"]) : ""),
                                                    ($show_povinne ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_povinne"],
                                                                                              ($submit_hint ? $this->znakdoporuc : "")) : ""),
                                                    (!Empty($num_input[$data->typ][10]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_vstupni_typ"],
                                                                                                                    $this->VyberVstupu()) : ""),
                                                    (!Empty($num_input[$data->typ][10]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_reg_exp"]) : ""),
                                                    (!Empty($num_input[$data->typ][10]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_min_poc"]) : ""),
                                                    (!Empty($num_input[$data->typ][10]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_max_poc"]) : ""),
                                                    $this->PocetRadku($form));

                $formular = stripslashes(htmlspecialchars($_POST["formular"], ENT_QUOTES));
                settype($formular, "integer");
                //$typ = stripslashes(htmlspecialchars($_POST["typ"], ENT_QUOTES)); // - typ se zanecha
                //settype($typ, "integer");
                $nazev = stripslashes(htmlspecialchars($_POST["nazev"], ENT_QUOTES));
                $name = stripslashes(htmlspecialchars($_POST["name"], ENT_QUOTES));
                $value = stripslashes(htmlspecialchars($_POST["value"], ENT_QUOTES));
                $input_class = stripslashes(htmlspecialchars($_POST["input_class"], ENT_QUOTES));
                $input_id = stripslashes(htmlspecialchars($_POST["input_id"], ENT_QUOTES));
                $input_akce = stripslashes(htmlspecialchars($_POST["input_akce"], ENT_QUOTES));
                $src = stripslashes(htmlspecialchars($_POST["src"], ENT_QUOTES));
                $readonly = (!Empty($_POST["readonly"]) ? 1 : 0);
                $disabled = (!Empty($_POST["disabled"]) ? 1 : 0);
                $label = (!Empty($_POST["label"]) ? 1 : 0);
                $zacatek = (!Empty($_POST["zacatek"]) ? 1 : 0);
                $konec = (!Empty($_POST["konec"]) ? 1 : 0);
                $povinne = (!Empty($_POST["povinne"]) ? 1 : 0);
                $vstupni_typ = stripslashes(htmlspecialchars($_POST["vstupni_typ"], ENT_QUOTES));
                settype($vstupni_typ, "integer");
                $reg_exp = (!in_array($_SERVER["REMOTE_ADDR"], $this->var->ipblok) ? $_POST["reg_exp"] : stripslashes(htmlspecialchars($_POST["reg_exp"], ENT_QUOTES)));
                $min_poc = stripslashes(htmlspecialchars($_POST["min_poc"], ENT_QUOTES));
                settype($min_poc, "integer");
                $max_poc = stripslashes(htmlspecialchars($_POST["max_poc"], ENT_QUOTES));
                settype($max_poc, "integer");
                $poradi = stripslashes(htmlspecialchars($_POST["poradi"], ENT_QUOTES));
                settype($poradi, "integer");

                if (!Empty($_POST["tlacitko"]) &&
                    !Empty($formular) &&
                    !Empty($poradi) &&
                    $poradi > 0)
                {
                  if (@$this->sqlite->queryExec("UPDATE prvek SET formular={$formular},
                                                                  nazev='{$nazev}',
                                                                  typ={$data->typ},
                                                                  name='{$name}',
                                                                  value='{$value}{$src}',
                                                                  input_class='{$input_class}',
                                                                  input_id='{$input_id}',
                                                                  input_akce='{$input_akce}',
                                                                  readonly={$readonly},
                                                                  disabled={$disabled},
                                                                  label={$label},
                                                                  zacatek={$zacatek},
                                                                  konec={$konec},
                                                                  povinne={$povinne},
                                                                  reg_exp='{$reg_exp}',
                                                                  vstupni_typ={$vstupni_typ},
                                                                  min_poc={$min_poc},
                                                                  max_poc={$max_poc},
                                                                  poradi={$poradi}
                                                                  WHERE id={$l_id};", $error))
                  {
                    $result = $this->NactiUnikatniObsah($this->unikatni["admin_add_elem2_hlaska"], $name);
                  }
                    else
                  {
                    $this->var->main[0]->ErrorMsg($error);
                  }

                  $this->var->main[0]->AutoClick(1, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$this->idmodul}");  //auto kliknuti
                }
              }
            }
              else
            {
              $this->var->main[0]->ErrorMsg($error);
            }
          } //end else if ($l_id == 0)
*/
(!Empty($num_input[$data->typ][3]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_name"],
                                                                                                                $data->name,
                                                                                                                ($submit_hint || $text_hint ? $this->znakdoporuc : "")) : ""),



--------------------------------------------------------------------------------
v odkud budou možnosti:
Břeclav,Lanžhot,Kostice,Tvrdonice,Týnec [BV],
Hrušky [BV],Prušánky,Moravský Žižkov,
Velké Bílovice, Mikulčice, Lužice [HO], Hodonín [HO]

bylo by těžké..teda jestli by to bylo vůbec realizovatelné:
že by v kontaktech bylo vyhledávání spojení které by odkazovalo na idos..
jen bys v kontaktech vybral odkud: a hodilo by tě to na idos kde by bylo zadáno
odkud (to které si vybral v těch kontaktech)
a den(ten by se dal vybrat vždy jen pátek nebo sobota)
a taky by se to hodilo do idosu...
a ostatní parametry by byli už dané pevně ve
vyhledáváni IDOS: kam: Moravská Nová Ves, čas: 20:00

kde bys mohl vybrat :odkud(tam budou předem určené města), den(pátek,sobota)

tahat datumy z vypisu akci
datum nastavene podle akce a jeste by bylo nastaveny cas dojezdu 20:00

výběr spojeni:
vlak,bus,vlak/bus
--------------------------------------------------------------------------------
/*
    //includovani unikatniho obsahu
    $this->unikatni = $this->NactiObsahSouboru(".unikatni_fukce.php", false);

    $this->StartSession();

    if ($this->var->autoklenot)  //kdyz bude IP v bloku tak jde o lokalhost tedy, o klenot se nejedna
    {
      $this->var->klenot = (!in_array($_SERVER["REMOTE_ADDR"], $this->var->ipblok) ? true : false);
    }

    $verze = $this->KontrolaVerze();
    if ($verze < 5) //kontrola verze, kvuli php5
    {
      $this->ErrorMsg("máte příliš starou verzi php: (PHP{$verze}), potřebujete minimálně verzi PHP5", NULL, true);
      exit(1);
    }

    //$this->Instalace();

    $this->Prihlasovani();

    $this->AutoZalohovani();
    $this->GenerovaniErrorPage();

    $this->NastavitAdresuMenu($this->NactiUnikatniObsah($this->unikatni["admin_menu"],
                                                        $this->idmodul,
                                                        "{$this->idmodul}{$this->idzaloha}"));
*/
//$nazev = $this->OsetreniNazvu("{$this->VytvorJmenoObrazku()}__{$_FILES["soubor"]["name"]}");
            $dir = dirname($_GET["file"]);
            if (rename($_GET["file"], "{$dir}/{$nazev}"))
            {
              $result = $this->NactiUnikatniObsah($this->unikatni["admin_edit_file_hlaska"], $nazev);
            }
                      //$nazev = stripslashes(htmlspecialchars($this->OsetreniNazvu($_POST["nazev"]), ENT_QUOTES));
          //$koncovka = explode(".", $_FILES["soubor"]["name"]);
          //$nazev = "{$this->VytvorJmenoObrazku()}.{$koncovka[count($koncovka) - 1]}";
"admin_add_elem1" => "
            <form method=\"post\">
              <fieldset>
                %%1%%<br />
                nazev: <input type=\"text\" name=\"nazev\" /><br />
                <input type=\"submit\" name=\"tlacitko\" value=\"Přidat prvek\" />
              </fieldset>
            </form>
            ",

                  "admin_add_elem1_hlaska" => "
                  přídán typ element: %%1%%
                ",

//$text_hint = ($jm_typ == "text" || $jm_typ == "password" ||  $jm_typ == "textarea");
          //$submit_hint = ($jm_typ == "submit");

          //$show_povinne = ($jm_typ != "option" && $jm_typ != "optgroup" && $jm_typ != "hidden");
          //$show_nazev = ($jm_typ != "optgroup" && $jm_typ != "hidden" && $jm_typ != "submit" && $jm_typ != "reset");
          //".($submit_hint ? $this->znakdoporuc : "")."
          //".($submit_hint || $text_hint ? $this->znakdoporuc : "")."
          /*
          ($show_nazev ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_nazev"],
                                                                                      ($text_hint ? $this->znakdoporuc : "")) : ""),
                                              (!Empty($num_input[$type][4]) && Empty($num_input[$data->typ][9]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_value"],
                                                                                                                                            ($submit_hint ? $this->znakdoporuc : "")) : ""),
                                              (!Empty($num_input[$type][9]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_src"]) : ""),
                                              (!Empty($num_input[$type][6]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_readonly"]) : ""),
                                              (!Empty($num_input[$type][7]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_disabled"]) : ""),
                                              (!Empty($num_input[$type][5]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_label"]) : ""),
                                              ($num_input[$type][0] ? " checked=\"checked\"" : ""),
                                              (!Empty($num_input[$type][1]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_konec"]) : ""),
                                              ($show_povinne ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_povinne"],
                                                                                        ($submit_hint ? $this->znakdoporuc : "")) : ""),
                                              (!Empty($num_input[$type][10]) ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_vstupni_typ"],
) : "")
(!Empty($num_input[$type][10]) && $vstup == 2 ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_reg_exp"]) : ""),
                                              (!Empty($num_input[$type][10]) && $vstup == 0 ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_min_poc"]) : ""),
                                              (!Empty($num_input[$type][10]) && $vstup == 0 ? $this->NactiUnikatniObsah($this->unikatni["admin_add_elem_max_poc"]) : ""),
           */
  <script type=\"text/javascript\">
                function odes_1()
                {
                  document.getElementById('id_odesilatel').disabled = true;
                }

                function odes_2()
                {
                  document.getElementById('id_odesilatel').disabled = false;
                }

                %%14%%
              </script>
/*
                                                  $this->VyberSekce($data->formular),
                                                  $this->VyberTypu($type_1, "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editelem&amp;vstup={$vstup_1}&amp;id={$id}"),
                                                  ($show_nazev ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_nazev"],
                                                                                          $data->nazev,
                                                                                          ($text_hint ? $this->znakdoporuc : "")) : ""),
                                                  (!Empty($num_input[$type_1][4]) && Empty($num_input[$type_1][9]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_value"],
                                                                                                                                              $data->value,
                                                                                                                                              ($submit_hint ? $this->znakdoporuc : "")) : ""),
                                                  $data->input_class,
                                                  $data->input_id,
                                                  ($data->label ? $this->znakdoporuc : ""),
                                                  $data->input_akce,
                                                  (!Empty($num_input[$type_1][9]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_src"],
                                                                                                              $data->value) : ""),
                                                  (!Empty($num_input[$type_1][6]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_readonly"],
                                                                                                              ($data->readonly ? " checked=\"checked\"" : "")) : ""),
                                                  (!Empty($num_input[$type_1][7]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_disabled"],
                                                                                                              ($data->disabled ? " checked=\"checked\"" : "")) : ""),
                                                  (!Empty($num_input[$type_1][5]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_label"],
                                                                                                              ($data->label ? " checked=\"checked\"" : "")) : ""),
                                                  ($data->zacatek ? " checked=\"checked\"" : ""),
                                                  (!Empty($num_input[$type_1][1]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_konec"],
                                                                                                              ($data->konec ? " checked=\"checked\"" : "")) : ""),
                                                  ($show_povinne ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_povinne"],
                                                                                            ($data->povinne ? " checked=\"checked\"" : ""),
                                                                                            ($submit_hint ? $this->znakdoporuc : "")) : ""),
                                                  (!Empty($num_input[$type_1][10]) ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_vstupni_typ"],
                                                                                                              $this->VyberVstupu($vstup_1, "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editelem&amp;typ={$type_1}&amp;id={$id}")) : ""),
                                                  (!Empty($num_input[$type_1][10]) && $vstup_1 == 2 ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_reg_exp"],
                                                                                                                                $data->reg_exp) : ""),
                                                  (!Empty($num_input[$type_1][10]) && $vstup_1 == 0 ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_min_poc"],
                                                                                                                                $data->min_poc) : ""),
                                                  (!Empty($num_input[$type_1][10]) && $vstup_1 == 0 ? $this->NactiUnikatniObsah($this->unikatni["admin_edit_elem_max_poc"],
                                                                                                                                $data->max_poc) : ""),
                                                  $data->poradi
                                                  );
*/

/*
              $formular = stripslashes(htmlspecialchars($_POST["formular"], ENT_QUOTES));
              settype($formular, "integer");
              $typ = stripslashes(htmlspecialchars($_POST["typ"], ENT_QUOTES));
              settype($typ, "integer");
              $nazev = stripslashes(htmlspecialchars($_POST["nazev"], ENT_QUOTES));
              //$name = stripslashes(htmlspecialchars($_POST["name"], ENT_QUOTES));
              $value = stripslashes(htmlspecialchars($_POST["value"], ENT_QUOTES));
              $input_class = stripslashes(htmlspecialchars($_POST["input_class"], ENT_QUOTES));
              $input_id = stripslashes(htmlspecialchars($_POST["input_id"], ENT_QUOTES));
              $input_akce = stripslashes(htmlspecialchars($_POST["input_akce"], ENT_QUOTES));
              $src = stripslashes(htmlspecialchars($_POST["src"], ENT_QUOTES));
              $readonly = (!Empty($_POST["readonly"]) ? 1 : 0);
              $disabled = (!Empty($_POST["disabled"]) ? 1 : 0);
              $label = (!Empty($_POST["label"]) ? 1 : 0);
              $zacatek = (!Empty($_POST["zacatek"]) ? 1 : 0);
              $konec = (!Empty($_POST["konec"]) ? 1 : 0);
              $povinne = (!Empty($_POST["povinne"]) ? 1 : 0);
              $vstupni_typ = stripslashes(htmlspecialchars($_POST["vstupni_typ"], ENT_QUOTES));
              settype($vstupni_typ, "integer");
              $reg_exp = (!in_array($_SERVER["REMOTE_ADDR"], $this->var->ipblok) ? $_POST["reg_exp"] : stripslashes(htmlspecialchars($_POST["reg_exp"], ENT_QUOTES)));
              $min_poc = stripslashes(htmlspecialchars($_POST["min_poc"], ENT_QUOTES));
              settype($min_poc, "integer");
              $max_poc = stripslashes(htmlspecialchars($_POST["max_poc"], ENT_QUOTES));
              settype($max_poc, "integer");
              $poradi = stripslashes(htmlspecialchars($_POST["poradi"], ENT_QUOTES));
              settype($poradi, "integer");
*/
/*
                  "admin_edit_elem_nazev" => "nazev: <input type=\"text\" name=\"nazev\" value=\"%%1%%\" />%%2%%<br />",

                  "admin_edit_elem_value" => "value: <input type=\"text\" name=\"value\" value=\"%%1%%\" />%%2%%<br />",

                  "admin_edit_elem_src" => "src: <input type=\"text\" name=\"src\" value=\"%%1%%\" /><br />",

                  "admin_edit_elem_readonly" => "readonly: <input type=\"checkbox\" name=\"readonly\"%%1%% /><br />",

                  "admin_edit_elem_disabled" => "disabled: <input type=\"checkbox\" name=\"disabled\"%%1%% /><br />",

                  "admin_edit_elem_label" => "label: <input type=\"checkbox\" name=\"label\"%%1%% /><br />",

                  "admin_edit_elem_konec" => "konec: <input type=\"checkbox\" name=\"konec\"%%1%% /><br />",

                  "admin_edit_elem_povinne" => "povinne: <input type=\"checkbox\" name=\"povinne\"%%1%% />%%2%%<br />",

                  "admin_edit_elem_vstupni_typ" => "vstupni_typ: %%1%%<br />",

                  "admin_edit_elem_reg_exp" => "reg_exp: <input type=\"text\" name=\"reg_exp\" value=\"%%1%%\" /><a href=\"http://php.net/manual/en/regexp.reference.php\">dokumentace</a><br />",

                  "admin_edit_elem_min_poc" => "min_poc: <input type=\"text\" name=\"min_poc\" value=\"%%1%%\" /><br />",

                  "admin_edit_elem_max_poc" => "max_poc: <input type=\"text\" name=\"max_poc\" value=\"%%1%%\" /><br />",
*/
/*
                  if ($mezinaz[count($mezinaz) - 1] == "ttf" && !move_uploaded_file($_FILES["font"]["tmp_name"], "{$this->dirpath}/{$this->dirfont}/{$jmeno}"))
                  {
                    $this->var->main[0]->ErrorMsg($_FILES["font"]["error"]);
                  }
*/
                  $url = "{$this->VytvorJmenoObrazku()}_{$this->OsetriJmenoSouboru($mezinaz[0])}.ttf";
                  $nahled = "{$url}.png";
                  $jmeno = "{$url}.ttf";
                      //$vysledek = $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}"];
                      //var_dump($vysledek == $zpost,$ysledek,$zpost);
                      //var_dump($zpost == $this->captchakod[$adresa]["slovo"], $zpost, $this->captchakod[$adresa]["slovo"], $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}_vysledek"]);
//print_r($_POST);
//print_r($podminka);
//print_r($vystup);
//var_dump($check, $poc, $vystup);
//var_dump($check, $poc, $pocetelem);
                /*
//email pro admina
          $predmet = ;
          $email = $;
          $textemail = ;

          //email pro uzivatele
          $oznameni = ;
          $predmetoznameni = ;
          $textemailoznameni = ;

          //nastaveni odesilatele
          $odesilateladmin = ;  //pro admina
          $odesilateluzivatel = ;  //pro uzivatele



        if ($oznameni)  //je-li povolene oznameni
        {

        }

        $result .= $this->NactiUnikatniObsah($this->unikatni["normal_email_send_complet_{$tvar}"],
                                            $em1,
                                            $em2,
                                            "{$this->absolutni_url}{$_GET[$this->var->kam]}");

        //$this->var->main[0]->AutoClick(5, "{$this->absolutni_url}{$_GET[$this->var->kam]}");  //auto kliknuti
        */
        /*
%%1%%
                      %%2%%
                      %%3%%
                      %%4%%
                      %%5%%
                      %%6%%
                      %%7%%
                      %%8%%
                      %%9%%
                      %%10%%
                      %%11%%
                      %%12%%
                      %%13%%
                      %%14%%
                      %%15%%
                      %%16%%
                      %%17%%
                      %%18%%
                      %%19%%
                      %%20%%
                      %%21%%
                      %%22%%
                      %%23%%
                      %%24%%
                      %%25%%
                      %%26%%
                      %%27%%
                      %%28%%
*/

/*
                  "normal_vypis_form_nadpis_1" => "<h2>%%1%%</h2>",

                  "normal_vypis_form_label_1" => "        <dt id=\"centralni_dt_%%1%%\">\n          <label for=\"%%2%%\">%%3%%</label>\n        </dt>\n        ",

                  "normal_vypis_form_text_zac_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <input type=\"text\"%%3%%%%4%%%%5%%%%6%%%%7%%%%8%%%%9%% />%%10%%\n        </dd>\n",

                  "normal_vypis_form_password_zac_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <input type=\"password\"%%3%%%%4%%%%5%%%%6%%%%7%%%%8%%%%9%% />%%10%%\n        </dd>\n",

                  "normal_vypis_form_textarea_zac_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <textarea%%3%%%%4%%%%5%%%%6%%%%7%%%%8%% rows=\"10\" cols=\"30\">%%9%%",

                  "normal_vypis_form_textarea_kon_1" => "</textarea>%%1%%\n        </dd>\n",

                  "normal_vypis_form_textarea_zac_kon_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <textarea%%3%%%%4%%%%5%%%%6%%%%7%%%%8%% rows=\"10\" cols=\"30\">%%9%%</textarea>%%10%%\n        </dd>\n",

                  "normal_vypis_form_checkbox_zac_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <input type=\"checkbox\"%%3%%%%4%%%%5%%%%6%%%%7%% /> %%8%%%%9%%\n        </dd>\n",

                  "normal_vypis_form_radio_zac_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <input type=\"radio\"%%3%%%%4%%%%5%%%%6%%%%7%% /> %%8%%%%9%%\n        </dd>\n",

                  "normal_vypis_form_submit_zac_1" => "        <dd id=\"centralni_dd_%%1%%\">\n          <input type=\"submit\"%%2%%%%3%%%%4%%%%5%%%%6%%%%7%% />\n        </dd>\n",

                  "normal_vypis_form_reset_zac_1" => "        <dd id=\"centralni_dd_%%1%%\">\n          <input type=\"reset\"%%2%%%%3%%%%4%%%%5%%%%6%%%%7%% />\n        </dd>\n",

                  "normal_vypis_form_image_zac_1" => "        <input type=\"image\"%%1%%%%2%%%%3%%%%4%%%%5%%%%6%% />\n",

                  "normal_vypis_form_hidden_zac_1" => "        <input type=\"hidden\"%%1%%%%2%%%%3%%%%4%%%%5%% />\n",

                  "normal_vypis_form_select_zac_1" => "%%1%%<dd id=\"centralni_dd_%%2%%\">\n          <select%%3%%%%4%%%%5%%%%6%%%%7%%>",

                  "normal_vypis_form_select_kon_1" => "\n          </select>%%1%%\n        </dd>\n",

                  "normal_vypis_form_option_zac_kon_1" => "\n              <option%%1%%%%2%%%%3%%%%4%%>%%5%%</option>",

                  "normal_vypis_form_optgroup_zac_1" => "\n            <optgroup%%1%%%%2%%%%3%%%%4%%>",

                  "normal_vypis_form_captcha_zac_1" => "%%1%%",

                  "normal_vypis_form_elem_1" => "%%1%%",

                  "normal_vypis_end_form_1" => "      </dl>
      <p id=\"centralni_form_dodatek\">%%1%%</p>
    </fieldset>
  </form>",
*/

                  //"normal_email_text_1" => "%%1%%: %%2%%<br />\n",

/*
                  "normal_vypis_begin_form_1" => "  <form method=\"post\" action=\"\" id=\"centralni_form\">
    <fieldset>
      <dl>\n",
*/                  //"normal_email_zprava_1" => "%%1%%<br />\n<br />\n%%2%%<br />\nIP: %%3%%<br />\nHost: %%4%%<br />\nOS: %%5%%<br />\nBrowser: %%6%%<br />\nDatum: %%7%%",
/*

                $nazev = (!Empty($data1->nazev) ? "{$data1->nazev}" : "");

                //$name = (!Empty($data1->name) ? " name=\"elem_{$data1->id}\"" : "");

                $value = (!Empty($data1->value) ? " value=\"{$data1->value}\"" : "");
                $valuetext = (!Empty($data1->value) ? "{$data1->value}" : "");
                $valuegru = (!Empty($data1->value) ? " label=\"{$data1->value}\"" : ""); //pro group..
                $src = (!Empty($data1->value) ? " src=\"{$data1->value}\"" : ""); //pro image

                $input_class = (!Empty($data1->input_class) ? " class=\"{$data1->input_class}\"" : "");
                $input_id = (!Empty($data1->input_id) || $data1->label ? " id=\"{$data1->input_id}\"" : "");
                $input_akce = (!Empty($data1->input_akce) ? "{$data1->input_akce}" : "");

                $readonly = ($data1->readonly ? " readonly=\"readonly\"" : "");
                $disabled = ($data1->disabled ? " disabled=\"disabled\"" : "");
                $label = ($data1->label ? $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_label_{$tvar}"],
                                                                    $data1->id,
                                                                    $data1->input_id,
                                                                    $nazev)  : "");

                $povinne = (!Empty($data1->povinne) ? "{$this->znakpovinne}" : ""); //pripisuje znamenko povinnosti

                if (!Empty($data1->povinne) &&
                    $typ[$data1->typ] != "option" &&
                    $typ[$data1->typ] != "optgroup" &&
                    $typ[$data1->typ] != "hidden")
                {
                  $podminka[$i] = ($typ[$data1->typ] == "captcha" && !Empty($captcha) ? "captcha_{$idcaptcha}" : "elem_{$data1->id}");
                  $i++;
                }

                $prvky["elem_{$data1->id}"]["typ"] = $data1->typ;
                $prvky["elem_{$data1->id}"]["vstup"] = $dattyp[$data1->vstupni_typ];
                $prvky["elem_{$data1->id}"]["reg_exp"] = $data1->reg_exp;
                $prvky["elem_{$data1->id}"]["nazev"] = $data1->nazev;
                $prvky["elem_{$data1->id}"]["defaultni"] = $data1->povinne;
                $prvky["elem_{$data1->id}"]["min"] = $data1->min_poc;
                $prvky["elem_{$data1->id}"]["max"] = $data1->max_poc;

                switch ($typ[$data1->typ])
                {
                  case "text":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_text_zac_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $value,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $readonly,
                                                          $disabled,
                                                          $povinne);
                    }
                  break;

                  case "password":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_password_zac_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $value,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $readonly,
                                                          $disabled,
                                                          $povinne);
                    }
                  break;

                  case "textarea":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_textarea_zac_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $readonly,
                                                          $disabled,
                                                          $valuetext);
                    }

                    if ($data1->konec)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_textarea_kon_{$tvar}"],
                                                          $povinne);
                    }

                    if ($data1->zacatek && $data1->konec)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_textarea_zac_kon_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $readonly,
                                                          $disabled,
                                                          $valuetext,
                                                          $povinne);
                    }
                  break;

                  case "checkbox":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_checkbox_zac_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $disabled,
                                                          $valuetext,
                                                          $povinne);
                    }
                  break;

                  case "radio":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_radio_zac_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $disabled,
                                                          $valuetext,
                                                          $povinne);
                    }
                  break;

                  case "submit":
                    if ($data1->zacatek && Empty($_POST["elem_{$data1->id}"]))
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_submit_zac_{$tvar}"],
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $value,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $disabled);
                    }
                      else
                    {
                      $element = "";
                    }
                  break;

                  case "reset":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_reset_zac_{$tvar}"],
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $value,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $disabled);
                    }
                  break;

                  case "image":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_image_zac_{$tvar}"],
                                                          " name=\"elem_{$data1->id}\"",
                                                          $src,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $disabled);
                    }
                  break;

                  case "hidden":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_hidden_zac_{$tvar}"],
                                                          " name=\"elem_{$data1->id}\"",
                                                          $value,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce);
                    }
                  break;

                  case "select":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_select_zac_{$tvar}"],
                                                          $label,
                                                          $data1->id,
                                                          " name=\"elem_{$data1->id}\"",
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $disabled);
                    }

                    if ($data1->konec)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_select_kon_{$tvar}"],
                                                          $povinne);
                    }
                  break;

                  case "option":
                    if ($data1->zacatek && $data1->konec)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_option_zac_kon_{$tvar}"],
                                                          $value,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce,
                                                          $nazev);
                    }
                  break;

                  case "optgroup":
                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_optgroup_zac_{$tvar}"],
                                                          $valuegru,
                                                          $input_class,
                                                          $input_id,
                                                          $input_akce);
                    }

                    if ($data1->konec)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_optgroup_kon_{$tvar}"]);
                    }
                  break;

                  case "captcha":
                    if (!Empty($captcha))
                    {
                      if (count($_POST) == 0 || $_POST["captcha_{$idcaptcha}"] != $_SESSION["slovo_{$idcaptcha}_vysledek"])
                      {
                        $_SESSION["slovo_{$idcaptcha}_vysledek"] = $_SESSION["slovo_{$idcaptcha}"];
                      }
                    }

                    if ($data1->zacatek)
                    {
                      $element = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_captcha_zac_{$tvar}"],
                                                          $captcha);
                    }
                  break;

                  default:
                    $element = "??";
                  break;
                }

                $result .= $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_elem_{$tvar}"],
                                                    $element);
*/
/*
    $result .= $this->NactiUnikatniObsah($this->unikatni["normal_vypis_end_form_{$tvar}"],
                                        $dodatek);

    $pot = true;
    $poc = 0;
    for ($i = 0; $i < count($podminka); $i++) //kontrola podminek
    {
      if (Empty($_POST[$podminka[$i]])) //kontrola prazdnosti
      {
        $pot = false; //kdyz nevyhovuje post
      }
        else
      {
        $poc++; //pocita spravne vyplneni
      }
    }
*/
//var_dump($pocetelem);
//print_r($podminka);






/*
    if (count($_POST) > 1 &&  //vic jak 1 poslany post
        $pot && //potvrzen redy
        $poc == count($podminka) && //sedi delka podminky a napoctanych bez problemu
        $poc > 0) //pocet vest jak nula
    {
      $obsah = "";
      $dokon = true;
      $klice = array_keys($_POST);  //vezme klice z POSTu

      for ($i = 0; $i < count($klice); $i++)
      {
        $prom = $_POST[$klice[$i]]; //projde si post podle klicu, captchu kontroluje zvlast

        if ($num_input[$prvky[$klice[$i]]["typ"]][10] == "text")  //kontrola textovych elementu
        {
          if ($prvky[$klice[$i]]["min"] > 0 &&
              $prvky[$klice[$i]]["max"] > 0)
          {
            if (strlen($prom) < $prvky[$klice[$i]]["min"] ||
                strlen($prom) > $prvky[$klice[$i]]["max"])
            {
              $prom = "";
            }
          }
            else
          if ($prvky[$klice[$i]]["min"] > 0)  //kontrola minina
          {
            if (strlen($prom) < $prvky[$klice[$i]]["min"])
            {
              $prom = "";
            }
          }
            else
          if ($prvky[$klice[$i]]["max"] > 0)  //kontrola maxima
          {
            if (strlen($prom) > $prvky[$klice[$i]]["max"])
            {
              $prom = "";
            }
          }

          switch ($prvky[$klice[$i]]["vstup"])
          {
            case "text":  //konvert na text
              settype($prom, "string");
            break;

            case "integer": //konvert na cislo
              settype($prom, "integer");
            break;

            case "reg_exp": //konvert podle RV
              preg_match($prvky[$klice[$i]]["reg_exp"], $prom, $ret);
              $prom = $ret[0];  //vybere nulty index
            break;
          }
        }

        $def = $prvky[$klice[$i]]["defaultni"]; //defaultni polozka

        if (!Empty($prom))  //kdyz jsou dane promene neprazdne
        {
          $nazev = $prvky[$klice[$i]]["nazev"];

          switch ($typ[$prvky[$klice[$i]]["typ"]])
          {
            case "text":
            case "password":
            case "textarea":
            case "checkbox":
            case "radio":
            case "select":
              $obsah .= $this->NactiUnikatniObsah($this->unikatni["normal_email_text_{$tvar}"],
                                                  $nazev,
                                                  $prom);
            break;
          }
        }
          else
        {
          if ($def)
          {
            $dokon = false;
          }
        }
      }

      //kdyz je zavedena captcha tak kontroluje jestli souhlasi, jinak je true
      if ($dokon && (!Empty($captcha) ? $_POST["captcha_{$idcaptcha}"] == $_SESSION["slovo_{$idcaptcha}_vysledek"] : true))
      {
        $ip = $_SERVER["REMOTE_ADDR"];
        $agent = $_SERVER["HTTP_USER_AGENT"];
        $os = $this->var->main[0]->NactiFunkci("Funkce", "TypOS", $agent);
        $brow = $this->var->main[0]->NactiFunkci("Funkce", "TypBrowseru", $agent);
        $host = gethostbyaddr($ip);
        $datum = date("d.m.y / H:i:s");

        $zprava = $this->NactiUnikatniObsah($this->unikatni["normal_email_zprava_{$tvar}"],
                                            $textemail,
                                            $obsah,
                                            $ip,
                                            $host,
                                            $os,
                                            $brow,
                                            $datum);

        //prepinani mezi nastavenym a uzivatelskym emailem
        $admin_from = (!Empty($odesilateladmin) ? $odesilateladmin : $_POST[$zdrojovyemail]);
        $header = $this->NactiUnikatniObsah($this->unikatni["normal_email_header_{$tvar}"],  //hlavička
                                            $this->hlavicka,
                                            $admin_from);

        if (@mail($email, $this->OsetreniTextu($predmet), $zprava, $header))  //odeslani majiteli
        {
          $em1 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send_true_{$tvar}"]);
        }
          else
        {
          $em1 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send_false_{$tvar}"]);
        }

        if ($oznameni)  //je-li povolene oznameni
        {
          $zprava = "{$textemailoznameni}<br />\n<br />\n{$obsah}";
          $header = "{$this->hlavicka}\nFrom: {$odesilateluzivatel}\n";  //hlavička

          if (@mail($_POST[$zdrojovyemail], $this->OsetreniTextu($predmetoznameni), $zprava, $header))
          {
            $em2 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send2_true_{$tvar}"]);
          }
            else
          {
            $em2 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send2_false_{$tvar}"]);
          }
        }

        $result .= $this->NactiUnikatniObsah($this->unikatni["normal_email_send_complet_{$tvar}"],
                                            $em1,
                                            $em2,
                                            "{$this->absolutni_url}{$_GET[$this->var->kam]}");

        //$this->var->main[0]->AutoClick(5, "{$this->absolutni_url}{$_GET[$this->var->kam]}");  //auto kliknuti
      }
        else
      {
        if ($_POST["captcha_{$idcaptcha}"] != $_SESSION["slovo_{$idcaptcha}_vysledek"])
        {
          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_input_error_captcha_{$tvar}"],
                                              "{$this->absolutni_url}{$_GET[$this->var->kam]}");
        }
          else
        {
          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_input_error_{$tvar}"],
                                              "{$this->absolutni_url}{$_GET[$this->var->kam]}");
        }
      }
    }

    if ($poc_prvku == 0)  //kdyz nesedi adresa,vrati prazdny obsah
    {
      //$result = "";
    }
*//*
          $result .= (!Empty($data->nazev) ? $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_nadpis_{$tvar}"],
                                                                      $data->nazev) : "");
*/
    //$num_input = array_values($this->input);  //navraceni hodnot definovanych prvku
    //$dattyp = $this->vstupni_typ; //datove typy

    //$result = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_begin_form_{$tvar}"]);
//var_dump($this->captchakod);
              //$num_input = array_values($this->input);  //navrat dane hodnoty radku
              //print_r($num_input[$data->typ]); //posl. id: {$l_id}  $num_input[$data->typ][0]

/*
              $jmeno_typu = array_keys($this->input);
              $jm_typ = $jmeno_typu[$data->typ];

              $text_hint = ($jm_typ == "text");
              $submit_hint = ($jm_typ == "submit");

              $show_povinne = ($jm_typ != "option" && $jm_typ != "optgroup");
              $show_nazev = ($jm_typ != "optgroup" && $jm_typ != "hidden" && $jm_typ != "submit" && $jm_typ != "reset");
              //".($submit_hint ? $this->znakdoporuc : "")."
              //".($submit_hint || $text_hint ? $this->znakdoporuc : "")."
*/
switch ($podminka[$i]["typ"])
                    {
                      case "text":  //chyba textu (jen nevyplneni a nebo blok)
                        if ((Empty($_POST[$podminka[$i]["name"]]) || $podminka[$i]["blok"] == $_POST[$podminka[$i]["name"]]) &&
                            $podminka[$i]["povinne"])
                        {

                        }
                      break;

                      case "checkbox":  //chyba checkboxu
                        if (Empty($_POST[$podminka[$i]["name"]]) && $podminka[$i]["povinne"])
                        {
                          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_checked_error_{$tvar}"],
                                                              $podminka[$i]["nazev"]);
                        }
                      break;

                      case "captcha": //chyba captchy
                        if (Empty($_POST[$podminka[$i]["name"]]) &&
                            $podminka[$i]["povinne"])
                        {
                          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_error_empty_captcha_{$tvar}"]);
                        }

                        if ($_POST[$podminka[$i]["name"]] != $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}_vysledek"] &&
                            $podminka[$i]["povinne"])
                        {
                          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_input_error_wrong_captcha_{$tvar}"]);
                        }
                      break;

                      default:  //jina chyba
                        if ($podminka[$i]["povinne"])
                        {
                          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_default_error_{$tvar}"]);
                        }
                      break;
                    }
/*
                  "admin_editelem_value" => "value: <input type=\"text\" name=\"value\" value= \"%%1%%\" /><br />",

                  "admin_editelem_vstupni_typ" => "vstupní typ: %%1%%<br />",

                  "admin_editelem_reg_exp" => "reg_exp: <input type=\"text\" name=\"reg_exp\" value=\"%%1%%\" /> <a href=\"http://php.net/manual/en/regexp.reference.php\">dokumentace</a><br />",

                  "admin_editelem_vystupni_format" => "vystupni_format: <input type=\"text\" name=\"vystupni_format\" value=\"%%1%%\" /> <a href=\"http://php.net/manual/en/function.date.php\">dokumentace</a><br />",

                  "admin_editelem_min_max_poc" => "
                  min_poc: <input type=\"text\" name=\"min_poc\" value=\"%%1%%\" /><br />
                  max_poc: <input type=\"text\" name=\"max_poc\" value=\"%%2%%\" /><br />
                  ",
*/
/**
 *
 * Presnacteni captcha kodu pro formular
 *
 * pouziti: <strong>$this->var->main[0]->NactiFunkci("DynamicForm", "NactiCaptchu"[, 1, $captcha, $slovo]);</strong>
 *
 * @param adr adresa formulare
 * @param idcaptcha cislo id captcha kodu
 * @param captcha polo formular captcha
 * @param slovo vysledne slovo captcha
 */
  public function NactiCaptchu($adr = NULL, $idcaptcha, $captcha, $slovo)
  {
    if (!Empty($adr))
    {
      $adresa = $adr;
    }
      else
    {
      $adresa = stripslashes(htmlspecialchars($_SERVER["QUERY_STRING"], ENT_QUOTES));
    }

    $this->captchakod[$adresa]["id"] = $idcaptcha;
    $this->captchakod[$adresa]["captcha"] = $captcha;
    $this->captchakod[$adresa]["slovo"] = $slovo;
  }
  else
    {
      $adresa = $_GET[$this->adresa_sekce]; //full one vypis
      if ($res = @$this->sqlite->query("SELECT obsah, nazev, rewrite
                                        FROM obsah_sablony
                                        WHERE
                                        rewrite='{$adresa}';", NULL, $error))
      {
        if ($res->numRows() == 1)
        {
          $data = $res->fetchObject();

          $obsahpole = explode("|-x-|", $data->obsah);

          $vypis = array("array_args");
          for ($i = 0; $i < count($obsahpole); $i++)
          {
            if (count(explode("||--x--||", $obsahpole[$i])) == 5)
            {
              $obr = explode("||--x--||", $obsahpole[$i]);
              $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$obr[0]}";
              $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$obr[0]}";
            }
              else
            {
              $vypis[] = $obsahpole[$i];
            }
          }

          $result = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_full_{$tvar}"], $vypis);
        }
          else
        {
          //if ($this->vypis_chybu)
          //{
            $result = $this->NactiUnikatniObsah($this->unikatni["normal_vypis_full_error_{$tvar}"]);
          //}
        }
      }
        else
      {
        $this->var->main[0]->ErrorMsg($error);
      }
    }
//$this->var->main[0]->NactiFunkci("DynamicForm", "NactiCaptchu", "adresa", 1, $captcha, $slovo);
/**
 *
 * Vrati cislo pro pocet zobrazeni novinek v rychlo vypisu
 *
 * @param adresa adresa sablony
 * @return cislo pro limit
 */
  private function RychloVypisLimit($adresa)
  {
    $result = 0;
    if ($res = @$this->sqlite->query("SELECT nove
                                      FROM sablona
                                      WHERE
                                      adresa='{$adresa}';", NULL, $error))
    {
      if ($res->numRows() == 1)
      {
        $data = $res->fetchObject();
        $result = $data->nove;
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }
/**
 *
 * Rychlo vypis pro strucne zobrazeni napr. na uvodu
 *
 * pouziti: <strong>$text = $this->var->main[0]->NactiFunkci("DynamicNavstevniKniha", "RychloVypis"[, "adresa", 1]);</strong>
 * pro vice polozek do adresa zapsat sablony: array("adresa", "adresa1")
 * razeni a pocet novych bere podle prvniho v poli!
 *
 * @param adr adresa sablony
 * @param tvar cislo tvaru
 * @return dany pocet polozek obsahu
 */
  public function RychloVypis($adr = NULL, $tvar = 1)
  {
    if (!Empty($adr))
    {
      if (is_array($adr))
      {
        $uvoz = "";
        for ($i = 0; $i < count($adr); $i++)
        {
          $uvoz[] .= "'{$adr[$i]}'";
        }
        $uvoz = implode(", ", $uvoz);
        $adresa = " IN ({$uvoz})";
        $podm_adresa = $adr[0];
      }
        else
      {
        $adresa = "='{$adr}'";
        $podm_adresa = $adr;
      }
    }
      else
    {
      $adr = stripslashes(htmlspecialchars($_SERVER["QUERY_STRING"], ENT_QUOTES));
      $adresa = "='{$adr}'";
      $podm_adresa = $adr;
    }

    $razeni = $this->RychloVypisRazeni($podm_adresa);  //vrati smer razeni
    $limit = $this->RychloVypisLimit($podm_adresa);  //vrati pocet polozek v rychlo vypisu

    $prvni = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_prvni_{$tvar}"]);
    $posledni = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_posledni_{$tvar}"]);
    $ente_def_array = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_ente_def_array_{$tvar}"]);
    $ente_def = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_ente_def_{$tvar}"]);
    $ente_od = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_ente_od_{$tvar}"]);
    $ente_po = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_ente_po_{$tvar}"]);
    $ente = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_ente_{$tvar}"]);

    $result = "";
    if ($res = @$this->sqlite->query("SELECT obsah_sablony.nazev nazev,
                                      obsah_sablony.rewrite rewrite,
                                      obsah_sablony.obsah obsah
                                      FROM sablona, obsah_sablony
                                      WHERE
                                      sablona.id=obsah_sablony.sablona AND
                                      sablona.adresa{$adresa}
                                      ORDER BY obsah_sablony.pridano {$razeni}
                                      LIMIT 0,{$limit};", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        $i = 0;
        while ($data = $res->fetchObject())
        {
          $obsahpole = explode("|-x-|", $data->obsah);

          $vypis = array("array_args",
                        $this->absolutni_url,
                        $data->rewrite,
                        $data->nazev,
                        (!Empty($data->rewrite) && $_GET[$this->var->get_kam] == $data->rewrite ? $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_oznaceni_{$tvar}"]) : ""),
                        ($i == 0 ? $prvni : ""),
                        ($i == ($res->numRows() - 1) ? $posledni : ""),
                        (in_array($i, $ente_def_array) ? $ente_def : ""),
                        ((($i + $ente_od) % $ente_po) == 0 ? $ente : ""));

          for ($j = 0; $j < count($obsahpole); $j++)
          {
            if (count(explode("||--x--||", $obsahpole[$j])) == 5)
            {
              $obr = explode("||--x--||", $obsahpole[$j]);
              $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$obr[0]}";
              $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$obr[0]}";
            }
              else
            {
              $vypis[] = $obsahpole[$j];
            }
          }

          $result .= $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_{$tvar}"], $vypis);
          $i++;
        }
      }
        else
      {
        if ($this->vypis_chybu)
        {
          $result = $this->NactiUnikatniObsah($this->unikatni["normal_rychlo_vypis_null_{$tvar}"]);
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }

  //++prednacteni captcha kodu!!!!!
  /**
 *
 * Presnacteni captcha kodu pro formular
 *
 * pouziti: <strong>$this->var->main[0]->NactiFunkci("DynamicNavstevniKniha", "NactiCaptchu"[, 1, $captcha, $slovo]);</strong>
 *
 * @param adr adresa formulare
 * @param idcaptcha cislo id captcha kodu
 * @param captcha polo formular captcha
 * @param slovo vysledne slovo captcha
 */
  public function NactiCaptchu($adr = NULL, $idcaptcha, $captcha, $slovo)
  {
    if (!Empty($adr))
    {
      $adresa = $adr;
    }
      else
    {
      $adresa = stripslashes(htmlspecialchars($_SERVER["QUERY_STRING"], ENT_QUOTES));
    }

    $this->captchakod[$adresa]["id"] = $idcaptcha;
    $this->captchakod[$adresa]["captcha"] = $captcha;
    $this->captchakod[$adresa]["slovo"] = $slovo;
  }
/**
 *nevyuzije se!!
 * Vypise pole typu dane sablony
 *
 * @param adresa adresa sablony
 * @return pole typu
 */
  private function VypisTypySablony($adresa)
  {
    $result = "";
    $typelementu = array_keys($this->element);
    if ($res = @$this->sqlite->query("SELECT element_kniha.typ typ
                                      FROM sablona_kniha, element_kniha
                                      WHERE sablona_kniha.id=element_kniha.sablona AND
                                      sablona_kniha.adresa='{$adresa}'
                                      ORDER BY element_kniha.poradi ASC;", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        while($data = $res->fetchObject())
        {
          $result[] = $typelementu[$data->typ];  //textove oznaceni typu
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }
//"{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$obr[0]}";
              //$vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$obr[0]}";
/*
              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_nadpis"],
                                                    $data->nazev,


                                                    $data->id,
                                                    $value,
                                                    " onfocus=\"this.value=(this.value == '{$value}' ? '' : this.value);\" onblur=\"this.value=(this.value == '' ? '{$value}' : this.value);\"",
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $poradielem);
*/
/*
              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_popisek"],
                                                    $data->nazev,
                                                    $data->id,
                                                    $value,
                                                    " onfocus=\"this.value=(this.value == '{$value}' ? '' : this.value);\" onblur=\"this.value=(this.value == '' ? '{$value}' : this.value);\"",
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $poradielem,
                                                    ($data->skryt_obsah ? $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_skryt_obsah"], $data->id, "") : ""),
                                                    $sablona);
*/
/*
            case "text": //text
              $podminka[$i]["chyba_form"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_hidden"], $data->id, $_POST["elem_{$data->id}"]);
              $value = (!Empty($_POST["elem_{$data->id}"]) ? $_POST["elem_{$data->id}"] : $data->value);

              $vypis[] = $data->id;
              $vypis[] = " name=\"elem_{$data->id}\"";
              $vypis[] = $value;
              $vypis[] = " onfocus=\"this.value=(this.value == '{$value}' ? '' : this.value);\" onblur=\"this.value=(this.value == '' ? '{$value}' : this.value);\"";
              $vypis[] = $input_id;
              $vypis[] = $input_class;
              $vypis[] = $input_akce;
              $vypis[] = ($data->povinne ? $this->znacka_povinne : "");


              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_text"],
                                                    $data->nazev,
                                                    $data->id,
                                                    $value,
                                                    " onfocus=\"this.value=(this.value == '{$value}' ? '' : this.value);\" onblur=\"this.value=(this.value == '' ? '{$value}' : this.value);\"",
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $poradielem);

            break;
*/
/*
              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_captcha"],
                                                    $data->nazev,
                                                    $data->id,
                                                    $data->value,
                                                    $slovo,
                                                    $captcha,
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $poradielem);
*/
/*
              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_datum"],
                                                    $data->nazev,
                                                    $data->id,
                                                    date($data->vystupni_format),//$data->value,
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $data->vystupni_format,
                                                    date($data->vystupni_format),
                                                    $poradielem);
*/
/*
            case "cas": //cas

              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_cas"],
                                                    $data->nazev,
                                                    $data->id,
                                                    date($data->vystupni_format),//$data->value,
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $data->vystupni_format,
                                                    date($data->vystupni_format),
                                                    $poradielem);
            break;

            case "datumcas": //datumcas

              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_datumcas"],
                                                    $data->nazev,
                                                    $data->id,
                                                    date($data->vystupni_format),//$data->value,
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    $data->vystupni_format,
                                                    date($data->vystupni_format),
                                                    $poradielem);
            break;
*/
/*
              $element .= $this->NactiUnikatniObsah($this->unikatni["admin_addeditobsah_checkbox"],
                                                    $data->nazev,
                                                    $data->id,
                                                    (!Empty($data->value) ? " value=\"{$val}\"" : ""),
                                                    $input_id,
                                                    $input_class,
                                                    $input_akce,
                                                    $povinne,
                                                    "",
                                                    $poradielem);
*/
/**
 *
 * Vrati nazvy polozek v poli
 *
 * @param adresa adresa sablony
 * @return pole polozek
 */
  private function PolozkySablony($adresa)
  {
    $result = "";
    if ($res = @$this->sqlite->query("SELECT element.nazev nazev
                                      FROM sablona, element
                                      WHERE
                                      sablona.id=element.sablona AND
                                      sablona.adresa='{$adresa}';", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        while($data = $res->fetchObject())
        {
          $result[] = $data->nazev;
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }
  /**
 *
 * Vrati nazvy polozek v poli
 *
 * @param adresa adresa sablony
 * @return pole polozek
 */
  private function PolozkySablony($adresa)
  {
    $result = "";
    if ($res = @$this->sqlite->query("SELECT element.nazev nazev
                                      FROM sablona, element
                                      WHERE
                                      sablona.id=element.sablona AND
                                      sablona.adresa='{$adresa}';", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        while($data = $res->fetchObject())
        {
          $result[] = $data->nazev;
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error);
    }

    return $result;
  }

["admin_slovo_2_vysledek"]=>
  array(2) {
    [0]=>
    string(3) "9-3"
    [1]=>
    int(6)
  }

  ["slovo_2_vysledek"]=>
  array(2) {
    [0]=>
    string(3) "6+2"
    [1]=>
    int(8)
  }

  ["slovo_2_solve"]=>
  int(18)

  ["slovo_2_solve_vysledek"]=>
  int(-4)

  ["admin_slovo_2_solve_vysledek"]=>
  int(18)
-----------------------------------------
array(6) {
  ["slovo_1"]=>
  &array(2) {
    [0]=>
    string(3) "4-5"
    [1]=>
    int(-1)
  }

  ["slovo_1_vysledek"]=>
  &array(2) {
    [0]=>
    string(3) "5-0"
    [1]=>
    int(5)
  }

  ["slovo_1_solve"]=>
  &int(-1)

  ["slovo_1_solve_vysledek"]=>
  &int(11)

  ["admin_slovo_1_solve_vysledek"]=>
  &int(-2)
<br />
              barva pozadí: #<input type=\"text\" name=\"pozadi\" value=\"\" />*<br />
               &&
              !Empty($pozadi)
!Empty($pozadi) &&


DROP TABLE sablona_kniha;
CREATE TABLE sablona_kniha (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      adresa TEXT,
                                      razeni VARCHAR(50),
                                      nove_rss INTEGER UNSIGNED,
                                      nazev VARCHAR(200),
                                      popisek TEXT,
                                      href_id VARCHAR(200),
                                      href_class VARCHAR(200),
                                      href_akce VARCHAR(500),
                                      zobrazit BOOL);
INSERT INTO sablona_kniha (id, adresa, razeni, nove_rss, nazev, popisek, href_id, href_class, href_akce, zobrazit) VALUES ('1', 'adresa', 'DESC', '5', 'pokusná kniha', 'popisek...', '', '', '', '1');
DROP TABLE obsah_sablony_kniha;
CREATE TABLE obsah_sablony_kniha (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      sablona INTEGER UNSIGNED,
                                      obsah TEXT,
                                      pridano DATETIME,
                                      zobrazit BOOL,
                                      admin BOOL);
INSERT INTO obsah_sablony_kniha (id, sablona, obsah, pridano, zobrazit) VALUES ('2', '1', '0||--x--||lojzik|-x-|0||--x--||email@email.cz|-x-|2|-x-|bleeee a bleee', '2009-07-16 15:00:27', '1');
INSERT INTO obsah_sablony_kniha (id, sablona, obsah, pridano, zobrazit) VALUES ('3', '1', '0||--x--||fds|-x-|0||--x--||email@email.cz|-x-|2|-x-|hvííííííííííííí', '2009-07-16 17:18:56', '1');
INSERT INTO obsah_sablony_kniha (id, sablona, obsah, pridano, zobrazit) VALUES ('4', '1', '0||--x--||dasff|-x-|0||--x--||email@email.cz|-x-|2|-x-|dsf as d sad sad', '2009-07-16 17:46:22', '1');
INSERT INTO obsah_sablony_kniha (id, sablona, obsah, pridano, zobrazit) VALUES ('5', '1', '0||--x--||okdoksd|-x-|0||--x--||email@email.cz|-x-|2|-x-|dfsd fdsf dsf sdf dsf', '2009-07-16 17:46:59', '1');
INSERT INTO obsah_sablony_kniha (id, sablona, obsah, pridano, zobrazit) VALUES ('6', '1', '0||--x--||sasad|-x-|1||--x--||email@email.cz|-x-|2|-x-|sdsdsd', '2009-07-16 18:06:29', '1');
DROP TABLE element_kniha;
CREATE TABLE element_kniha (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      sablona INTEGER UNSIGNED,
                                      typ INTEGER UNSIGNED,
                                      nazev VARCHAR(200),
                                      value VARCHAR(200),
                                      input_id VARCHAR(200),
                                      input_class VARCHAR(200),
                                      input_akce VARCHAR(200),
                                      povinne BOOL,
                                      skryt_obsah BOOL,
                                      vstupni_typ INTEGER UNSIGNED,
                                      reg_exp VARCHAR(500),
                                      vystupni_format VARCHAR(200),
                                      min_val INTEGER UNSIGNED,
                                      max_val INTEGER UNSIGNED,
                                      poradi INTEGER UNSIGNED);
INSERT INTO element_kniha (id, sablona, typ, nazev, value, input_id, input_class, input_akce, povinne, skryt_obsah, vstupni_typ, reg_exp, vystupni_format, min_val, max_val, poradi) VALUES ('1', '1', '1', 'jméno', '', '', '', '', '1', '0', '0', '', '', '0', '0', '1');
INSERT INTO element_kniha (id, sablona, typ, nazev, value, input_id, input_class, input_akce, povinne, skryt_obsah, vstupni_typ, reg_exp, vystupni_format, min_val, max_val, poradi) VALUES ('2', '1', '1', 'email', 'zadej email', '', '', '', '1', '1', '2', '/^[_a-zA-Z0-9\.\-]+@[_a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,4}$/', '', '0', '0', '2');
INSERT INTO element_kniha (id, sablona, typ, nazev, value, input_id, input_class, input_akce, povinne, skryt_obsah, vstupni_typ, reg_exp, vystupni_format, min_val, max_val, poradi) VALUES ('3', '1', '3', 'captcha kod', '2', '', '', '', '1', '0', '0', '', '', '0', '0', '3');
INSERT INTO element_kniha (id, sablona, typ, nazev, value, input_id, input_class, input_akce, povinne, skryt_obsah, vstupni_typ, reg_exp, vystupni_format, min_val, max_val, poradi) VALUES ('4', '1', '2', 'text', '', '', '', '', '1', '0', '0', '', '', '0', '0', '4');

array("include" => "modules/dynamicky_lang_obsah/lang_obsah.php",
                                  "class" =>  "DynamicLanguageObsah",
                                  "admin" => true,
                                  "databaze" => ".dbdynlangobsah.sqlite2",
                                  "zobrazit" => true,
                                  "uloziste" => "sqlite"),

array("include" => "modules/dynamic_lang_cykl_obsah/lang_cykl_obsah.php",
                                  "class" =>  "DynamicLanguageCyklObsah",
                                  "admin" => true,
                                  "databaze" => ".dbdynlangcyklobsah.sqlite2",
                                  "zobrazit" => true,
                                  "uloziste" => "sqlite"),
"<br />
          <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}\" title=\"\">zavřít konfiguraci [X]</a><br />
          <form method=\"post\">
            <fieldset>
              mini:<br />
              <input type=\"radio\"".($w_mini != 0 ? " checked=\"checked\"" : "")." name=\"mini\" onclick=\"mini_1();\">dopocitat vysku<br />
              width mini: <input type=\"text\" name=\"w_mini\" id=\"mini1_p1\" value=\"{$w_mini}\" /> px<br />
              <br />
              <input type=\"radio\"".($h_mini != 0 ? " checked=\"checked\"" : "")." name=\"mini\" onclick=\"mini_2();\">dopocitat sirku<br />
              height mini: <input type=\"text\" name=\"h_mini\" id=\"mini2_p1\" value=\"{$h_mini}\" /> px<br />
              <br />
              <input type=\"radio\"".($w_mini != 0 && $h_mini != 0 ? " checked=\"checked\"" : "")." name=\"mini\" onclick=\"mini_3();\">nastaveno napevno<br />
              width mini: <input type=\"text\" name=\"w_mini\" id=\"mini3_p1\" value=\"{$w_mini}\" /> px<br />
              height mini: <input type=\"text\" name=\"h_mini\" id=\"mini3_p2\" value=\"{$h_mini}\" /> px<br />
              <br />
              <br />
              full:<br />
              <input type=\"radio\"".($w_full != 0 ? " checked=\"checked\"" : "")." name=\"full\" onclick=\"full_1();\">dopocitat vysku<br />
              width full: <input type=\"text\" name=\"w_full\" id=\"full1_p1\" value=\"{$w_full}\" /> px<br />
              <br />
              <input type=\"radio\"".($h_full != 0 ? " checked=\"checked\"" : "")." name=\"full\" onclick=\"full_2();\">dopocitat sirku<br />
              height full: <input type=\"text\" name=\"h_full\" id=\"full2_p1\" value=\"{$h_full}\" /> px<br />
              <br />
              <input type=\"radio\"".($w_full != 0 && $h_full != 0 ? " checked=\"checked\"" : "")." name=\"full\" onclick=\"full_3();\">nastaveno napevno<br />
              width full: <input type=\"text\" name=\"w_full\" id=\"full3_p1\" value=\"{$w_full}\" /> px<br />
              height full: <input type=\"text\" name=\"h_full\" id=\"full3_p2\" value=\"{$h_full}\" /> px<br />
              <br />
              <input type=\"radio\"".($w_full == 0 && $h_full == 0 ? " checked=\"checked\"" : "")." name=\"full\" onclick=\"full_4();\">originální velikost<br />
              width full: <input type=\"text\" name=\"w_full\" id=\"full4_p1\" value=\"0\" disabled=\"disabled\" /> px<br />
              height full: <input type=\"text\" name=\"h_full\" id=\"full4_p2\" value=\"0\" disabled=\"disabled\" /> px<br />
              <br />
              <br />
              limit:<br />
              <input type=\"radio\"".($limit != 0 ? " checked=\"checked\"" : "")." name=\"lim\" onclick=\"lim_1();\">dany limit<br />
              limit upload: <input type=\"text\" name=\"limit\" id=\"lim_p1\" value=\"{$limit}\" /> MB<br />
              <br />
              <input type=\"radio\"".($limit == 0 ? " checked=\"checked\"" : "")." name=\"lim\" onclick=\"lim_2();\">neomezeny (do limitu php def.nastaveni)<br />
              <br />
              volba řazeni:<br />
              sekce<br />
              <input type=\"radio\" name=\"razeni1\" value=\"1\"".($razeni1 == 1 ? " checked=\"checked\"" : "")." />datum ASC<br />
              <input type=\"radio\" name=\"razeni1\" value=\"2\"".($razeni1 == 2 ? " checked=\"checked\"" : "")." />datum DESC<br />
              <input type=\"radio\" name=\"razeni1\" value=\"3\"".($razeni1 == 3 ? " checked=\"checked\"" : "")." />název ASC<br />
              <input type=\"radio\" name=\"razeni1\" value=\"4\"".($razeni1 == 4 ? " checked=\"checked\"" : "")." />název DESC<br />
              <br />
              obrázky<br />
              <input type=\"radio\" name=\"razeni2\" value=\"1\"".($razeni2 == 1 ? " checked=\"checked\"" : "")." />datum ASC<br />
              <input type=\"radio\" name=\"razeni2\" value=\"2\"".($razeni2 == 2 ? " checked=\"checked\"" : "")." />datum DESC<br />
              <input type=\"radio\" name=\"razeni2\" value=\"3\"".($razeni2 == 3 ? " checked=\"checked\"" : "")." />popisek ASC<br />
              <input type=\"radio\" name=\"razeni2\" value=\"4\"".($razeni2 == 4 ? " checked=\"checked\"" : "")." />popisek DESC<br />
              <br />
              <input type=\"submit\" name=\"tlacitko\" value=\"uložit konfiguraci\" />
            </fieldset>
          </form>

          <script type=\"text/javascript\">
            function mini_1()
            {
              document.getElementById('mini1_p1').disabled = false;
              document.getElementById('mini2_p1').disabled = true;
              document.getElementById('mini3_p1').disabled = true;
              document.getElementById('mini3_p2').disabled = true;
            }

            function mini_2()
            {
              document.getElementById('mini1_p1').disabled = true;
              document.getElementById('mini2_p1').disabled = false;
              document.getElementById('mini3_p1').disabled = true;
              document.getElementById('mini3_p2').disabled = true;
            }

            function mini_3()
            {
              document.getElementById('mini1_p1').disabled = true;
              document.getElementById('mini2_p1').disabled = true;
              document.getElementById('mini3_p1').disabled = false;
              document.getElementById('mini3_p2').disabled = false;
            }

            function full_1()
            {
              document.getElementById('full1_p1').disabled = false;
              document.getElementById('full2_p1').disabled = true;
              document.getElementById('full3_p1').disabled = true;
              document.getElementById('full3_p2').disabled = true;
            }

            function full_2()
            {
              document.getElementById('full1_p1').disabled = true;
              document.getElementById('full2_p1').disabled = false;
              document.getElementById('full3_p1').disabled = true;
              document.getElementById('full3_p2').disabled = true;
            }

            function full_3()
            {
              document.getElementById('full1_p1').disabled = true;
              document.getElementById('full2_p1').disabled = true;
              document.getElementById('full3_p1').disabled = false;
              document.getElementById('full3_p2').disabled = false;
            }

            function full_4()
            {
              document.getElementById('full1_p1').disabled = true;
              document.getElementById('full2_p1').disabled = true;
              document.getElementById('full3_p1').disabled = true;
              document.getElementById('full3_p2').disabled = true;
            }

            function lim_1()
            {
              document.getElementById('lim_p1').disabled = false;
            }

            function lim_2()
            {
              document.getElementById('lim_p1').disabled = true;
            }

            ".($w_mini != 0 && $h_mini != 0 ? "mini_3();" : ($h_mini != 0 ? "mini_2();" : ($w_mini != 0 ? "mini_1();" : "")))."
            ".($w_full == 0 && $h_full == 0 ? "full_4();" : ($w_full != 0 && $h_full != 0 ? "full_3();" : ($h_full != 0 ? "full_2();" : ($w_full != 0 ? "full_1();" : ""))))."
            ".($limit == 0 ? "lim_2();" : "lim_1();")."
          </script>
          ";
UPDATE skupina SET defaultni=0;
                                              UPDATE skupina SET defaultni='{$defaultni}' WHERE id={$id};

UPDATE skupina SET defaultni=0;
                                          UPDATE skupina SET defaultni={$defaultni} WHERE id={$id};
                                              switch ($this->ValueConfig(7))  //predelat!!
    {
      case 1:
        $order = "skupina.datum ASC";
      break;

      case 2:
        $order = "skupina.datum DESC";
      break;

      case 3:
        $order = "LOWER(skupina.nazev) ASC";
      break;

      case 4:
        $order = "LOWER(skupina.nazev) DESC";
      break;

      default:
        $order = "skupina.datum ASC";
      break;
    }
"<br />
-------------------------------------------------------------------------------
          <br />
          {$data->nazev} - {$data->rewrite} {$datum}<p>{$data->popis}</p>
          defaultni <input type=\"checkbox\" name=\"defaultni\"".($data->defaultni ? " checked=\"checked\"" : "")." disabled /><br />
          <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=addpict&amp;skupina={$data->id}\" title=\"\">přidat obrázek do této skupiny</a>
          <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editgrup&amp;id={$data->id}\" title=\"\">upravit skupinu</a>
          <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=delgrup&amp;id={$data->id}\" title=\"\" onclick=\"return confirm('Opravdu smazat: \'{$data->nazev}\' ?');\">smazat skupinu</a><br />
          ";
   switch ($this->ValueConfig(8))  //predelat!
          {
            case 1:
              $order = "picture_gallery.datum ASC";
            break;

            case 2:
              $order = "picture_gallery.datum DESC";
            break;

            case 3:
              $order = "LOWER(picture_gallery.popisek) ASC";
            break;

            case 4:
              $order = "LOWER(picture_gallery.popisek) DESC";
            break;

            default:
              $order = "picture_gallery.datum ASC";
            break;
          }
"<br />
*******************************************************************************
                <br />
                {$datum1}<p>{$data1->popisek}</p>
                <a href=\"{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$data1->url}\" title=\"{$data1->popisek}\"><img src=\"{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$data1->url}\" alt=\"{$data1->popisek}\" /></a><br />
                <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editpict&amp;id={$data1->id}\" title=\"\">upravit obrazek</a>
                <a href=\"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=delpict&amp;id={$data1->id}\" title=\"\" onclick=\"return confirm('Opravdu smazat: \'{$data1->popisek}\' ?');\">smazat obrázek</a> <br />

                ";
//date($this->NactiUnikatniObsah($this->unikatni["normal_datum_{$tvar}"]), strtotime(stripslashes($data->datum))),
/*
        case "usergui": //nastaveni registrace
          $result = $this->NactiUnikatniObsah($this->unikatni["admin_set_user_gui"]);
        break;
*/
    public $ente_ozn_od = 0;  //pocitat od cisla
    public $ente_ozn_po = 2;  //poctat po cisle
    public $ente_definovane = false;  //indikuje zda brat linearne a nebo volitelne
    public $ente_ozn_def = array(1, 4, 7);  //definovane oznacovani
array("nazev" => "enté označování počátek",
                                  "popis" => "počáteční číslo označování menu v adminu",
                                  "name" => "ente_ozn_od",
                                  "type" => "text", //text/checkbox
                                  ),

                            array("nazev" => "enté označování průběh",
                                  "popis" => "opakovací číslo označování menu v adminu",
                                  "name" => "ente_ozn_po",
                                  "type" => "text", //text/checkbox
                                  ),

                            array("nazev" => "zapínáná definovaného označování",
                                  "popis" => "aktivace definovaného označování v menu adminu",
                                  "name" => "ente_definovane",
                                  "type" => "checkbox", //text/checkbox
                                  ),

                            array("nazev" => "čísla definovaného označování",
                                  "popis" => "čísla definovaného označování v menu adminu",
                                  "name" => "ente_ozn_def",
                                  "type" => "text", //text/checkbox
                                  ),
    public $ente_ozn_od = %%ente_ozn_od%%;  //pocitat od cisla
    public $ente_ozn_po = %%ente_ozn_po%%;  //poctat po cisle
    public $ente_definovane = %%ente_definovane%%;  //indikuje zda brat linearne a nebo volitelne
    public $ente_ozn_def = array(%%ente_ozn_def%%);  //definovane oznacovani
//var_dump("tu: {$datum}, depozit: {$zprava_datum}, rovna se: ".($datum == $zprava_datum)."<br />");
/*
                      $sloup = "";
                      for ($i = 0; $i < count($sloupce); $i++)
                      {
                        $sloup .=
                        "{$sloupce[$i]}, ";
                      }
                      $sloup = substr($sloup, 0, -2);
*/
/*
$abeceda = array ("&lt;/h3&gt;",  //konec
                  "&lt;h3", //zacatek
                  //"&gt;",
                  );

$vstup = $data->text;
for ($i = 0; $i < count($abeceda); $i++)
{
  $vystup[$i] = explode($abeceda[$i], $vstup);
}
*
email:

/^[_a-zA-Z0-9\.\-]+@[_a-zA-Z0-9\.\-]+\.[a-zA-Z]{2,4}$/

telefon:

/^(\+420)?[0-9]{9}$/
*/
//$text = htmlspecialchars_decode(html_entity_decode($data->text));
//$text = $data->text;
//var_dump($data->text);
//print_r($text);
//var_dump(iconv("UTF-8", "UTF-8", $text[5].$text[6]));
//var_dump(ord($text[38]), ord($text[39]), ord("í"));

/*
  $abeceda = array (array("<", "h", "3"),
                    array("<", "/", "h", "3", ">"));
var_dump($abeceda);
*/

/*
  //priprava abecedy
  for ($i = 0; $i < count($abeceda); $i++)
  {
    $prvni[$i] = $abeceda[$i][0];
  }
*/
//var_dump($prvni);

/*
  $abeceda = array ("<h3", //zacatek
                    "</h3>",  //konec
                    "<p>",
                    "</p>",
                    //">",
                    );

  $vstup = htmlspecialchars_decode(html_entity_decode($data->text));
  for ($i = 0; $i < count($abeceda); $i++)
  {
    $vstup = implode("++{$i}++", preg_split("[{$abeceda[$i]}]", $vstup));

    //for ($j = 0; $i < count($vysledek); $j++)
    //{
      //$vysledek[$j] = preg_split("[{$abeceda[$i]}]", $vysledek[$j]);
    //}

  }
print_r($vstup);
*/

  $text = htmlspecialchars_decode(html_entity_decode($data->text));

  $pole_text = str_split($text, 1);
//print_r($pole_text);
  $pol[0]["typ"] = "h3";
  $pol[0]["begin"] = 10;
  $pol[0]["end"] = 20;

  $abeceda = array (array("typ" => "nadpis3",
                          "begin1" => "<h3",
                          "end1" => ">",
                          "begin2" => "</h3>",
                          "end2" => "",
                          "data1" => array("end1", "begin2"),
                          "data2" => "",),

                    array("typ" => "odkaz",
                          "begin1" => "<a href=\"",
                          "end1" => "\"",
                          "begin2" => ">",
                          "end2" => "</a>",
                          "data1" => array("begin1", "end1"),
                          "data2" => array("begin2", "end2"),),

                    array("typ" => "odstavec",
                          "begin1" => "<p",
                          "end1" => ">",
                          "begin2" => "</p>",
                          "end2" => "",
                          "data1" => array("end1", "begin2"),
                          "data2" => "",),
                          );
//print_r($abeceda);
  for ($i = 0; $i < count($pole_text); $i++)
  {
    if ($pole_text[$i] == "<")
    {
      if ($this->PorovnejPole($pole_text, $i, $abeceda[0]))
      {
        //var_dump($i);
      }

      for ($j = 0; $j < count($abeceda); $j++)
      {

        //$pospoc = 0;
        //var_dump($pole_text[$i], $i);
/*
        for ($k = $i; $k < count($abeceda[$j]); $k++)
        {
          var_dump($pole_text[$k], $k, $i);
          if ($pole_text[$k] == $abeceda[$j][$pospoc])
          {
            //var_dump($pospoc, count($abeceda[$j]));
            if ($pospoc == (count($abeceda[$j]) - 1))
            {
              //var_dump($k);
              break;
            }
          }
          $pospoc++;
        }
*/
      }
    }
  }

//var_dump($pole_text);

/*
for ($i = 0; $i <= 245; $i++)
{
  $vysl .= $pole_text[$i];
}
var_dump($vysl);
*/

/*
$vystup = preg_split("(<h3(( class=\"(.*)\")|( id=\"(.*)\"))?>|<\/h3>)", $text);
$vystup = preg_split("(<p(( class=\"(.*)\")|( id=\"(.*)\"))?>|<\/p>)", $text);
$vystup = preg_split("(<a href=\"(.*)\"(( class=\"(.*)\")|( id=\"(.*)\"))?>|<\/a>)", $text);
$vystup = preg_split("(<a href=\"|\">(.*)<\/a>)", $text);

$vystup = preg_split("(<img src=\"(.*)\"(( class=\"(.*)\")|( id=\"(.*)\"))? \/>)", $text);
*/


/*
$poc = 0;
$h3 = preg_split("(<h3(( class=\"(.*)\")|( id=\"(.*)\"))?>|<\/h3>)", $text, NULL, PREG_SPLIT_OFFSET_CAPTURE);
for ($i = 0; $i < count($h3); $i++)
{
  if ((($i + 1) % 2) == 0)
  {
    $parser[$poc]["typ"] = "h3";
    $parser[$poc]["text"] = $h3[$i][0];
    $parser[$poc]["od"] = $h3[$i][1];
    $poc++;
  }
}

$p = preg_split("(<p(( class=\"(.*)\")|( id=\"(.*)\"))?>|<\/p>)", $text, NULL, PREG_SPLIT_OFFSET_CAPTURE);
for ($i = 0; $i < count($p); $i++)
{
  if ((($i + 1) % 2) == 0)
  {
    $parser[$poc]["typ"] = "p";
    $parser[$poc]["text"] = $p[$i][0];
    $parser[$poc]["od"] = $p[$i][1];
    $poc++;
  }
}

$href = preg_split("(<a href=\"(.*)\"(( class=\"(.*)\")|( id=\"(.*)\"))?>|<\/a>)", $text, NULL, PREG_SPLIT_OFFSET_CAPTURE);
for ($i = 0; $i < count($href); $i++)
{
  if ((($i + 1) % 2) == 0)
  {
    $parser[$poc]["typ"] = "href";
    $parser[$poc]["text"] = $href[$i][0];
    $parser[$poc]["od"] = $href[$i][1];
    $poc++;
  }
}

$linkhref = preg_split("(<a href=\"|\"(( title=\"(.*)\")|( class=\"(.*)\")|( id=\"(.*)\"))?>(.*)<\/a>)", $text, NULL, PREG_SPLIT_OFFSET_CAPTURE);
for ($i = 0; $i < count($linkhref); $i++)
{
  if ((($i + 1) % 2) == 0)
  {
    $parser[$poc]["typ"] = "linkhref";
    $parser[$poc]["text"] = $linkhref[$i][0];
    $parser[$poc]["od"] = $linkhref[$i][1];
    $poc++;
  }
}

$titlehref = preg_split("(<a href=\"(.*)\" title=\"|\"(( class=\"(.*)\")|( id=\"(.*)\"))?>(.*)<\/a>)", $text, NULL, PREG_SPLIT_OFFSET_CAPTURE);
for ($i = 0; $i < count($linkhref); $i++)
{
  if ((($i + 1) % 2) == 0)
  {
    $parser[$poc]["typ"] = "titlehref";
    $parser[$poc]["text"] = $titlehref[$i][0];
    $parser[$poc]["od"] = $titlehref[$i][1];
    $poc++;
  }
}

$img = preg_split("(<img src=\"|\"(( alt=\"(.*)\")|( class=\"(.*)\")|( id=\"(.*)\"))? \/>)", $text, NULL, PREG_SPLIT_OFFSET_CAPTURE);
for ($i = 0; $i < count($img); $i++)
{
  if ((($i + 1) % 2) == 0)
  {
    $parser[$poc]["typ"] = "img";
    $parser[$poc]["text"] = $img[$i][0];
    $parser[$poc]["od"] = $img[$i][1];
    $poc++;
  }
}
print_r($parser);
*/

//print_r(preg_split("[&lt;h3]", $text)); //, -1, PREG_SPLIT_OFFSET_CAPTURE, PREG_SPLIT_NO_EMPTY, PREG_SPLIT_DELIM_CAPTURE

/*
  for ($i = 0; $i < count($text); $i++)
  {
    for ($j = 0; $j < count($abeceda); $j++)
    {
      for ($k = 0; $k < count($abeceda[$j]); $k++)
      {
        if ($text[$i] == $abeceda[$j][$k])
        {
          var_dump($text[$i], $i);
        }
      }
    }
  }

*/

/*
  for ($i = 0; $i < count($text); $i++)
  {
    for ($j = 0; $j < count($prvni); $j++)
    {
      if ($text[$i] == $prvni[$j])
      {
        for ($k = 0; $k < $abeceda[$j]; $k++)
        {
          if ($abeceda[$j][$k] == $text[$i+$k])
          {
            var_dump($text[$i+$k], $i+$k);
          }
        }
        //var_dump($text[$i], $i);
      }
    }
  }
*/

/*
$vysl = "";
for ($i = 4; $i <= 11; $i++)
{
  $vysl .= $text[$i];
}
var_dump($vysl);
*/

//pamaovat:
//typ, text, zacatek, konec


INSERT INTO prepinani (id, adresa, kod) VALUES ('1', 'action=&sort=a_cena&view=obr&str=0', 'tajný kod tu de vidět :D supr tajný!');
INSERT INTO prepinani (id, adresa, kod) VALUES ('2', '', 'uvodní kod absul:@@1@@');
//$logon = $this->NactiUnikatniObsah($this->unikatni["text_autorizace_logon"]);
    //$logoff = $this->NactiUnikatniObsah($this->unikatni["text_autorizace_logoff"]);
    $absolutni_url = $this->AbsoluteUrl();

    $nextdate = mktime(date("H") + $this->var->admin_expire[0],
                      date("i") + $this->var->admin_expire[1],
                      date("s") + $this->var->admin_expire[2],
                      date("n"), date("j"), date("Y"));

    if ($_GET[$this->var->get_kam] == "logoff")
    {
      unset($_SESSION["ADMIN_USER"]);
      unset($_SESSION["ADMIN_PASS"]);
      unset($_SESSION["ADMIN_TIME"]);

      $this->AutoClick(0, $absolutni_url);
/*
      unset($_SESSION["ADMIN_TIME"]);
      $_SERVER["PHP_AUTH_USER"] = "";
      $_SERVER["PHP_AUTH_PW"] = "";

      header("WWW-Authenticate: Basic realm=\"{$logoff}\"");
      header("HTTP/1.0 401 Unauthorized");

      $this->AutoClick(0, $absolutni_url);
*/
    }

    if ($_GET[$this->var->get_kam] == $this->var->adresaadminu &&
        $_GET["akce"] == "loginclear")
    {
      $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}={$this->var->adresaadminu}");
    }

//var_dump($_POST, $_SESSION, $this->var->aktivniadmin);

    if ($_GET[$this->var->get_kam] == $this->var->adresaadminu)
    {
/*
      if ($this->var->klenot)  //prepnuti pro ziskani dat z klenot
      {
        list($_SERVER["PHP_AUTH_USER"], $_SERVER["PHP_AUTH_PW"]) = explode(":", base64_decode(substr($_SERVER["REDIRECT_REMOTE_USER"], 6)));
      }

      if (Empty($_SERVER["PHP_AUTH_USER"]) && Empty($_SERVER["PHP_AUTH_PW"]))
      {
        header("WWW-Authenticate: Basic realm=\"{$logon}\"");
        header("HTTP/1.0 401 Unauthorized");

        //echo $this->NactiUnikatniObsah($this->unikatni["text_autorizace_meta"], "{$absolutni_url}?{$this->var->get_kam}=logoff");
        exit(0);
      }
*/

      $result = "";
      if (Empty($_SESSION["ADMIN_USER"]) && Empty($_SESSION["ADMIN_PASS"]))
      {
        $result = $this->NactiUnikatniObsah($this->unikatni["form_autorizace_logon"]);
      }

      $login = stripslashes(htmlspecialchars($_POST["login"], ENT_QUOTES));
      $heslo = stripslashes(htmlspecialchars($_POST["heslo"], ENT_QUOTES));

      if (!Empty($_POST["tlacitko_login_admin"]) &&
          !Empty($login) &&
          !Empty($heslo))
      {
        if (!$this->Autorizace($login, $heslo))
        {
          $this->var->aktivniadmin = false;

          unset($_SESSION["ADMIN_USER"]);
          unset($_SESSION["ADMIN_PASS"]);
          unset($_SESSION["ADMIN_TIME"]);

          $this->AutoClick(0, $absolutni_url);
        }
          else
        {
          if ($this->Autorizace($login, $heslo))  //kdyz je prihaseno
          {
            $this->var->aktivniadmin = true;

            $_SESSION["ADMIN_USER"] = $login;
            $_SESSION["ADMIN_PASS"] = $heslo;

            if (!Empty($_POST["login"]))  //uklad po sobe $_POST
            {
              $result = "";

              $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}={$this->var->adresaadminu}&akce=loginclear");
            }

            $_SESSION["ADMIN_TIME"] = $nextdate;
          }
        }
      }
        else
      {
        if ($this->Autorizace($_SESSION["ADMIN_USER"], $_SESSION["ADMIN_PASS"]))
        {
          $this->var->aktivniadmin = true;

          if ($_SERVER["REQUEST_TIME"] > $_SESSION["ADMIN_TIME"])
          {
            unset($_SESSION["ADMIN_USER"]);
            unset($_SESSION["ADMIN_PASS"]);
            unset($_SESSION["ADMIN_TIME"]);

            $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}=logoff");
          }

          $_SESSION["ADMIN_TIME"] = $nextdate;
        }
          else
        {
          $this->var->aktivniadmin = false;
        }
      }

      echo $result;
      //exit(0);


/*
        else
      {
        if (Empty($_SESSION["ADMIN_TIME"])) //zaznamena cas jen po prihlaseni
        {
          $_SESSION["ADMIN_TIME"] = $nextdate;
        }
          else
        {
          if ($_SERVER["REQUEST_TIME"] > $_SESSION["ADMIN_TIME"])
          {
            unset($_SESSION["ADMIN_TIME"]);
            $_SERVER["PHP_AUTH_USER"] = "";
            $_SERVER["PHP_AUTH_PW"] = "";

            $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}=logoff");
          }
        }
      }

      if (!$this->Autorizace($_SERVER["PHP_AUTH_USER"], $_SERVER["PHP_AUTH_PW"])) //je-li spatny login & heslo
      {
        $this->var->aktivniadmin = false;

        unset($_SESSION["ADMIN_TIME"]);
        $_SERVER["PHP_AUTH_USER"] = "";
        $_SERVER["PHP_AUTH_PW"] = "";

        $this->AutoClick(0, $absolutni_url);
      }
        else
      {
        if ($this->Autorizace($_SERVER["PHP_AUTH_USER"], $_SERVER["PHP_AUTH_PW"]))  //kdyz je prihaseno
        {
          $this->var->aktivniadmin = true;


          if ($_SERVER["REQUEST_TIME"] > $_SESSION["ADMIN_TIME"])
          {
            unset($_SESSION["ADMIN_TIME"]);
            $_SERVER["PHP_AUTH_USER"] = "";
            $_SERVER["PHP_AUTH_PW"] = "";

            $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}=logoff");
          }

          $_SESSION["ADMIN_TIME"] = $nextdate;

        }
      }
*/
/*
    if ($_GET[$this->var->get_kam] == $this->var->adresaadminu &&
        $_GET["akce"] == "loginclear")
    {
      $this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}={$this->var->adresaadminu}");
    }
*/

    //$result = "";
    //if (Empty($_SESSION["ADMIN_USER"]) && Empty($_SESSION["ADMIN_PASS"]))
    //if ($_GET[$this->var->get_kam] != $this->var->adresaadminu)
    //{
/*
      $result = $this->NactiUnikatniObsah($this->unikatni["form_autorizace_logon"],
                                          (!Empty($_POST["admin_login"]) &&
                                          !Empty($_POST["admin_heslo"]) &&
                                          !$this->Autorizace($_POST["admin_login"], $_POST["admin_heslo"]) ? " disabled=\"disabled\"" : ""));
*/
    //}

    //if ($_GET[$this->var->get_kam] == $this->var->adresaadminu)
    //{    //}
//$result = "";

            //$this->AutoClick(0, "{$absolutni_url}?{$this->var->get_kam}={$this->var->adresaadminu}&akce=loginclear");
unset($_SESSION["ADMIN_USER"]);
        unset($_SESSION["ADMIN_USERPASS"]);
        unset($_SESSION["ADMIN_TIME"]);
/*
            //generovani nahledu
            $width = $this->NactiUnikatniObsah($this->unikatni["set_nahled_width"]);
            $height = $this->NactiUnikatniObsah($this->unikatni["set_nahled_height"]);
            $im = imagecreatetruecolor($width, $height);
            list($bar1, $bar2, $bar3) = $this->PrevodNaRGB($this->NactiUnikatniObsah($this->unikatni["set_barva_pozadi"]));
            $pozadi = imagecolorallocate($im, $bar1, $bar2, $bar3); //nastaveni barvy
            imagefilledrectangle($im, 0, 0, $width, $height, $pozadi);  //vyplneni pozadi barvou
            list($bar1, $bar2, $bar3) = $this->PrevodNaRGB($this->NactiUnikatniObsah($this->unikatni["set_barva_fontu"]));
            $color_font = imagecolorallocate($im, $bar1, $bar2, $bar3); //nastaveni barvy



            //set_nahled_width_letter
            //set_nahled_height_letter
            $zalomeni = $this->NactiUnikatniObsah($this->unikatni["set_nahled_zalomit"]);

            $pocatek_x = $this->NactiUnikatniObsah($this->unikatni["set_nahled_x"]);
            $posun_x = $this->NactiUnikatniObsah($this->unikatni["set_nahled_width_letter"]);

            $text = str_split($this->NactiUnikatniObsah($this->unikatni["set_nahled_text"]));
*/
//imagettftext($im, $this->NactiUnikatniObsah($this->unikatni["set_nahled_size"]), 0, $this->NactiUnikatniObsah($this->unikatni["set_nahled_x"]), $this->NactiUnikatniObsah($this->unikatni["set_nahled_y"]), $color_font, "./{$this->dirpath}/{$this->dirfont}/{$jmeno}", $this->NactiUnikatniObsah($this->unikatni["set_nahled_text"]));
/*
                  //uprava nahledu
                  $width = $this->NactiUnikatniObsah($this->unikatni["set_nahled_width"]);
                  $height = $this->NactiUnikatniObsah($this->unikatni["set_nahled_height"]);
                  $im = imagecreatetruecolor($width, $height);
                  list($bar1, $bar2, $bar3) = $this->PrevodNaRGB($this->NactiUnikatniObsah($this->unikatni["set_barva_pozadi"]));
                  $pozadi = imagecolorallocate($im, $bar1, $bar2, $bar3); //nastaveni barvy
                  imagefilledrectangle($im, 0, 0, $width, $height, $pozadi);  //vyplneni pozadi barvou
                  list($bar1, $bar2, $bar3) = $this->PrevodNaRGB($this->NactiUnikatniObsah($this->unikatni["set_barva_fontu"]));
                  $color_font = imagecolorallocate($im, $bar1, $bar2, $bar3); //nastaveni barvy
                  //imagettftext($im, $this->NactiUnikatniObsah($this->unikatni["set_nahled_size"]), 0, $this->NactiUnikatniObsah($this->unikatni["set_nahled_x"]), $this->NactiUnikatniObsah($this->unikatni["set_nahled_y"]), $color_font, "./{$this->dirpath}/{$this->dirfont}/{$jmeno}", $this->NactiUnikatniObsah($this->unikatni["set_nahled_text"]));

                  $zalomeni = $this->NactiUnikatniObsah($this->unikatni["set_nahled_zalomit"]);

                  $pocatek_x = $this->NactiUnikatniObsah($this->unikatni["set_nahled_x"]);
                  $pocatek_y = $this->NactiUnikatniObsah($this->unikatni["set_nahled_y"]);

                  $krok_x = $this->NactiUnikatniObsah($this->unikatni["set_nahled_width_letter"]);
                  $krok_y = $this->NactiUnikatniObsah($this->unikatni["set_nahled_height_letter"]);

                  $text = str_split($this->NactiUnikatniObsah($this->unikatni["set_nahled_text"]));
*/
//$this->NactiUnikatniObsah($this->unikatni["set_nahled_height"]) + (ceil($width / count($text)) * $krok_y);
//$this->NactiUnikatniObsah($this->unikatni["set_nahled_width"]);

case 22:  //RGB->CMYK
            $rgb = array(118, 50, 72);
            for ($i = 0; $i < 3; $i++)  //rgb->cmy
            {
              $nahoda = $rgb[$i];
              //$nahoda = rand(0, 255);
              $rgbcislo[] = $nahoda;
              $cmycislo[] = 1 - ($nahoda / 255);
            }
            $cislo = implode(",", $rgbcislo);

            $k = 1;
            if ($cmycislo[0] < $k)  //C
            {
              $k = $cmycislo[0];
            }

            if ($cmycislo[1] < $k)  //M
            {
              $k = $cmycislo[1];
            }

            if ($cmycislo[2] < $k)  //Y
            {
              $k = $cmycislo[2];
            }

            if ($k == 1)  //black
            {
              $cmycislo[0] = 0;
              $cmycislo[1] = 0;
              $cmycislo[2] = 0;
            }
              else
            {
              $cmycislo[0] = ($cmycislo[0] - $k) / (1 - $k);
              $cmycislo[1] = ($cmycislo[1] - $k) / (1 - $k);
              $cmycislo[2] = ($cmycislo[2] - $k) / (1 - $k);
            }
            $cmycislo[3] = $k;

            for ($i = 0; $i < count($cmycislo); $i++)
            {
              $cmykcislo[] = round($cmycislo[$i] * 100, 0);
            }

            $result[0] = $this->NactiUnikatniObsah($this->unikatni["admin_captcha_22"], $cislo);
            $result[1] = implode(",", $cmykcislo);
          break;

          case 23:  //CMYK->RGB
            for ($i = 0; $i < 3; $i++)
            {
              $rgbcislo[] = rand(0, 255);
            }
            $cislo = implode(",", $rgbcislo);

            for ($i = 0; $i < count($rgbcislo); $i++)
            { //osetreni kdyz je cislo mensi nez 16 tak pridava 0
              $ret .= (strlen(dechex($rgbcislo[$i])) == 1 ? "0".dechex($rgbcislo[$i]) : dechex($rgbcislo[$i]));
            }

            $result[0] = $this->NactiUnikatniObsah($this->unikatni["admin_captcha_23"], $cislo);
            $result[1] = "#{$ret}";
          break;

                  "admin_captcha_22" => "RGB:%%1%%=>CMYK",

                  "admin_captcha_23" => "CMYK:%%1%%=>RGB",
"obrázkový matematicky příklad (převod barvy rgb->cmyk)",
                                          "obrázkový matematicky příklad (převod barvy cmyk->rgb)",
/*
    if ($this->var->autoklenot)  //kdyz bude IP v bloku tak jde o lokalhost tedy, o klenot se nejedna
    {
      $this->var->klenot = (!in_array($_SERVER["REMOTE_ADDR"], $this->var->ipblok) ? true : false);
    }
*/
    //public $klenot = true;  //true/false - nastaveni jestli je domena na klenot.cz ci ne
    //public $autoklenot = true;  //true/false - (zapnuto / vypnuto auto zjistovani) - zjitsti podle IP jestli je soubor na webu ci nikoli
    public $klenot = %%klenot%%;  //true/false - nastaveni jestli je domena na klenot.cz ci ne
    public $autoklenot = %%autoklenot%%;  //true/false - (zapnuto / vypnuto auto zjistovani) - zjitsti podle IP jestli je soubor na webu ci nikoli

                            array("nazev" => "klenot",
                                  "popis" => "určuje zda je stránka na klenotu",
                                  "name" => "klenot",
                                  "type" => "checkbox", //text/checkbox
                                  ),

                            array("nazev" => "autoklenot",
                                  "popis" => "určuje jestli bude automaticky zjišťovat jestli je stránka na klenotu",
                                  "name" => "autoklenot",
                                  "type" => "checkbox", //text/checkbox
                                  ),
//base64_encode(stripslashes(htmlspecialchars($_POST["heslo"], ENT_QUOTES)));
"admin_vypis_obsah_sum" => "
<p class=\"pocet_slozek_souboru\">
  Počet složek: <strong>%%2%%</strong>, Počet souborů: <strong>%%3%%</strong>
</p>\n",
//$kon = explode(".", $struktura[$klice[$i]]);
        //$suffix[] = $kon[count($kon) - 1];
//$kon = explode(".", $struktura[$klice[$i]]);
        //$suffix[] = $kon[count($kon) - 1];
                //Svar_dump(filetype("{$jmeno}/{$soub}") == "file" ? "soubor: {$jmeno}/{$soub}" : "slozka: {$jmeno}/{$soub}");
//var_dump("mažu soubor: {$jmeno}/{$soub}");
//var_dump("mažu složku: {$jmeno}/{$soub}");
/*
        if (!(filetype("{$jmeno}/{$soub}") == "file" ? @unlink("{$jmeno}/{$soub}") : @rmdir("{$jmeno}/{$soub}")))
        {
          $this->DelDirFile("{$jmeno}/{$soub}");  //rekurze
        }
*/
//(array_key_exists($sufflip[$maxsuff], $this->poledirtypu) ? $this->poledirtypu[$sufflip[$maxsuff]] : $this->poledirtypu["unknown"]);
//$kon = explode(".", $struktura[$klice[$i]]);
          //$suffix[] = $kon[count($kon) - 1];
//$zan = 0;
    //$klice = array_keys($struktura);
//var_dump($slozka);
/*
  private function PokusnyVypisStruktury($struktura, $slozka = "", $zan = 0)
  {
    $result = "";
    //$zan = 0;

    //$klice = array_keys($struktura);
//var_dump($slozka);

    $pocfile = 0;
    $pocdir = 0;
    if (is_array($struktura))
    {
      asort($struktura);
      $klice = array_keys($struktura);

      for ($i = 0; $i < count($klice); $i++)
      {
        if (is_numeric($klice[$i]))
        {
          $pocfile++;
        }
          else
        {
          $pocdir++;
        }
      }
    }

    $vypis = "slozka: {$slozka} (souborů: {$pocfile}, složek: {$pocdir})
<br />\n";

    //print_r($klice);
    //$j = 0;
    for ($i = 0; $i < count($klice); $i++)
    {
      if (is_numeric($klice[$i]))
      {
        $vypis .= "soubor: {$struktura[$klice[$i]]} (zan: {$zan})<br />\n";

        //"soubor: {$struktura[$klice[$i]]}";
        //$j++;
      }
        else
      {
        $zan++;
        $vnorene = $this->PokusnyVypisStruktury($struktura[$klice[$i]], $klice[$i], $zan);

        //$vypis[] = "slozka: {$klice[$i]}";
        //$vypis[] = $this->PokusnyVypisStruktury($struktura[$klice[$i]]);
        $vypis .= "
begin ({$zan})
<br />
{$vnorene}end (zan: {$zan})<br />
";

      //$vypis[] = $this->PokusnyVypisStruktury($struktura[$klice[$i]], $klice[$i], $tvar);
        //$vypis = array_merge($vypis, $this->PokusnyVypisStruktury($struktura[$klice[$i]]));
      }
    }
    //var_dump($j);

    return $vypis;
  }
*/
/*
  private function RekurzivniVypisLeftTree($struktura, $sloz)
  {
    $slozky = $this->RekurzivniVypisSlozek($struktura);

    $klice = array_keys($slozky);
    $result = "";
    for ($i = 0; $i < count($klice); $i++)
    {
      $result .= "
      nazev: {$klice[$i]}<br />
      ";
      if (is_array($slozky[$klice[$i]]))
      {
        $this->RekurzivniVypisLeftTree($slozky[$klice[$i]]);
      }
      var_dump($slozky[$klice[$i]]);
    }

    return $result;
  }
*/
  private function SpocitejObjekty($struktura)
  {
    $klice = array_keys($struktura);
    $poc = 0;
    for ($i = 0; $i < count($klice); $i++)
    {
      if (!is_array($struktura[$klice[$i]]))  //kontroluje jestli neni pole v hodnete
      {
        $poc++;
      }
        else
      {
        $poc++;
      }
    }

    return $poc;
  }

  private function CelkovyPocetObjektu($struktura)
  {
    $klice = array_keys($struktura);

    static $poc = 0;
    for ($i = 0; $i < count($klice); $i++)
    {
      $poc++;

      if (is_array($struktura[$klice[$i]])) //leze do slozky
      {
        $poc = $this->CelkovyPocetObjektu($struktura[$klice[$i]]);
      }
    }

    return $poc;
  }

  private function MaticeZanoreni($struktura)
  {
    asort($struktura);
    $klice = array_keys($struktura);

    $poc = 0;
    for ($i = 0; $i < count($klice); $i++)
    {
      if ((count($klice) - 1) != $i)
      {
        if (is_array($struktura[$klice[$i]]))
        {
          $poc += count($struktura[$klice[$i]]);
        }
          else
        {
          $this->pokus[$poc] .= "T";
        }

      }
        else
      {
        $this->pokus[$poc] .= "L";
      }

      $poc++;


      if (!is_array($struktura[$klice[$i]]))  //(is_numeric($klice[$i])) //soubory (files)
      {

      }
        else
      {

/*
        $rek = $this->MaticeZanoreni($struktura[$klice[$i]]);

        $result[$klice[$i]] = $rek;
        $zan++;
*/
      }
    }

    /*
zanoreni_t  (T)
zanoreni_i  (I)
zanoreni_l  (L)
zanoreni_empty  (S)
    */

/*
    $pocet = $this->CelkovyPocetObjektu($struktura);
    for ($i = 0; $i < $pocet; $i++)
    {

      if (count($struktura[$klice[$i]]) != 0)
      {
        if (count($struktura[$klice[$i]]) == 1)
        {
          $this->pokus[$i] = "T";
        }
          else
        {
          $this->pokus[$i] = "IL";
        }
        //var_dump($struktura[$klice[$i]]);
//těžce domyslet!!!!!!!
      }
        else
      {
        $this->pokus[$i] = "T";
      }

      if (Empty($klice[$i]))
      {
        $this->pokus[$i] = "S";
      }
*/
  //    var_dump($klice[$i]);
//var_dump(count($struktura[$klice[$i]]));
/*
      for ($j = $i; $j < count($struktura[$klice[$i]]) + count($klice); $j++)
      {
        $this->pokus[$j] = "?j";
      }

    }
*/

/*
    static $zan = 0;
    for ($i = 0; $i < count($klice); $i++)
    {

      //kdyz neni pole vypisuje soubory
      if (!is_array($struktura[$klice[$i]]))  //(is_numeric($klice[$i])) //soubory (files)
      {
        $result[] = "F";
      }
        else
      {

        $rek = $this->MaticeZanoreni($struktura[$klice[$i]]);
var_dump($zan);
        $result[$klice[$i]] = $rek;
        $zan++;

//                                            $klice[$i], //$sloz,  //nazev slozky
  //                                          $zan,

      }
    }
*/




/*
    for ($i = 0; $i < count($klice); $i++)
    {
      $this->pokus[$i] = "?i";
var_dump(count($struktura[$klice[$i]]));
      for ($j = $i; $j < count($struktura[$klice[$i]]) + count($klice); $j++)
      {
        $this->pokus[$j] = "?j";
      }
    }
*/


/*
    for ($i = 0; $i < count($klice); $i++)
    {

      if (is_array($struktura[$klice[$i]]))
      {
        if (count($struktura[$klice[$i]]) == 0 ||
            count($struktura[$klice[$i]]) == 1)
        {
          $this->pokus[$x] .= "T";
        }
          else
        {
          $this->pokus[$x] .= "?";
        }

        //var_dump($struktura[$klice[$i]]);
      }



      if (count($struktura[$klice[$i]]) == 1)
      {
        //$this->pokus[$x] .= "?I";
      }
        else
      {
        //$this->pokus[$x] .= "T";
      }


      //kdyz neni pole vypisuje soubory
      if (!is_array($struktura[$klice[$i]]))  //(is_numeric($klice[$i])) //soubory (files)
      {



        $result[$i] = $struktura[$klice[$i]];

                                            //$struktura[$klice[$i]], //nazev souboru
                             //               $zan,

      }
        else
      {
        //$this->pokus[$x] .= ($i == count($klice) - 1 ? "L" : "T");
$x++;

        $rek = $this->MaticeZanoreni($struktura[$klice[$i]], $x);



        $result[$klice[$i]] = $rek;


//                                            $klice[$i], //$sloz,  //nazev slozky
  //                                          $zan,

      }
    }
*/


    return $result;
  }



/*"?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;view={$_GET["view"]}&amp;dir={$this->pathdata}{$slozka}/{$klice[$i]}",
                                            $klice[$i],
                                            ($podm ? $this->NactiUnikatniObsah($this->unikatni["admin_rekurzivni_tree_aktivni"]) : ""),
                                            $zan,
                                            $odsazeni,
                                            (!Empty($rek) ? $this->NactiUnikatniObsah($this->unikatni["admin_rekurzivni_tree_rek"],
                                                                                      $rek,
                                                                                      $klice[$i]) : ""));*/

/*
    $klice = array_keys($struktura);

    for ($i = 0; $i < count($klice); $i++)
    {
      if (is_numeric($klice[$i]))
      {
        $pocfile++;
        $kon = explode(".", $struktura[$klice[$i]]);
        $suffix[] = $kon[count($kon) - 1];
      }
        else
      {
        $pocdir++;
      }
    }
*/
//var_dump($typ);
            //$this->poledirtypu[
//$pfile++;
//        $typ = ( ? "dir_empty" : );
//(array_key_exists($suffix, $this->polefiletypu) ? $this->polefiletypu[$suffix] : $this->polefiletypu["default"]),
//        $typ = ( ? "dir_empty" : );
//var_dump($typ);
          //$this->poledirtypu[
&amp;view={$_GET["view"]}

/*
    $handle = opendir($cesta);
    $i = $j = 0;
    $result = "";
    while($soub = readdir($handle))
    {
      if ($soub != "." && $soub != "..")
      {
        $pocet = count(explode("/", "{$cesta}/{$soub}")) - 4;
        $odsazeni = $this->NactiUnikatniObsah($this->unikatni["admin_nasobitel_odsazeni"]) * $pocet;

        switch (filetype("{$cesta}/{$soub}"))
        {
          case "dir":
            $rek = $this->RekurzivniVypis("{$cesta}/{$soub}");

            $result .= $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_dir"],
                                                $odsazeni,
                                                $soub,
                                                $pocet,
                                                "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=addfile&amp;file={$cesta}/{$soub}",
                                                "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=adddir&amp;file={$cesta}/{$soub}",
                                                "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editdir&amp;file={$cesta}/{$soub}",
                                                "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=deldir&amp;file={$cesta}",
                                                $rek,
                                                $this->poletypu["dir"]);

            $i++;
          break;

          case "file":
            $a = explode(".", basename("{$cesta}/{$soub}"));
            $suffix = strtolower($a[1]);

            if ($suffix == "jpg" ||
                $suffix == "png" ||
                $suffix == "gif")
            {
              list($w, $h) = getimagesize("{$cesta}/{$soub}");
              $new_w = ($w / 100) * $this->pomer;
              $new_h = ($h / 100) * $this->pomer;

              $obr = $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_obr"],
                                              "{$cesta}/{$soub}",
                                              $new_w,
                                              $new_h);
            }
              else
            {
              $obr = "";
            }

            $velikost = $this->var->main[0]->NactiFunkci("Funkce", "Velikost", filesize("{$cesta}/{$soub}"));
            $datum = date("d.m.Y / H:i:s", filemtime("{$cesta}/{$soub}"));

            $result .= $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_file"],
                                                $odsazeni,
                                                $soub,
                                                $pocet,
                                                $velikost,
                                                $datum,
                                                $this->absolutni_url,
                                                "{$cesta}/{$soub}",
                                                "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editfile&amp;file={$cesta}/{$soub}",
                                                "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=delfile&amp;file={$cesta}/{$soub}",
                                                $obr,
                                                (array_key_exists($suffix, $this->poletypu) ? $this->poletypu[$suffix] : $this->poletypu["default"]));
            $j++;
          break;
        }
      }
    }
    closedir($handle);

    $result .= $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_sum"],
                                        $odsazeni,
                                        $i,
                                        $j);

    return $result;

--toto do pole!!
dir_empty
dir_music => array("mp3", "wav")
dir_video => array("avi", "mpg")
dir_document => array("otd", "doc")
dir_picture => array("jpg", "png", "gif")
dir_archives => array("tar", "zip", "rar")
dir_unknown => *
*/

$obsahpole = explode("|-x-|", $data->obsah);

            $vypis = array("array_args",
                          $this->absolutni_url,
                          $data->rewrite,
                          $data->nazev,
                          ($i == 0 ? $prvni : ""),
                          ($i == ($res->numRows() - 1) ? $posledni : ""),
                          (in_array($i, $ente_def_array) ? $ente_def : ""),
                          ((($i + $ente_od) % $ente_po) == 0 ? $ente : ""));

            for ($j = 0; $j < count($obsahpole); $j++)
            {
              if (count(explode("||--x--||", $obsahpole[$j])) == 5)
              {
                $obr = explode("||--x--||", $obsahpole[$j]);
                $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$obr[0]}";
                $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$obr[0]}";
              }
                else
              {
                $vypis[] = ($kontrola ? htmlspecialchars_decode(html_entity_decode($obsahpole[$j])) : $obsahpole[$j]);
              }
            }
/*
            if (count($_POST) > 0)
            {
              $result = $this->NactiUnikatniObsah($this->unikatni["admin_addobsah_error"]);

              $this->var->main[0]->AutoClick(2, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$this->idmodul}__{$sablona}");  //auto kliknuti
            }
*/
/*
                  "admin_editelem_value" => "value: <input type=\"text\" name=\"value\" value=\"%%1%%\" /><br />",

                  "admin_editelem_vstupni_typ" => "vstupní typ: %%1%%<br />",

                  "admin_editelem_reg_exp" => "reg_exp: <input type=\"text\" name=\"reg_exp\" value=\"%%1%%\" /> <a href=\"http://php.net/manual/en/regexp.reference.php\">dokumentace</a><br />",

                  "admin_editelem_vystupni_format" => "vystupni_format: <input type=\"text\" name=\"vystupni_format\" value=\"%%1%%\" /> <a href=\"http://php.net/manual/en/function.date.php\">dokumentace</a><br />",

                  "admin_editelem_min_max_poc" => "
                  min_poc: <input type=\"text\" name=\"min_poc\" value=\"%%1%%\" /><br />
                  max_poc: <input type=\"text\" name=\"max_poc\" value=\"%%2%%\" /><br />
                  ",
*/
if (count($_POST) > 0)
            {
              $result = $this->NactiUnikatniObsah($this->unikatni["admin_editobsah_error"]);

              $this->var->main[0]->AutoClick(2, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$this->idmodul}__{$sablona}");  //auto kliknuti
            }
/*
                                              $data->obsah,
                                              $rozdel[0],
                                              $data->pridano,
                                              ($data->zobrazit ? " checked=\"checked\"" : ""),
                                              ($data->admin ? " checked=\"checked\"" : ""),
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}__{$sablona}&amp;co=editobsah&amp;id={$data->id}",
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}__{$sablona}&amp;co=delobsah&amp;id={$data->id}");
*/
/*
          if (!Empty($_POST["tlacitko"]) &&
              !Empty($vstup) &&
              !Empty($reg_exp))
          {
            preg_match($reg_exp, $vstup, $ret);
            $result .= (!Empty($ret[0]) ? $this->NactiUnikatniObsah($this->unikatni["admin_test_rv_out"], $ret[0]) : "NULL");  //vybere nulty index
          }
*/
/**
 *
 * Vrati text popisku
 *
 * @param sablona id sablony
 * @return popisek
 */
/*
  private function VypisSloupceEE($sablona)
  {
    settype($sablona, "integer");

    $result = "";
    if ($res = @$this->sqlite->query("SELECT popisek
                                      FROM sablona_kniha
                                      WHERE
                                      id={$sablona};", NULL, $error))
    {
      if ($res->numRows() == 1)
      {
        $data = $res->fetchObject();
        $result = $data->popisek;
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }

    return $result;
  }
*/

/**
 *
 * Navraceni samotneho formulare
 *
 * pouziti: <strong>$text = $this->var->main[0]->NactiFunkci("DynamicForm", "Formular"[, "adresa"]);</strong>
 *
 * @param adr adresa formulare
 * @param idcaptcha cislo id captcha kodu
 * @param captcha polo formular captcha
 * @param slovo vysledne slovo captcha
 * @param tvar tvat formulare
 * @return vystupni formular
 */
/*
  public function Formular($adr = NULL, $tvar = 1)
  {
    if (!Empty($adr))
    {
      $adresa = $adr;
    }
      else
    {
      $adresa = stripslashes(htmlspecialchars($_SERVER["QUERY_STRING"], ENT_QUOTES));
    }

    $typ = array_keys($this->input);  //nazvy prvku

    //vypis formulare
    $result = "";
    if ($res = @$this->sqlite->query("SELECT id, adresa, nazev, predmet, email, textemail, dodatek, oznameni, predmetoznameni, textemailoznameni, zdrojovyemail, odesilateladmin, odesilateluzivatel FROM formular WHERE adresa='{$adresa}';", NULL, $error))
    {
      $poc_prvku = $res->numRows();
      if ($res->numRows() == 1)
      {
        while ($data = $res->fetchObject())
        {
          //vypis prvku
          if ($res1 = @$this->sqlite->query("SELECT
                                            id,
                                            formular,
                                            nazev,
                                            typ,
                                            value,
                                            readonly,
                                            disabled,
                                            povinne,
                                            reg_exp,
                                            vstupni_typ,
                                            min_val,
                                            max_val,
                                            poradi
                                            FROM prvek
                                            WHERE prvek.formular={$data->id}
                                            ORDER BY poradi ASC;", NULL, $error))
          {
            $pocetelem = $res1->numRows();
            if ($res1->numRows() != 0)
            {
              $i = 0;
              $vypis = array("array_args",
                            $this->absolutni_url,
                            $this->dirpath);

              while ($data1 = $res1->fetchObject())
              {
                $podminka[$i]["id"] = $data1->id;
                $podminka[$i]["name"] = "elem_{$data1->id}"; //jmeno elementu
                $podminka[$i]["nazev"] = $data1->nazev; //popis elementu
                $podminka[$i]["blok"] = $data1->value; //jmeno elementu
                $podminka[$i]["typ"] = $typ[$data1->typ];  //textove oznaceni typu
                $podminka[$i]["povinne"] = $data1->povinne;  //bool vyraz povinne
                $podminka[$i]["vstup"] = $this->vstupni_typ[$data1->vstupni_typ];  //typ vstupu
                $podminka[$i]["reg_exp"] = $data1->reg_exp;  //regularni vyraz
                $podminka[$i]["min"] = $data->min_val;  //minimalni pocet
                $podminka[$i]["max"] = $data->max_val;  //maximalni pocet
                $podminka[$i]["chyba"] = "";  //text chyby
                $podminka[$i]["chyba_form"] = ""; //hidden chyby pro znovu naplneni

                switch ($typ[$data1->typ])
                {
                  case "text":  //pro text
                    $vypis[] = $data1->id;
                    $vypis[] = " name=\"elem_{$data1->id}\""; //zvazit ajax konrolu!
                    $vypis[] = $data1->nazev;
                    $vypis[] = (!Empty($_POST["elem_{$data1->id}"]) ? $_POST["elem_{$data1->id}"] : $data1->value); //pri chybnem vyplneni, funkce jen na oko
                    $podminka[$i]["chyba_form"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_hidden_{$tvar}"], $data1->id, $_POST["elem_{$data1->id}"]);
                    //$vypis[] = " onfocus=\"if(this.value == '{$data1->value}'){this.value='';}\" onblur=\"if(this.value == ''){this.value='{$data1->value}';}\"";
                    $vypis[] = " onfocus=\"this.value=(this.value == '{$data1->value}' ? '' : this.value);\" onblur=\"this.value=(this.value == '' ? '{$data1->value}' : this.value);\"";
                    $vypis[] = ($data1->readonly ? " readonly=\"readonly\"" : "");
                    $vypis[] = ($data1->disabled ? " disabled=\"disabled\"" : "");
                    $vypis[] = ($data1->povinne ? $this->znakpovinne : "");
                  break;

                  case "checkbox":  //pro checkbox
                    $vypis[] = $data1->id;
                    $vypis[] = " name=\"elem_{$data1->id}\"";
                    $vypis[] = $data1->nazev;
                    //$vypis[] = $data1->value; //je tu jako skupina
                    //$vypis[] = " onfocus=\"if(this.value == '{$data1->value}'){this.value='';}\" onblur=\"if(this.value == ''){this.value='{$data1->value}';}\"";
                    //$vypis[] = " onfocus=\"this.value=(this.value == '{$data1->value}' ? '' : '');\" onblur=\"this.value=(this.value == '' ? '{$data1->value}' : '');\"";
                    //$vypis[] = ($data1->readonly ? " readonly=\"readonly\"" : "");
                    $vypis[] = ($data1->disabled ? " disabled=\"disabled\"" : "");
                    $vypis[] = ($data1->povinne ? $this->znakpovinne : "");
                  break;

                  case "submit":  //pro submit
                    $vypis[] = $data1->id;
                    $vypis[] = " name=\"elem_{$data1->id}\"";
                    //$vypis[] = $data1->nazev;
                    $vypis[] = $data1->value;
                    //$vypis[] = " onfocus=\"if(this.value == '{$data1->value}'){this.value='';}\" onblur=\"if(this.value == ''){this.value='{$data1->value}';}\"";
                    //$vypis[] = " onfocus=\"this.value=(this.value == '{$data1->value}' ? '' : '');\" onblur=\"this.value=(this.value == '' ? '{$data1->value}' : '');\"";
                    //$vypis[] = ($data1->readonly ? " readonly=\"readonly\"" : "");   >> !Empty($_POST["elem_{$data1->id}"])    $captcha_kod == $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}_vysledek"]
                    $vypis[] = ($data1->disabled || !Empty($_POST["elem_{$data1->id}"]) ? " disabled=\"disabled\"" : "");  //osetreni do zadani spravneho captcha kodu
                    $vypis[] = ($data1->disabled || !Empty($_POST["elem_{$data1->id}"]) ? "_disabled" : "");
                    $vypis[] = ($data1->povinne ? $this->znakpovinne : "");
                  break;

                  case "reset":  //pro reset
                    $vypis[] = $data1->id;
                    $vypis[] = " name=\"elem_{$data1->id}\"";
                    //$vypis[] = $data1->nazev;
                    $vypis[] = $data1->value;
                    //$vypis[] = " onfocus=\"if(this.value == '{$data1->value}'){this.value='';}\" onblur=\"if(this.value == ''){this.value='{$data1->value}';}\"";
                    //$vypis[] = " onfocus=\"this.value=(this.value == '{$data1->value}' ? '' : '');\" onblur=\"this.value=(this.value == '' ? '{$data1->value}' : '');\"";
                    //$vypis[] = ($data1->readonly ? " readonly=\"readonly\"" : "");
                    $vypis[] = ($data1->disabled ? " disabled=\"disabled\"" : "");
                    $vypis[] = ($data1->povinne ? $this->znakpovinne : "");
                  break;

                  case "captcha":  //pro captcha
                    $vypis[] = $data1->id;
                    $vypis[] = " name=\"elem_{$data1->id}\"";

                    //sam si nacte captchu
                    $slovo = $this->var->main[0]->NactiFunkci("CaptchaCode", "GenerujNahodneSlovo", $data1->value); //pro id 1
                    $captcha = $this->var->main[0]->NactiFunkci("CaptchaCode", "CaptchaKod", $data1->value, $slovo);  //pro id 1 se slovem

                    $slovo = (is_array($slovo) ? $slovo[1] : $slovo);

                    $this->captchakod[$adresa]["id"] = $data1->value;
                    $this->captchakod[$adresa]["captcha"] = $captcha;
                    $this->captchakod[$adresa]["slovo"] = $slovo;
                    //$vypis[] = $data1->nazev;
                    //$vypis[] = $data1->value;
                    //$vypis[] = " onfocus=\"if(this.value == '{$data1->value}'){this.value='';}\" onblur=\"if(this.value == ''){this.value='{$data1->value}';}\"";
                    //$vypis[] = " onfocus=\"this.value=(this.value == '{$data1->value}' ? '' : '');\" onblur=\"this.value=(this.value == '' ? '{$data1->value}' : '');\"";
                    //$vypis[] = ($data1->readonly ? " readonly=\"readonly\"" : "");
                    //$vypis[] = ($data1->disabled ? " disabled=\"disabled\"" : "");
                    $vypis[] = $data1->value; //id
                    $vypis[] = $captcha;
                    $vypis[] = $slovo;
                    //$captcha_kod = $_POST["elem_{$data1->id}"];
                    $vypis[] = ($data1->povinne ? $this->znakpovinne : "");
                  break;
                }

                $i++;
              } //end while res1

              $vypis[] = $data->dodatek;

              $result .= $this->NactiUnikatniObsah($this->unikatni["normal_vypis_form_{$tvar}"], $vypis);

              $poc = 0;
              $check = true;
              $vystup = "";
              for ($i = 0; $i < $pocetelem; $i++) //kontrola vyplneni a spravnosti dat
              {
                $zpost = $_POST[$podminka[$i]["name"]]; //vezme si hodnotu z postu podle nazvu elementu

                //jmeno pro error hlasku
                $error_nazev = ($podminka[$i]["nazev"][strlen($podminka[$i]["nazev"]) - 1] == ":" ? substr($podminka[$i]["nazev"], 0, -1) : $podminka[$i]["nazev"]);

                switch ($podminka[$i]["typ"]) //rozliseni kontroly podle typu
                {
                  case "text":  //konrola pro text
                    switch ($podminka[$i]["vstup"])
                    {
                      case "text":  //konvert textu
                        settype($zpost, "string");

                        if ($podminka[$i]["blok"] == $zpost)  //znacknuto bez rozmyslu
                        {
                          $zpost = "";
                          $podminka[$i]["chyba"] = ($podminka[$i]["povinne"] ? $this->NactiUnikatniObsah($this->unikatni["normal_error_empty_{$tvar}"], $error_nazev) : "");
                        }
                          else
                        if ($podminka[$i]["min"] > 0 && //kontrola rozsahu poctu pismen
                            $podminka[$i]["max"] > 0)
                        {
                          if (strlen($zpost) < $podminka[$i]["min"] ||
                              strlen($zpost) > $podminka[$i]["max"])
                          {
                            $zpost = "";
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_min_max_{$tvar}"], $error_nazev);
                          }
                        }
                          else
                        if ($podminka[$i]["min"] > 0)  //kontrola minina
                        {
                          if (strlen($zpost) < $podminka[$i]["min"])
                          {
                            $zpost = "";
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_min_{$tvar}"], $error_nazev);
                          }
                        }
                          else
                        if ($podminka[$i]["max"] > 0)  //kontrola maxima
                        {
                          if (strlen($zpost) > $podminka[$i]["max"])
                          {
                            $zpost = "";
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_max_{$tvar}"], $error_nazev);
                          }
                        }
                      break;

                      case "integer": //kontrola cisla
                        settype($zpost, "integer");

                        if ($podminka[$i]["blok"] == $zpost)  //znacknuto bez rozmyslu
                        {
                          $zpost = "";
                          $podminka[$i]["chyba"] = ($podminka[$i]["povinne"] ? $this->NactiUnikatniObsah($this->unikatni["normal_error_empty_{$tvar}"], $error_nazev) : "");
                        }
                          else
                        if ($podminka[$i]["min"] > 0 &&
                            $podminka[$i]["max"] > 0)
                        {
                          if ($zpost < $podminka[$i]["min"] ||  //kontrola hodnoty cisel
                              $zpost > $podminka[$i]["max"])
                          {
                            $zpost = "";
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_min_max_{$tvar}"], $error_nazev);
                          }
                        }
                          else
                        if ($podminka[$i]["min"] > 0)  //kontrola minina
                        {
                          if ($zpost < $podminka[$i]["min"])
                          {
                            $zpost = "";
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_min_{$tvar}"], $error_nazev);
                          }
                        }
                          else
                        if ($podminka[$i]["max"] > 0)  //kontrola maxima
                        {
                          if ($zpost > $podminka[$i]["max"])
                          {
                            $zpost = "";
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_max_{$tvar}"], $error_nazev);
                          }
                        }
                      break;

                      case "reg_exp": //konrola reg_exp
                        if ($podminka[$i]["blok"] == $zpost)  //znacknuto bez rozmyslu
                        {
                          $zpost = "";
                          $podminka[$i]["chyba"] = ($podminka[$i]["povinne"] ? $this->NactiUnikatniObsah($this->unikatni["normal_error_empty_{$tvar}"], $error_nazev) : "");
                          break;
                        }
                          else
                        {
                          preg_match($podminka[$i]["reg_exp"], $zpost, $ret);
                          $zpost = $ret[0];  //vybere nulty index

                          if (Empty($zpost))
                          {
                            $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_reg_exp_{$tvar}"], $error_nazev);
                          }
                        }
                      break;
                    }

                    if (Empty($zpost) && $podminka[$i]["povinne"])
                    {
                      $check = false;
                    }
                      else
                    {
                      $poc++;
                      $vystup[] = $podminka[$i]["nazev"];
                      $vystup[] = $zpost;
                    }
                  break;

                  case "captcha": //kontrola captcha kodu
                    $pridavek = (is_array($_SESSION["slovo_{$this->captchakod[$sablona]["id"]}"]) ? "_solve" : "");

                    if (count($_POST) == 0 || $zpost != $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}{$pridavek}_vysledek"])
                    {
                      $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}{$pridavek}_vysledek"] = $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}{$pridavek}"];
                    }

                    if (Empty($zpost) && $podminka[$i]["povinne"])
                    {
                      $check = false;
                      $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_empty_captcha_{$tvar}"]);  //prazdna
                    }
                      else
                    {
                      if ($zpost == $_SESSION["slovo_{$this->captchakod[$adresa]["id"]}{$pridavek}_vysledek"])  //turinguv stroj rozliseni cloveka
                      {
                        $poc++;
                      }
                        else
                      {
                        $check = false;
                        $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_wrong_captcha_{$tvar}"]);  //spatne
                      }
                    }
                  break;

                  case "checkbox":  //kontrola checkboxu
                    if (Empty($zpost) && $podminka[$i]["povinne"])
                    {
                      $check = false;
                      $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_checked_error_{$tvar}"], $error_nazev);
                    }
                      else
                    {
                      $poc++;
                      $vystup[] = $zpost;
                    }
                  break;

                  default:  //kontrola defaultnich hodnot bez ukladani obsahu: submit, reset
                    if (Empty($zpost) && $podminka[$i]["povinne"])
                    {
                      $check = false;
                      $podminka[$i]["chyba"] = $this->NactiUnikatniObsah($this->unikatni["normal_error_unkown_{$tvar}"], $error_nazev);
                    }
                      else
                    {
                      $poc++;
                    }
                  break;
                } //end switch
              } //end for

              if ($this->var->debug_mod && $this->debug_lokal)  //debug mode
              {
                var_dump(sprintf("check: %d, poc: %d, pocelem: %d, poc==pocelem: %d", $check, $poc, $pocetelem, $poc == $pocetelem));
              }

              if ($check &&
                  $poc == $pocetelem &&
                  count($_POST) > 1)
              {
                $adminemail = array("array_args",
                                    $this->absolutni_url,
                                    $_SERVER["REMOTE_ADDR"],
                                    gethostbyaddr($_SERVER["REMOTE_ADDR"]),
                                    $this->var->main[0]->NactiFunkci("Funkce", "TypOS", $_SERVER["HTTP_USER_AGENT"]),
                                    $this->var->main[0]->NactiFunkci("Funkce", "TypBrowseru", $_SERVER["HTTP_USER_AGENT"]),
                                    date($this->NactiUnikatniObsah($this->unikatni["normal_datum_admin_email_{$tvar}"])));

                //je-li vyplneny odesilatel na tvrdo pouzije odesilatele, jinak bere z inputu zdrojoveho emailu
                $header = $this->NactiUnikatniObsah($this->unikatni["normal_email_header_{$tvar}"],  //hlavička
                                                    $this->hlavicka,
                                                    (!Empty($data->odesilateladmin) ? htmlspecialchars_decode(html_entity_decode($data->odesilateladmin)) : $_POST[$data->zdrojovyemail]));

                if ($this->var->debug_mod && $this->debug_lokal)  //debug mode
                {
                  var_dump($header, $this->PrevodUnikatnihoTextu($data->textemail, array_merge($adminemail, $vystup)));
                }

                //prepis symbolickych promennych, format: @@XX@@
                if (@mail($data->email, $this->OsetreniTextu($data->predmet), $this->PrevodUnikatnihoTextu(htmlspecialchars_decode(html_entity_decode($data->textemail)), array_merge($adminemail, $vystup)), $header))  //odeslani adminovy
                {
                  $em1 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send_true_{$tvar}"]);
                }
                  else
                {
                  $em1 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send_false_{$tvar}"]);
                }

                //oznamovaci email
                if ($data->oznameni && !Empty($data->zdrojovyemail))
                {
                  $header2 = $this->NactiUnikatniObsah($this->unikatni["normal_email_header_{$tvar}"],  //hlavička
                                                      $this->hlavicka,
                                                      htmlspecialchars_decode(html_entity_decode($data->odesilateluzivatel)));

                  $useremail = array("array_args",
                                    $this->absolutni_url);

                  if ($this->var->debug_mod && $this->debug_lokal)  //debug mode
                  {
                    var_dump($header2, $this->PrevodUnikatnihoTextu($data->textemailoznameni, array_merge($useremail, $vystup)));
                  }

                  //odeslani, format: @@XX@@
                  if (@mail($_POST[$data->zdrojovyemail], $this->OsetreniTextu($data->predmetoznameni), htmlspecialchars_decode(html_entity_decode($this->PrevodUnikatnihoTextu($data->textemailoznameni)), array_merge($useremail, $vystup)), $header2))
                  {
                    $em2 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send2_true_{$tvar}"]);
                  }
                    else
                  {
                    $em2 = $this->NactiUnikatniObsah($this->unikatni["normal_email_send2_false_{$tvar}"]);
                  }
                }

                $result .= $this->NactiUnikatniObsah($this->unikatni["normal_email_send_complet_{$tvar}"],
                                                    $em1,
                                                    $em2,
                                                    "{$this->absolutni_url}{$_GET[$this->var->get_kam]}");
              }
                else
              {
                if (count($_POST) > 1)
                {
                  $chyba = "";
                  $chyba_form = "";
                  for ($i = 0; $i < $pocetelem; $i++)
                  {
                    $chyba .= $podminka[$i]["chyba"];
                    $chyba_form .= $podminka[$i]["chyba_form"];
                  }

                  if (Empty($_POST["error_tlacitko"]))
                  {
                    $error_button = $this->NactiUnikatniObsah($this->unikatni["normal_error_button_{$tvar}"]);
                  }

                  $result .= $this->NactiUnikatniObsah($this->unikatni["normal_error_end_{$tvar}"],
                                                      $chyba,
                                                      $chyba_form,
                                                      $error_button,
                                                      "{$this->absolutni_url}{$_GET[$this->var->get_kam]}");
                }
              } //end fail data
            }
          }
            else
          {
            $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
          }
        } //end while res
      } //num rows
        else
      {
        $result = "";
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }

    return $result;
  }
*/
array("B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB");
/**
 *
 * Prepisuje obycejnou adresu pro htaccess format - testovaci provoz
 *
 * @param adresa vstupni adresa
 * @return url pripravena pro hraccess
 */
  public function PrepisAdresy($adresa)
  {
    $search = array_keys($this->var->prepis_pravidla);
    $replace = array_values($this->var->prepis_pravidla);

    $result = str_replace($search, $replace, $adresa);

    return $result;
  }

/**
 *
 * Prepisuje zpet textovou adresu do neupravene - testovaci provoz
 *
 * @param adresa vstupni adresa
 * @return url adresa shodna s nazevem
 */
  public function ZpetnyPrepisAdresy($adresa)
  {
    $search = array_values($this->var->prepis_pravidla);
    $replace = array_keys($this->var->prepis_pravidla);

    $result = str_replace($search, $replace, $adresa);

    return $result;
  }
/*
                $result .= $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_bunka"],
                                                    $data1->radek,
                                                    $data1->poradi,
                                                    "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=editrow&amp;id={$data1->id}",
                                                    "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=delrow&amp;id={$data1->id}");
*/
$result .= $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah_hlavicka"],
                                              $data->id,
                                              $data->adresa,
                                              $data->nadpis,
                                              $data->poznamka,
                                              $data->sloupce,
                                              $data->poradi,
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=addrow&amp;tab={$data->id}",
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=edittab&amp;col={$col}&amp;id={$data->id}",
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=deltab&amp;id={$data->id}");
              $sloupce = "";
              $sloup = explode("|--|", $data->sloupce);
              $rozdil = $col - count($sloup);
              for ($i = 0; $i < count($sloup) + $rozdil; $i++)
              {
                $sloupce .= $this->NactiUnikatniObsah($this->unikatni["admin_edittab_input_sloupce"], $sloup[$i]);
              }
              $sloup = explode("|--|", $data->sloupce);
              for ($i = 0; $i < count($sloup); $i++)
              {
                $sloupce .= $this->NactiUnikatniObsah($this->unikatni["admin_addrow_table_header"], $sloup[$i]);
              }
/*
                  $sloupce = $this->NactiUnikatniObsah($this->unikatni["admin_editrow_table_begin"]);
                  $sloup = explode("|--|", $data1->sloupce);  //rozdeli sloupce co jsou v sekci
                  for ($i = 0; $i < count($sloup); $i++)
                  {
                    $sloupce .= $this->NactiUnikatniObsah($this->unikatni["admin_editrow_table_header"], $sloup[$i]);
                  }
*/
/^<p class="text_akce">.*<\/p>/
!!!!
$reg_exp = (!in_array($_SERVER["REMOTE_ADDR"], $this->var->ipblok) ? htmlspecialchars($_POST["reg_exp"], ENT_QUOTES) : stripslashes(htmlspecialchars($_POST["reg_exp"], ENT_QUOTES)));

moje:
Version: ImageMagick 6.4.5 2009-06-04 Q16 OpenMP http://www.imagemagick.org Copyright: Copyright (C) 1999-2008 ImageMagick Studio LLC 1
web:
Version: ImageMagick 6.3.7 03/24/09 Q16 http://www.imagemagick.org Copyright: Copyright (C) 1999-2008 ImageMagick Studio LLC 0

/*
    if (!$this->sqlite = @new SQLiteDatabase("{$this->dirpath}/{$this->dbname}", 0777, $error))
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
*/

  private function PorovnejPole($pole1, $odindex1 = 0, $pole2)
  {
    if (is_array($pole1) && is_array($pole2))
    {
      $poc = $index2 = 0;
      for ($i = $odindex1; $i < $odindex1 + count($pole2); $i++)
      {
        if ($pole1[$i] == $pole2[$index2])
        {
          $poc++;
        }
        $index2++;
      }
    }

    return (count($pole2) == $poc ? true : false);
  }
          //if (file_exists("{$path}/{$databaze}"))
          //{
/*
            if (!$this->sqlite = @new SQLiteDatabase("{$path}/{$databaze}", 0777, $error))
            {
              $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
            }
*/
          if (file_exists("{$path}/{$databaze}"))
          {
            if (!$this->sqlite = @new SQLiteDatabase("{$path}/{$databaze}", 0777, $error))
            {
              $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
            }
 if (!$this->sqlite = @new SQLiteDatabase("{$this->dirpath}/{$this->dbname}", 0777, $error))
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
, $sqlite
SQLite
/*
      if (!@$this->sqlite->queryExec("CREATE TABLE dynamicky_obsah (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      adresa TEXT,
                                      text TEXT,
                                      skupina INTEGER UNSIGNED);

                                      CREATE TABLE gtk_skupina (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      nazev VARCHAR(200),
                                      popisek TEXT,
                                      href_id VARCHAR(200),
                                      href_class VARCHAR(200),
                                      href_akce VARCHAR(500),
                                      zobrazit BOOL);
                                      ", $error))
      {
        $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
      }
*/
/**
 *
 * Osetrteni nazvu tabulek mysli databaze
 *
 * @param prikaz vstupni text
 * @return osetreny text
 */
  private function OsetreniNazvuDB($prikaz)
  {
    return strtr($prikaz, $this->nazvydb);  //prevede nazvy sqlite databazi na tvarove jine v mysqli
  }
 * @param osetreni zapina osetrovani v mysqli
//, $osetreni = true
//$osetreni ? $this->OsetreniNazvuDB($prikaz) :
//$tab += ($this->ExistujeTabulka("{$this->trida}_{$expl2[0]}", $error) ? 1 : 0);
/*
            $uloz = array(" {$expl2[0]}", " {$this->trida}_{$expl2[0]}"); //klasicky prepis, mezera
            $klice[] = implode("->", $uloz);

            $uloz = array("{$expl2[0]}.", "{$this->trida}_{$expl2[0]}."); //klasicky prepis, tecka
            $klice[] = implode("->", $uloz);
            * strtr($prikaz, $nazev)
*/
  //."|-x-|{$prepisnazvy}"
//$prepisnazvy = implode("|-x-|", $klice);
$nazev["CREATE TABLE {$expl2[0]}"] = "CREATE TABLE {$this->trida}_{$expl2[0]}"; //instalacni prepis, zamereny jen na create!
/*
    if (filesize("{$this->dirpath}/{$this->dbname}") == 0)
    {
      if (!@$this->queryExec("CREATE TABLE sablona (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      adresa TEXT,
                                      razeni VARCHAR(50),
                                      nove INTEGER UNSIGNED,
                                      nove_rss INTEGER UNSIGNED,
                                      nazev VARCHAR(200),
                                      rewrite VARCHAR(200),
                                      popisek TEXT,
                                      href_id VARCHAR(200),
                                      href_class VARCHAR(200),
                                      href_akce VARCHAR(500),
                                      zobrazit BOOL);

                                      CREATE TABLE obsah_sablony (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      sablona INTEGER UNSIGNED,
                                      obsah TEXT,
                                      pridano DATETIME,
                                      nazev VARCHAR(200),
                                      rewrite VARCHAR(200));

                                      CREATE TABLE element (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      sablona INTEGER UNSIGNED,
                                      typ INTEGER UNSIGNED,
                                      nazev VARCHAR(200),
                                      value VARCHAR(200),
                                      input_id VARCHAR(200),
                                      input_class VARCHAR(200),
                                      input_akce VARCHAR(500),
                                      povinne BOOL,
                                      vstupni_typ INTEGER UNSIGNED,
                                      reg_exp VARCHAR(500),
                                      vystupni_format VARCHAR(200),
                                      min_poc INTEGER UNSIGNED,
                                      max_poc INTEGER UNSIGNED,
                                      poradi INTEGER UNSIGNED);
                                      ", $error))
      {
        $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
      }
    }
*/
/*
    if (file_exists($this->newcesta) &&
        $this->typdb == "mysqli")
    {
      $u = fopen($this->newcesta, "r");
      $data = array_slice(explode("|-x-|", fread($u, filesize($this->newcesta))), 1);
      fclose($u);
      for ($i = 0; $i < count($data); $i++)
      {
        $expl = explode("->", $data[$i]);
        $this->nazvydb[$expl[0]] = $expl[1];
      }
    }
      else
    {
      $this->nazvydb = NULL;
    }
*/
//preg_split("/(Error:){1}|(; radek:){1}|(; method:){1}|(; kriticka:){1}|(; cas:){1}|(; ip:){1}|(; agent:){1}/", $obsah[$i]);
            //$this->var->error_code[$chyby[$i]["typ"]];
            $ret[-1] = "array_args";
/*
    if (filesize("{$this->dirpath}/{$this->dbname}") == 0)
    {
      if (!@$this->sqlite->queryExec("CREATE TABLE uzivatele (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      login VARCHAR(100),
                                      heslo VARCHAR(100),
                                      email VARCHAR(100),
                                      pridano DATETIME,
                                      upraveno DATETIME,
                                      aktivni BOOL,
                                      last_login DATETIME,
                                      last_ip VARCHAR(50),
                                      last_agent VARCHAR(300),
                                      polozky TEXT);

                                      CREATE TABLE gui_element (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      nazev VARCHAR(200),
                                      typ INTEGER UNSIGNED,
                                      value VARCHAR(200),
                                      registrace BOOL,
                                      profil BOOL,
                                      readonly BOOL,
                                      disabled BOOL,
                                      povinne BOOL,
                                      vstupni_typ INTEGER UNSIGNED,
                                      reg_exp VARCHAR(500),
                                      format VARCHAR(200),
                                      min_val INTEGER UNSIGNED,
                                      max_val INTEGER UNSIGNED,
                                      poradi INTEGER UNSIGNED);
                                      ", $error))
      {
        $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
      }
    }
*/
/*
          case "checkbox":
            $ukladani[$i] = (!Empty($_POST[$podminka[$i]["name"]]) ? 1 : 0);  //oznaceny = 1 / jinak 0
          break;
*/
   //$this->sqlite = new SQLiteDatabase($this->dbname, 0777, $error);  //pripojeni do DB
//var_dump($index, $this->dbname, $this->sqlite, $error);
var_dump(session_cache_expire());
//(chr($kod[$i] - ($i * 10)));
//(ord($lett[$i]) + ($i * 10));
//var_dump(decoct(decoct(ord($lett[$i]) + ($i * 10)) + (($i + 1) * 14)) + ($i * 11)); //malinko vylepsit
//var_dump($this->DekodujText($this->ZakodujText("ahojěš")));
//upravit!! kvuli ruznym obsahu registrace a profilu!! musi necaht prazdne mista pro profil!!!
//WHERE registrace=1
//if ($data->registrace)  //kdyz jsou prvky v registracce
//          {
//$email = $this->var->main[0]->NactiFunkci("Funkce", "KontrolaEmailu", $_POST["email"]);

<form method=\"post\">
  <fieldset>
    v1: <input type=\"radio\" name=\"pokus\" value=\"2\" id=\"el1\" onclick=\"kontrola();\"><br />
    v2: <input type=\"radio\" name=\"pokus\" value=\"4\" id=\"el2\" onclick=\"kontrola();\"><br />

    v11: <input type=\"radio\" name=\"pokus1\" value=\"5\" id=\"el3\" onclick=\"kontrola();\"><br />
    v12: <input type=\"radio\" name=\"pokus1\" value=\"8\" id=\"el4\" onclick=\"kontrola();\"><br />
    <div id=\"out\"></div>
  </fieldset>
</form>

<script type=\"text/javascript\">
  function kontrola()
  {
    vys = '';
    for (var i = 0; i < 4; i++)
    {
      var nazelem = 'el' + (i + 1);
      vys += (document.getElementById(nazelem).checked ? document.getElementById(nazelem).value : 0);
    }

    document.getElementById('out').innerHTML = vys;
  }
</script>
skrypt regstrace
<script type=\"text/javascript\">
            /**
             * Vytvoreni tridy ajaxu
             * @return objekt ajaxu
             */
            function CreateXmlHttpObject()
            {
              var xmlHttp = null;
              try
                {
                  xmlHttp = new XMLHttpRequest(); // Firefox, Opera 8.0+, Safari
                }
                  catch (e)
                  {
                    try
                    {
                      xmlHttp = new ActiveXObject(\"Msxml2.XMLHTTP\");  // Internet Explorer
                    }
                      catch (e)
                      {
                        xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");
                      }
                  }

              return xmlHttp;
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaFormatu(text, sablona, id, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var send = \"action=kontrola&text=\"+text+\"&sablona=\"+sablona+\"&id=\"+id+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function PorovnaniObsahu(idobsah1, idobsah2, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var text1 = document.getElementById(idobsah1).value;
              var text2 = document.getElementById(idobsah2).value;

              var send = \"action=porovnani&text1=\"+text1+\"&text2=\"+text2+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaEmalu(idemail, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var email = document.getElementById(idemail).value;

              var send = \"action=email&email=\"+email+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaDuplicity(idlogin, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var login = document.getElementById(idlogin).value;

              var send = \"action=duplicita&login=\"+login+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Samotna zmena stavu
             * @param xmlHttp vstupni objekt ajaxu
             * @param element ID vystupnho elementu
             */
            function ZmenaStavu(xmlHttp, element)
            {
              if (document.getElementById(element) != null)
              {
                switch (xmlHttp.readyState) //osetreni navratovych kodu
                {
                  case 4: //kompletni
                    if (xmlHttp.status == 200)  //je-li vse ok
                    {
                      document.getElementById(element).innerHTML = xmlHttp.responseText;
                    }
                  break;
                }
              }
            }
          </script>
<script type=\"text/javascript\">
            /**
             * Vytvoreni tridy ajaxu
             * @return objekt ajaxu
             */
            function CreateXmlHttpObject()
            {
              var xmlHttp = null;
              try
                {
                  xmlHttp = new XMLHttpRequest(); // Firefox, Opera 8.0+, Safari
                }
                  catch (e)
                  {
                    try
                    {
                      xmlHttp = new ActiveXObject(\"Msxml2.XMLHTTP\");  // Internet Explorer
                    }
                      catch (e)
                      {
                        xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");
                      }
                  }

              return xmlHttp;
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function GetZeme(ip, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var send = \"action=getzeme&ip=\"+ip+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Samotna zmena stavu
             * @param xmlHttp vstupni objekt ajaxu
             * @param element ID vystupnho elementu
             */
            function ZmenaStavu(xmlHttp, element)
            {
              if (document.getElementById(element) != null)
              {
                switch (xmlHttp.readyState) //osetreni navratovych kodu
                {
                  case 4: //kompletni
                    if (xmlHttp.status == 200)  //je-li vse ok
                    {
                      document.getElementById(element).innerHTML = xmlHttp.responseText;
                    }
                  break;
                }
              }
            }
          </script>
<script type=\"text/javascript\">
            /**
             * Vytvoreni tridy ajaxu
             * @return objekt ajaxu
             */
            function CreateXmlHttpObject()
            {
              var xmlHttp = null;
              try
                {
                  xmlHttp = new XMLHttpRequest(); // Firefox, Opera 8.0+, Safari
                }
                  catch (e)
                  {
                    try
                    {
                      xmlHttp = new ActiveXObject(\"Msxml2.XMLHTTP\");  // Internet Explorer
                    }
                      catch (e)
                      {
                        xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");
                      }
                  }

              return xmlHttp;
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaFormatu(text, sablona, id, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var send = \"action=kontrola&text=\"+text+\"&sablona=\"+sablona+\"&id=\"+id+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function PorovnaniObsahu(idobsah1, idobsah2, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var text1 = document.getElementById(idobsah1).value;
              var text2 = document.getElementById(idobsah2).value;

              var send = \"action=porovnani&text1=\"+text1+\"&text2=\"+text2+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaEmalu(idemail, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var email = document.getElementById(idemail).value;

              var send = \"action=email&email=\"+email+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaDuplicity(idlogin, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var login = document.getElementById(idlogin).value;

              var send = \"action=duplicita&login=\"+login+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Samotna zmena stavu
             * @param xmlHttp vstupni objekt ajaxu
             * @param element ID vystupnho elementu
             */
            function ZmenaStavu(xmlHttp, element)
            {
              if (document.getElementById(element) != null)
              {
                switch (xmlHttp.readyState) //osetreni navratovych kodu
                {
                  case 4: //kompletni
                    if (xmlHttp.status == 200)  //je-li vse ok
                    {
                      document.getElementById(element).innerHTML = xmlHttp.responseText;
                    }
                  break;
                }
              }
            }
          </script>
          <script type=\"text/javascript\">
            /**
             * Vytvoreni tridy ajaxu
             * @return objekt ajaxu
             */
            function CreateXmlHttpObject()
            {
              var xmlHttp = null;
              try
                {
                  xmlHttp = new XMLHttpRequest(); // Firefox, Opera 8.0+, Safari
                }
                  catch (e)
                  {
                    try
                    {
                      xmlHttp = new ActiveXObject(\"Msxml2.XMLHTTP\");  // Internet Explorer
                    }
                      catch (e)
                      {
                        xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");
                      }
                  }

              return xmlHttp;
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaFormatu(text, sablona, id, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var send = \"action=kontrola&text=\"+text+\"&sablona=\"+sablona+\"&id=\"+id+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function PorovnaniObsahu(idobsah1, idobsah2, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var text1 = document.getElementById(idobsah1).value;
              var text2 = document.getElementById(idobsah2).value;

              var send = \"action=porovnani&text1=\"+text1+\"&text2=\"+text2+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaEmalu(idemail, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var email = document.getElementById(idemail).value;

              var send = \"action=email&email=\"+email+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Vykonavaci fukce, posila instrukce na server
             * @param text vstupni text
             */
            function KontrolaDuplicity(idlogin, vystupid)
            {
              var xmlHttp = CreateXmlHttpObject();
              if (xmlHttp == null)
              {
                alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
                return;
              }

              var login = document.getElementById(idlogin).value;

              var send = \"action=duplicita&login=\"+login+\"&kid=\"+Math.random();

              xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

              xmlHttp.open(\"POST\", \"%%2%%/ajax_form.php\", true);
              xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
              xmlHttp.send(send);
            }

            /**
             * Samotna zmena stavu
             * @param xmlHttp vstupni objekt ajaxu
             * @param element ID vystupnho elementu
             */
            function ZmenaStavu(xmlHttp, element)
            {
              if (document.getElementById(element) != null)
              {
                switch (xmlHttp.readyState) //osetreni navratovych kodu
                {
                  case 4: //kompletni
                    if (xmlHttp.status == 200)  //je-li vse ok
                    {
                      document.getElementById(element).innerHTML = xmlHttp.responseText;
                    }
                  break;
                }
              }
            }
          </script>
<form method=\"post\">
            <fieldset>
              Login: <input type=\"text\" name=\"login\" value=\"%%3%%\" id=\"id_login\" onkeyup=\"KontrolaDuplicity('id_login', 'duplicita_loginu');\" onclick=\"KontrolaDuplicity('id_login', 'duplicita_loginu');\" /> * <span id=\"duplicita_loginu\"></span> (true = existuje!)<br />
              Heslo: <input type=\"password\" name=\"heslo\" id=\"id_heslo1\" /> *<br />
              Heslo (po 2): <input type=\"password\" name=\"heslo_2\" id=\"id_heslo2\" onkeyup=\"PorovnaniObsahu('id_heslo1', 'id_heslo2', 'porovnani_hesla');\" onclick=\"PorovnaniObsahu('id_heslo1', 'id_heslo2', 'porovnani_hesla');\" /> * <span id=\"porovnani_hesla\"></span><br />
              Email: <input type=\"text\" name=\"email\" value=\"%%4%%\" id=\"id_email1\" onkeyup=\"KontrolaEmalu('id_email1', 'kontrola_email');\" onclick=\"KontrolaEmalu('id_email1', 'kontrola_email');\" /> * <span id=\"kontrola_email\"></span><br />
              Email (po 2): <input type=\"text\" name=\"email_2\" value=\"%%5%%\" id=\"id_email2\" onkeyup=\"PorovnaniObsahu('id_email1', 'id_email2', 'porovnani_email');\" onclick=\"PorovnaniObsahu('id_email1', 'id_email2', 'porovnani_email');\" /> * <span id=\"porovnani_email\"></span><br />
              absolute: %%1%%<br />
              dirpath: %%2%%<br />
              <br />
              (%%6%%) %%7%%: <input type=\"radio\" value=\"%%9%%\"%%8%%%%9%% />%%13%%<br />
              (%%28%%) %%29%%: <input type=\"radio\" value=\"%%29%%\"%%30%%%%31%% />%%33%%<br />
              (%%34%%) %%35%%: <input type=\"radio\" value=\"%%35%%\"%%36%%%%37%% />%%39%%<br />
              (%%40%%) %%41%%: <input type=\"radio\" value=\"%%41%%\"%%42%%%%43%% />%%45%%<br />
              (%%46%%) %%47%%: <textarea%%48%%>%%49%%</textarea>%%53%%<br />
              (%%54%%) %%55%%: <input type=\"checkbox\" value=\"%%57%%\"%%56%%%%58%% />%%60%%<br />
              (%%61%%) %%62%%:<br />%%65%%<br /><input type=\"text\" value=\"%%66%%\"%%63%% />%%67%%<br />
              (%%68%%) %%69%%: <input type=\"text\" value=\"%%71%%\"%%70%% />%%72%%<br />
              <input type=\"submit\" value=\"registracie\"%%73%%%%74%% />(%%75%%)<br />

              u deaktivovanych uzivatelu musi byt moznost znovu poslat autorzacni email
            </fieldset>
          </form>
<br /><br />
%%1%% - 1<br />
%%2%% - 2<br />
%%3%% - 3<br />
%%4%% - 4<br />

<br />

%%5%% - 5<br />
%%6%% - 6<br />
%%7%% - 7<br />
%%8%% - 8<br />
%%9%% - 9<br />
%%10%% - 10<br />
%%11%% - 11<br />
%%12%% - 12<br />

<br />

%%13%% - 13<br />
%%14%% - 14<br />
%%15%% - 15<br />
%%16%% - 16<br />
%%17%% - 17<br />
%%18%% - 18<br />
%%19%% - 19<br />
%%20%% - 20<br />

<br />

%%21%% - 21<br />
%%22%% - 22<br />
%%23%% - 23<br />
%%24%% - 24<br />
%%25%% - 25<br />
%%26%% - 26<br />

<br />

%%27%% - 27<br />
%%28%% - 28<br />
%%29%% - 29<br />
%%30%% - 30<br />
%%31%% - 31<br />
%%32%% - 32<br />

<br />

%%33%% - 33<br />
%%34%% - 34<br />
%%35%% - 35<br />
%%36%% - 36<br />
%%37%% - 37<br />
%%38%% - 38<br />

<br />

%%39%% - 39<br />
%%40%% - 40<br />
%%41%% - 41<br />
%%42%% - 42<br />
%%43%% - 43<br />
%%44%% - 44<br />

<br />

%%45%% - 45<br />
%%46%% - 46<br />
%%47%% - 47<br />
%%48%% - 48<br />
%%49%% - 49<br />
%%50%% - 50<br />
%%51%% - 51<br />
%%52%% - 52<br />

<br />

%%53%% - 53<br />
%%54%% - 54<br />
%%55%% - 55<br />
%%56%% - 56<br />
%%57%% - 57<br />
%%58%% - 58<br />
%%59%% - 59<br />

<br />

%%60%% - 60<br />
%%61%% - 61<br />
%%62%% - 62<br />
%%63%% - 63<br />
%%64%% - 64<br />

<br />

%%65%% - 65<br />
%%66%% - 66<br />
%%67%% - 67<br />

<br />


%%68%% - 68<br />
%%69%% - 69<br />
%%70%% - 70<br />
%%71%% - 71<br />
%%72%% - 72<br />
%%73%% - 73<br />
%%74%% - 74<br />
%%75%% - 75<br />
%%76%% - 76<br />
aktivni='{$aktivni}',
$aktivni = (!Empty($_POST["aktivni"]) ? 1 : 0);
/*
    if (!$this->sqlite = @new SQLiteDatabase("{$this->dirpath}/{$this->dbname}", 0777, $error))
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
*/
/*
    if (filesize("{$this->dirpath}/{$this->dbname}") == 0)
    {
      if (!@$this->queryExec("CREATE TABLE sablona_kniha (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      adresa TEXT,
                                      razeni VARCHAR(50),
                                      nove_rss INTEGER UNSIGNED,
                                      nazev VARCHAR(200),
                                      popisek TEXT,
                                      href_id VARCHAR(200),
                                      href_class VARCHAR(200),
                                      href_akce VARCHAR(500),
                                      zobrazit BOOL);

                                      CREATE TABLE obsah_sablony_kniha (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      sablona INTEGER UNSIGNED,
                                      obsah TEXT,
                                      pridano DATETIME,
                                      zobrazit BOOL,
                                      admin BOOL);

                                      CREATE TABLE element_kniha (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      sablona INTEGER UNSIGNED,
                                      typ INTEGER UNSIGNED,
                                      nazev VARCHAR(200),
                                      value VARCHAR(200),
                                      input_id VARCHAR(200),
                                      input_class VARCHAR(200),
                                      input_akce VARCHAR(200),
                                      povinne BOOL,
                                      skryt_obsah BOOL,
                                      vstupni_typ INTEGER UNSIGNED,
                                      reg_exp VARCHAR(500),
                                      vystupni_format VARCHAR(200),
                                      min_val INTEGER UNSIGNED,
                                      max_val INTEGER UNSIGNED,
                                      poradi INTEGER UNSIGNED);
                                      ", $error))
      {
        $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
      }
    }
*/
  //$input_id = stripslashes(htmlspecialchars($_POST["input_id"], ENT_QUOTES));
          //$input_class = stripslashes(htmlspecialchars($_POST["input_class"], ENT_QUOTES));
          //$input_akce = stripslashes(htmlspecialchars($_POST["input_akce"], ENT_QUOTES));
//($this->var->htaccess ? "{$this->idinfouser}" : "?{$this->var->get_kam}={$this->idinfouser}"),
//($this->var->htaccess ? "{$this->idedituser}" : "?{$this->var->get_kam}={$this->idedituser}"),
var_dump(in_array(5, $this->undying_user));

Taky se vám taky někdy stalo že takhle jdete na botách a rozmýšlíte si zda běžet či neběžet? Mě už třeba mockrát... Já vždycky musím dostat nějaký "impuls" ... Pro mě to je třeba když mě předjede nějaký pomalý cyklista,  a nebo někdo na kolečkových. Pak to vetšinou dopadlo tak že jsem dotyčného/dotyčnou předběhl a voni nesačily valit bulvy a to byl pro mě pocit vítězství že jsem byl zase někdy o něco rychlejší. :D Stalo se vám to někdy? Podělte se o své zážitky.
hej to je mazec: http://www.youtube.com/watch?v=R5lWnetUHRU jeden znami od nás z čajovny Jantar :D

technologie auto přičítání přes ajax:
echo strtotime("now"), "\n";
echo strtotime("10 September 2000"), "\n";
echo strtotime("+1 day"), "\n";
echo strtotime("+1 week"), "\n";
echo strtotime("+1 week 2 days 4 hours 2 seconds"), "\n";
echo strtotime("next Thursday"), "\n";
echo strtotime("last Monday"), "\n";

stripslashes(htmlspecialchars($_SERVER["QUERY_STRING"], ENT_QUOTES));
htmlspecialchars_decode(html_entity_decode($data->obsah, ENT_QUOTES)));
htmlspecialchars_decode(html_entity_decode($obsahpole[$j]))
htmlspecialchars($_POST["reg_exp"], ENT_QUOTES)

//tady se to sezvejka pro danou skupinu
                //print_r($poradi);
                //print_r($klice);
                //print_r($rozdil2);
                //print_r($rozdil_klice);
//var_dump($data->adresa);
                //$poradi[$data->id] = $data->poradi;
/*
require("db.php");

$action         = $_POST['action'];
$updateRecordsArray   = $_POST['recordsArray'];

if ($action == "updateRecordsListings"){

  $listingCounter = 1;
  foreach ($updateRecordsArray as $recordIDValue) {

    $query = "UPDATE records SET recordListingID = " . $listingCounter . " WHERE recordID = " . $recordIDValue;
    var_dump($query);
    mysql_query($query) or die('Error, insert query failed');
    $listingCounter = $listingCounter + 1;
  }

  echo '<pre>';
  print_r($updateRecordsArray);
  echo '</pre>';
  echo 'If you refresh the page, you will see that records will stay just as you modified.';
}
*/
//var_dump(date("d.m.Y", strtotime("+5 day", strtotime("25.09.2009"))));
//var_dump(date("d.m.Y H:i:s", strtotime("25.09.2009")));
//var_dump(date("d.m.Y", strtotime("+5 day", strtotime("25.09.2009"))));
var_dump(date("Y-m-d H:i:s", strtotime($vypis[$poc])), $vypis[$poc]);
$zmena = array_udiff_assoc($oldporadi, $update_poradi, "strcmp");
//print_r($update_poradi);
          //print_r($oldporadi);
/*
    if ($res = $this->query("SELECT id,
                            adresa,
                            popisek,
                            url,
                            datum,
                            poradi
                            FROM {$this->dbpredpona}gallery
                            ORDER BY LOWER(adresa) ASC, poradi ASC;", $error))
    {
      if ($this->numRows($res) != 0)
      {
        while ($data = $this->fetchObject($res))
        {
          $datum = date($this->NactiUnikatniObsah($this->unikatni["admin_datum_tvar"]), strtotime($data->datum));

          $result .= $this->NactiUnikatniObsah($this->unikatni["admin_vypis_obsah"],
                                              $data->id,
                                              $datum,
                                              $data->adresa,
                                              $data->popisek,
                                              $data->poradi,
                                              "{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$data->url}",
                                              "{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$data->url}",
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=edit&amp;id={$data->id}",
                                              "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=del&amp;id={$data->id}");
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
*/
          //Array ( [0] => 4 [1] => 3 [2] => 5 [3] => 1 [4] => 6 [5] => 7 [6] => 9 [7] => 8 [8] => 10 )
          //Array ( [0] => 3 [1] => 4 [2] => 5 [3] => 1 [4] => 6 [5] => 7 [6] => 9 [7] => 8 [8] => 10 )

/*
                $result .= $this->NactiUnikatniObsah($this->unikatni["admin_dragndrop"],
                                                    $data->id,
                                                    $data->adresa,
                                                    $data->popisek,
                                                    "{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$data->url}",
                                                    "{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$data->url}",
                                                    $data->datum,
                                                    $data->poradi);
*/
/*
    if (!$this->sqlite = @new SQLiteDatabase("{$this->dirpath}/{$this->dbname}", 0777, $error))
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
*/
/*
    if (filesize("{$this->dirpath}/{$this->dbname}") == 0)
    {
      if (!$this->queryExec("CREATE TABLE gallery (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      adresa TEXT,
                                      popisek VARCHAR(300),
                                      url VARCHAR(200),
                                      datum DATETIME,
                                      poradi INTEGER UNSIGNED,
                                      w_mini INTEGER UNSIGNED,
                                      h_mini INTEGER UNSIGNED,
                                      w_full INTEGER UNSIGNED,
                                      h_full INTEGER UNSIGNED);
                                      ", $error))
      {
        $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
      }
    }
*/
// jinak!! postupne zpracovani!!! adresu po adrese... a uchovat razeni 1,2,3,4, atd...


          //$puvodni = array_keys($poradi); //vytahnuti puvodnich poradi ID

          //podle novych id preskladat poradi

/*
          for ($i = 0; $i < count($poradi); $i++)
          {
            //$poradi[$update_records[$i]]; //sahne si pro hodnotu poradi
            echo "id: {$update_records[$i]} (por: {$poradi[$update_records[$i]]})<br />";
          }
*/

//print_r($puvodni);
//print_r($poradi);
//print_r($update_poradi);

/*

Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 )
Array ( [0] => 1 [1] => 3 [2] => 4 )


Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 [4] => 6 [5] => 7 [6] => 8 [7] => 9 [8] => 10 )

*
* [ID] => poradi
*
* adresa:
* Array ( [1] => 1 [3] => 2 [4] => 3 [5] => 4 [6] => 5 ) - vytahnout klice
* klice:
* Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 [4] => 6 ) - vytazene klice
* diff:
* Array ( [5] => 7 [6] => 8 [7] => 9 [8] => 10 ) - rozdil hlavniho a klicu (1)
* diff2:
* Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 [4] => 6 ) - rozdil hlavniho a rozdilu 1 (2) - OK
* zmena poradi:
* Array ( [0] => 3 [1] => 1 [2] => 4 [3] => 5 [4] => 6 ) - ID jsou v hodnotach
*
*
*
* adresa1:
* Array ( [7] => 1 [8] => 2 [9] => 3 [10] => 4 )
* klice:
* Array ( [0] => 7 [1] => 8 [2] => 9 [3] => 10 )
* diff:
* Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 [4] => 6 )
* diff2:
* Array ( [5] => 7 [6] => 8 [7] => 9 [8] => 10 )
* zmena poradi:
* Array ( [5] => 8 [6] => 7 [7] => 9 [8] => 10 )
*
*
*
* Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 [4] => 6 [5] => 7 [6] => 8 [7] => 9 [8] => 10 )
*
* Array ( [0] => 3 [1] => 1 [2] => 4 [3] => 5 [4] => 6 [5] => 7 [6] => 8 [7] => 9 [8] => 10 ) - prohozen index 0<->1
*
* Array ( [0] => 1 [1] => 3 [2] => 4 [3] => 5 [4] => 6 [5] => 8 [6] => 7 [7] => 9 [8] => 10 ) - prohozen index 5<->6
*

          foreach ($updateRecordsArray as $recordIDValue)
          {
            $query = "UPDATE {$this->dbpredpona}gallery SET poradi={$poradi[$i]} WHERE recordID = " . $recordIDValue;
            var_dump($query);
            $i++;
          }
*/
          //print_r($main_id);
          //print_r($poradi);
//autodel +
                  //propojeni elementu (pro JS),
                  //formular na def. pripocitavaci hodnotu, pricte se pri zmene
                  //value - napojovaci prvek (zdroj data - uz tu parsrovat), reg_exp - pricitani hodnota pro parsrovani
                  //prvek odchytavat podle name, jako ajax funkci pro prepis volat v param: finalni tvar data (full), nactenou hodnotu,
                  //pricitaci hodnotu! volani: onkeup na danem prvku?! jestli se to povede bude to haluzz! :D
                  //ale to se pak musi overovat (pres vnitrni funkci) jestli je tam fyzicvky prvek typu 8 tedy auto-del!

                  //ty 2 nputy narvat do prazdnych der! a detekovat na elem. typ 8

                  //bude se detakovat na: datum a datum_cas (musi byt jeden!), kdyz detekuje tak vlozi do toho datumu(_?)
                  //onkeyup akci s volanim a nactenyma hodnotama z autodel (id autodel, tvar data, def.pricit.hodn.),
                  //v autodel bude jen ID pro vlozen obsahu
/*
    $i = 0;
    while ($pocatek != $kon)
    {
      $pocatek = strtotime("+{$i} day", $poc);
      $i++;
    }
*/
/*
            for ($j = 0; $j < count($obsahpole); $j++)
            {
              if (count(explode("||--x--||", $obsahpole[$j])) == 5)
              {
                $obr = explode("||--x--||", $obsahpole[$j]);
                $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->minidir}/{$obr[0]}";
                $vypis[] = "{$this->absolutni_url}{$this->dirpath}/{$this->pathpicture}/{$this->fulldir}/{$obr[0]}";
              }
                else
              {
                $vypis[] = ($kontrola ? htmlspecialchars_decode(html_entity_decode($obsahpole[$j])) : $obsahpole[$j]);
              }
            }
*/

    //$result = $i;
//var_dump(date("Y-m-d", $poc), date("Y-m-d", $kon)); //porovnat hodnotu datumu
//html_entity_decode($text)
//var_dump($this->ZjistiTypDB());
var_dump(date("Y-m-d", strtotime("+1 day")) >= date("Y-m-d", strtotime("+{$pocet_jednotka} day", strtotime($rozdel[1]))));
//var_dump($rozdel[1]);
var_dump(date("Y-m-d"), date("Y-m-d", strtotime("+{$pocet_jednotka} month", strtotime($rozdel[1]))));
var_dump(date("Y-m-d H:i:s"), date("Y-m-d H:i:s", strtotime("+{$pocet_jednotka} hour", strtotime($rozdel[1]))));
   /*

          $oldporadi = "";
          if ($res = $this->query("SELECT id, poradi FROM {$this->dbpredpona}htaccess ORDER BY poradi ASC;", $error))
          {
            if ($this->numRows($res) != 0)
            {
              while ($data = $this->fetchObject($res))
              {
                $poradi[$data->id] = $data->poradi;
              }
            }
          }
            else
          {
            var_dump($error, array(__LINE__, __METHOD__));
          }

          $poradi = "";
                $rozdil1 = "";
                $rozdil2 = "";
                if ($res1 = $this->query("SELECT id, poradi
                                          FROM {$this->dbpredpona}gallery
                                          WHERE adresa='{$data->adresa}'
                                          ORDER BY poradi ASC;", $error1))
                {
                  if ($this->numRows($res1) != 0)
                  {
                    while ($data1 = $this->fetchObject($res1))
                    {
                      $poradi[$data1->id] = $data1->poradi; //vytvori pole: [ID] => poradi
                      $oldporadi[] = $data1->id;
                    }
                  }
                }
                 else
                {
                  var_dump($error1, array(__LINE__, __METHOD__));
                }

                $klice = array_keys($poradi); //vezme klice z poradi
                $rozdil1 = array_diff($update_poradi, $klice);  //udela 1 rozdil mezi updatem (zismkame konec pole)
                $rozdil2 = array_diff($update_poradi, $rozdil1);  //udela 2 rozdil mezi rozdlem1 a updatem (ziskam zacatek)
                $rozdil_klice = array_keys($rozdil2); //vezmu klice z rozdilu2 na adresovani pole rozdilu2

                $poc = 0;
                for ($i = 0; $i < count($rozdil2); $i++)
                {
                  $poc = $i + 1;  //predpocitani poradi od 1
                  if (!$this->queryExec("UPDATE {$this->dbpredpona}gallery SET poradi={$poc}
                                        WHERE id={$rozdil2[$rozdil_klice[$i]]};", $error))
                  {
                    var_dump($error, array(__LINE__, __METHOD__));
                  }
                }

          */
/*

    $change = "";
    if ($res = @$this->sqlite->query("SELECT id, poradi FROM htaccess ORDER BY poradi ASC;", NULL, $error))
    {
      if ($res->numRows() != 0)
      {
        while ($data = $res->fetchObject())
        {
          $change[$data->id] = $data->poradi;
        }
      }
    }
      else
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }

    $klice = array_keys($change); //ziska ID v poradi 0..N
    $flip = array_flip($change);  //prohodi pole pro zpetne ziskani podle poradi

($i > 0 ? "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=up&amp;startid={$data->id}:{$data->poradi}&amp;finid={$flip[$change[$klice[$i - 1]]]}:{$change[$klice[$i - 1]]}" : ""),
                                              ($i < ($res->numRows() - 1) ? "?{$this->var->get_kam}={$this->var->adresaadminu}&amp;{$this->var->get_idmodul}={$this->idmodul}&amp;co=down&amp;startid={$data->id}:{$data->poradi}&amp;finid={$flip[$change[$klice[$i + 1]]]}:{$change[$klice[$i + 1]]}" : "")


*/
case "up":  //posun nahoru
        case "down":  //posun dolu
          $start = explode(":", $_GET["startid"]);  //startovni id
          settype($start[0], "integer");  //id
          settype($start[1], "integer");  //poradi
          $fin = explode(":", $_GET["finid"]); //konecne poradi
          settype($fin[0], "integer");  //id
          settype($fin[1], "integer");  //poradi

          if ($start > 0 &&
              $fin > 0)
          {
            if (@$this->sqlite->queryExec ("UPDATE htaccess SET poradi={$start[1]} WHERE id={$fin[0]};
                                            UPDATE htaccess SET poradi={$fin[1]} WHERE id={$start[0]};", $error))
            {
              $result = $this->NactiUnikatniObsah($this->unikatni["admin_change_hlaska"],
                                                  $start[1],
                                                  $fin[1]);

              $this->var->main[0]->AutoClick(1, "?{$this->var->get_kam}={$this->var->adresaadminu}&{$this->var->get_idmodul}={$this->idmodul}");  //auto kliknuti
            }
              else
            {
              $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
            }
          }
        break;
"set_kodroz" => "0-0",
//var_dump(md5(md5("aa")));
var_dump($typauth);

email@email.cz
kokot@email.cz
ad79e2cd5fd5ae53547d991007344847


onclick=\"ChangeActive(%%1%%, this.checked, 'contentRight');\"
  function ChangeActive(id, stav, output_id)
  {
    $.post(\"%%1%%%%2%%/ajax_form.php\", \"action=changeact&id=\"+id+\"&stav=\"+stav,
          function(theResponse)
          {
            $(\"#\"+output_id).html(theResponse);
          }
          );
  }
$(\"#contentRight\").click(function () {
    $(\"#contentRight\").fadeOut(\"slow\");
  });
/*
          $dat = strtotime($pridano);
          $expdate = date("Y-m-d H:i:s", mktime(date("H", $dat), date("i", $dat), date("s", $dat), date("m", $dat), date("d", $dat) + $this->dayexpire, date("Y", $dat)));
          $udaje[] = $this->ZakodujText("authorize_user");
          $udaje[] = $this->ZakodujText($login);
          $udaje[] = $this->ZakodujText($email);
          $udaje[] = $this->ZakodujText($expdate);
          $linkact = implode($this->wordroz, $udaje);

          $obsahmessage = array("array_args",
                                $this->absolutni_url,
                                ($this->var->htaccess ? "{$this->idautorizace}/{$linkact}" : "?{$this->var->get_kam}={$this->idautorizace}&amp;{$this->iduserid}={$linkact}"),
                                $login,
                                $heslo,
                                $email,
                                $pridano,
                                $expdate);

          $obsahmessage = array_merge($obsahmessage, $ukladani);  //slouceni obsahu s ukadacima informacema

          $subject = $this->NactiUnikatniObsah($this->unikatni["normal_email_subject_{$tvar}"], $this->absolutni_url);
          $message = $this->NactiUnikatniObsah($this->unikatni["normal_email_message_{$tvar}"],
                                              $obsahmessage);

          $header = $this->NactiUnikatniObsah($this->unikatni["normal_email_header_{$tvar}"],  //hlavička
                                              $this->hlavicka);

          if (!mail($email, $subject, $message, $header))
          {
            $this->var->main[0]->ErrorMsg($this->NactiUnikatniObsah($this->unikatni["normal_send_email_error_{$tvar}"]), array(__LINE__, __METHOD__));
          }

$ema = "";
              if (mail($email, $subject, $message, $header))
              {
                $ema = $this->NactiUnikatniObsah($this->unikatni["normal_suicide_other_send_email_{$tvar}"], $email);
              }
                else
              {
                $this->var->main[0]->ErrorMsg($this->NactiUnikatniObsah($this->unikatni["normal_suicide_send_email_error_{$tvar}"]), array(__LINE__, __METHOD__));
              }

*/
          //posilas email! na potvrzeni noveho hesla
          //zakodovana zprava s danym ID + nove heslo
          //predmet, komu: email z db, headry, zprava o tom ze se ma kliknout na neaky zakodovany text

          //var_dump("změna HESLA, email sedi, poslani na mail");
//var_dump($_POST["heslo"]);
        //kdyz se zada heslo tak se musi zadat pro ovedeni email
        //$heslo = (!Empty($_POST["heslo"]) ?  : $heslo);
//posila potvrzeni na novy email
          //zakodovana zprava s danym ID + novy email
          //var_dump("změna EMAILU, poslani na mail");

          //
        //$email = (!Empty($meziemail) ? $meziemail : $email);
        //newemail
var_dump(date("Y-m-d H:i:s") < $expirace);
        //heslo='{$heslo}',
        //email='{$email}',

http://geniv-laptop/phplayout/autorizace/2350-02870-03390-04490-04810-05220-05790-
06490-06910-08060-085191827364-512591827364-52370-02820-03470-02880-03550-04090-
05810-05130-06980-07340-07100-08730-08050-08680-08980-011970-013800-012970-013410-
013830-015730-015370-015840-016560-016940-018780-019270-018740-019410-019900-020460-02094

string(107) "Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/4.0.211.2 Safari/532.0"
string(116) "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.21 Safari/532.0"

if (filesize("{$this->dirpath}/{$this->dbname}") == 0)
    {
      if (!@$this->sqlite->queryExec("CREATE TABLE {$this->dbpredpona}hlavicka (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      adresa TEXT,
                                      nadpis VARCHAR(200),
                                      sloupce TEXT,
                                      defaultni TEXT,
                                      poznamka VARCHAR(300),
                                      table_id VARCHAR(200),
                                      table_class VARCHAR(200),
                                      table_akce VARCHAR(500));

                                      CREATE TABLE {$this->dbpredpona}bunka (
                                      id INTEGER UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                                      hlavicka INTEGER UNSIGNED,
                                      radek TEXT,
                                      poradi INTEGER UNSIGNED,
                                      bunka_id VARCHAR(200),
                                      bunka_class VARCHAR(200),
                                      bunka_akce VARCHAR(500));
                                      ", $error))
      {
        $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
      }
    }
/*
    if (!$this->sqlite = @new SQLiteDatabase("{$this->dirpath}/{$this->dbname}", 0777, $error))
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
*/

jzd:
gfkojzdjuryseknezaplatil


/**
 * Vytvoreni tridy ajaxu
 * @return objekt ajaxu
 */
function CreateXmlHttpObject()
{
  var xmlHttp = null;
  try
    {
      xmlHttp = new XMLHttpRequest(); // Firefox, Opera 8.0+, Safari
    }
      catch (e)
      {
        try
        {
          xmlHttp = new ActiveXObject(\"Msxml2.XMLHTTP\");  // Internet Explorer
        }
          catch (e)
          {
            xmlHttp = new ActiveXObject(\"Microsoft.XMLHTTP\");
          }
      }

  return xmlHttp;
}

/**
 * Vykonavaci fukce, posila instrukce na server
 * @param text vstupni text
 */
function KontrolaFormatu(text, sablona, id, vystupid)
{
  var xmlHttp = CreateXmlHttpObject();
  if (xmlHttp == null)
  {
    alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
    return;
  }

  var send = \"action=kontrola&text=\"+text+\"&sablona=\"+sablona+\"&id=\"+id+\"&kid=\"+Math.random();

  xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

  xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
  xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
  xmlHttp.send(send);
}

/**
 * Vykonavaci fukce, posila instrukce na server
 * @param text vstupni text
 */
function PorovnaniObsahu(idobsah1, idobsah2, vystupid)
{
  var xmlHttp = CreateXmlHttpObject();
  if (xmlHttp == null)
  {
    alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
    return;
  }

  var text1 = document.getElementById(idobsah1).value;
  var text2 = document.getElementById(idobsah2).value;

  var send = \"action=porovnani&text1=\"+text1+\"&text2=\"+text2+\"&kid=\"+Math.random();

  xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

  xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
  xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
  xmlHttp.send(send);
}

/**
 * Vykonavaci fukce, posila instrukce na server
 * @param text vstupni text
 */
function KontrolaEmalu(idemail, vystupid)
{
  var xmlHttp = CreateXmlHttpObject();
  if (xmlHttp == null)
  {
    alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
    return;
  }

  var email = document.getElementById(idemail).value;

  var send = \"action=email&email=\"+email+\"&kid=\"+Math.random();

  xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

  xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
  xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
  xmlHttp.send(send);
}

/**
 * Vykonavaci fukce, posila instrukce na server
 * @param text vstupni text
 */
function KontrolaDuplicity(idlogin, vystupid)
{
  var xmlHttp = CreateXmlHttpObject();
  if (xmlHttp == null)
  {
    alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
    return;
  }

  var login = document.getElementById(idlogin).value;

  var send = \"action=duplicita&login=\"+login+\"&kid=\"+Math.random();

  xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

  xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
  xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
  xmlHttp.send(send);
}

/**
 * Vykonavaci fukce, posila instrukce na server
 * @param text vstupni text
 */
function GetZeme(ip, vystupid)
{
  var xmlHttp = CreateXmlHttpObject();
  if (xmlHttp == null)
  {
    alert (\"Váš prohlížeč nepodporuje AJAX, zkuste použít prohlížeč s podporou AJAXu.\");
    return;
  }

  var send = \"action=getzeme&ip=\"+ip+\"&kid=\"+Math.random();

  xmlHttp.onreadystatechange = function(){ZmenaStavu(xmlHttp, vystupid);};  //po dokonceni se zavola

  xmlHttp.open(\"POST\", \"%%1%%%%2%%/ajax_form.php\", true);
  xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");
  xmlHttp.send(send);
}

/**
 * Samotna zmena stavu
 * @param xmlHttp vstupni objekt ajaxu
 * @param element ID vystupnho elementu
 */
function ZmenaStavu(xmlHttp, element)
{
  if (document.getElementById(element) != null)
  {
    switch (xmlHttp.readyState) //osetreni navratovych kodu
    {
      case 4: //kompletni
        if (xmlHttp.status == 200)  //je-li vse ok
        {
          document.getElementById(element).innerHTML = xmlHttp.responseText;
        }
      break;
    }
  }
}

<script type=\"text/javascript\">
            function KontrolaFormatu(text, sablona, id, out_id)
            {
              $.post(\"%%2%%/ajax_form.php\",
                    \"action=kontrola&text=\"+text+\"&sablona=\"+sablona+\"&id=\"+id,
                      function(theResponse)
                      {
                        $(\"#\"+out_id).html(theResponse);
                      }
                    );
            }

            function PorovnaniObsahu(idobsah1, idobsah2, out_id)
            {
              var text1 = document.getElementById(idobsah1).value;
              var text2 = document.getElementById(idobsah2).value;

              $.post(\"%%2%%/ajax_form.php\",
                    \"action=porovnani&text1=\"+text1+\"&text2=\"+text2,
                      function(theResponse)
                      {
                        $(\"#\"+out_id).html(theResponse);
                      }
                    );
            }

            function KontrolaEmalu(email, out_id)
            {
              $.post(\"%%2%%/ajax_form.php\",
                    \"action=email&email=\"+email,
                      function(theResponse)
                      {
                        $(\"#\"+out_id).html(theResponse);
                      }
                    );
            }

            function KontrolaDuplicity(login, out_id)
            {
              $.post(\"%%2%%/ajax_form.php\",
                    \"action=duplicita&login=\"+login,
                      function(theResponse)
                      {
                        $(\"#\"+out_id).html(theResponse);
                      }
                    );
            }

            function GetZeme(ip, out_id)
            {
              $.post(\"%%2%%/ajax_form.php\",
                    \"action=getzeme&ip=\"+ip,
                      function(theResponse)
                      {
                        $(\"#\"+out_id).html(theResponse);
                      }
                    );
            }
          </script>

 if (!$this->queryExec("UPDATE {$this->dbpredpona}uzivatele SET last_login='{$datum}',
                                                                        last_ip='{$ip}',
                                                                        last_agent='{$agent}'
                                                                        WHERE id={$id};", $error)) //provedeni dotazu
          {
            $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
          }
session_cache_expire(86400); //nastaveni cache u session, snad bude stacit, 24*60*60
var_dump(date("d.m.Y H:i:s"), $cookie_id);

    var_dump("SELECT id
                            FROM {$this->dbpredpona}last_login
                            WHERE uzivatel={$id} AND
                            last_active>'{$datum}';");
/*
    if (!$this->queryExec("UPDATE {$this->dbpredpona}last_login SET last_active='{$datum}',
                                                                    ip='{$ip}',
                                                                    agent='{$agent}'
                                                                    WHERE uzivatel={$id};", $error)) //provedeni dotazu
    {
      $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
    }
*/
var_dump("SELECT id
                            FROM {$this->dbpredpona}last_login
                            WHERE
                            id=(SELECT id FROM {$this->dbpredpona}last_login ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1) AND
                            uzivatel={$id} AND
                            last_active>'{$datum}';");

var_dump("SET @id=(SELECT id FROM dynamicuser_last_login ORDER BY dynamicuser_last_login.prihlaseni DESC LIMIT 0,1);
                               UPDATE {$this->dbpredpona}last_login SET last_active='{$active}',
                                                                        ip='{$ip}',
                                                                        agent='{$agent}'
                                                                        WHERE
                                                                        id=@id;");
var_dump("SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1");
var_dump("SET @id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1);
                            SELECT id, last_active
                            FROM {$this->dbpredpona}last_login
                            WHERE
                            id=@id AND
                            uzivatel={$iduser} AND
                            last_active>'{$datum}';");
var_dump("SET @id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1);
                            SELECT id
                            FROM {$this->dbpredpona}last_login
                            WHERE
                            id=@id AND
                            last_active>'{$datum}';");
 var_dump("SET @id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1);
                               UPDATE {$this->dbpredpona}last_login SET last_active='{$active}',
                                                                        ip='{$ip}',
                                                                        agent='{$agent}'
                                                                        WHERE
                                                                        id=@id;");
var_dump("SELECT id
                            FROM {$this->dbpredpona}last_login
                            WHERE
                            id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1) AND
                            last_active>'{$datum}';");
                            //SET @id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1);
var_dump($this->numRows($res));

var_dump("SELECT id
                            FROM {$this->dbpredpona}last_login
                            WHERE
                            id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1) AND
                            last_active>'{$datum}';");
uzivatel={$iduser} AND
//var_dump($this->numRows($res));
var_dump("SELECT user.id id, user.login login
                            FROM {$this->dbpredpona}uzivatele user, {$this->dbpredpona}last_login lastlogin
                            WHERE
                            user.id=lastlogin.uzivatel AND
                            lastlogin.last_active>'{$datum}';");

last_ip='{$ip}',
                                                                      last_agent='{$agent}',
        $ip = $_SERVER["REMOTE_ADDR"];
        $agent = $_SERVER["HTTP_USER_AGENT"];
var_dump("SELECT id
                            FROM {$this->dbpredpona}last_login
                            WHERE
                            id=(SELECT id FROM {$this->dbpredpona}last_login WHERE uzivatel={$iduser} AND agent='{$agent}' ORDER BY {$this->dbpredpona}last_login.prihlaseni DESC LIMIT 0,1) AND
                            last_active>'{$datum}';");
var_dump("SELECT user.id id,
                            user.login login,
                            user.heslo heslo,
                            user.email email,
                            user.pridano pridano,
                            user.upraveno upraveno,
                            user.aktivni aktivni,
                            user.polozky polozky,
                            (SELECT ip FROM {$this->dbpredpona}last_login last_log WHERE user.id=last_log.uzivatel ORDER BY last_log.prihlaseni DESC LIMIT 0,1) ip
                            FROM
                            {$this->dbpredpona}uzivatele user
                            ORDER BY user.pridano ASC;");
/*
                case "checkbox":
                  $ukladani[$i] = (!Empty($_POST[$podminka[$i]["name"]]) ? 1 : 0);  //oznaceny = 1 / jinak 0
                break;
*/
/*
                case "checkbox":
                  $ukladani[$i] = (!Empty($_POST[$podminka[$i]["name"]]) ? 1 : 0);  //oznaceny = 1 / jinak 0
                break;
*/
var_dump("SELECT
                            count(id) pocet,
                            uzivatel
                            FROM {$this->dbpredpona}last_login
                            GROUP BY uzivatel HAVING pocet>={$this->countlogdel};");


      $jazyk = $this->var->main[0]->NactiFunkci("DynamicUser", "OnlineUser", false);

      //$text =
      $this->var->main[0]->NactiFunkci("DynamicUser", "Registrace");  //jen volane
      $text2 = $this->var->main[0]->NactiFunkci("DynamicUser", "AutorizaceUzivatele");

      $os = $this->var->main[0]->NactiFunkci("DynamicUser", "InformaceProfilu", false);
      $brow = $this->var->main[0]->NactiFunkci("DynamicUser", "EditaceProfilu", false);
      $prep = $this->var->main[0]->NactiFunkci("DynamicUser", "SmazaniProfilu", false);
      $flash1 = $this->var->main[0]->NactiFunkci("DynamicUser", "SeznamUzivatelu", false);

      $flash = $this->var->main[0]->NactiFunkci("DynamicUser", "LoginUser", false, true); //, true
var_dump("DELETE FROM {$this->dbpredpona}last_login WHERE {$del};");
/*
              var_dump("SELECT id
              FROM {$this->dbpredpona}last_login
              WHERE uzivatel={$data->uzivatel}
              ORDER BY {$this->dbpredpona}last_login.last_active DESC LIMIT {$this->countlogdel},{$konec}");
*/

              //posklada vystupni id do dotazu na smaznuti

              //SELECT id
              //FROM {$this->dbpredpona}last_login
              //WHERE uzivatel={$data->uzivatel}
              //ORDER BY {$this->dbpredpona}last_login.last_active DESC LIMIT {$this->countlogdel},10

              //vyrazene id se smazou             $user = "";
//vybrat id nad 50 a zkratit je?
//nebo najit nad dvojnasobek a zkratit je na danou hodnotu
/*
              if ($this->queryExec("DELETE FROM {$this->dbpredpona}last_login WHERE id={$id};", $error)) //provedeni dotazu
              {
                $result = $this->NactiUnikatniObsah($this->unikatni["normal_activate_del_user_{$tvar}"], $login);

                $this->var->main[0]->AutoClick($this->NactiUnikatniObsah($this->unikatni["normal_activate_timeout_{$tvar}"]), $this->absolutni_url);  //auto kliknuti
              }
                else
              {
                $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
              }
*/
//rozdelit pro kazpeho uzivatele!! svoje promazavani, a tahat as do DB!!

//pri prihlaseni!!!! jndy to nema smysl!!
////jo: pridat sloupec do DB: kontrola: datetime a ukladat datum prsti kontroly, jakmile se uzivatel
//prihlasi tak se provede dotycny test na pocet logu a dzmazani prebytku, a zaneseni noveho datumu do uzivatelu na
//prist kontrolu za nejaky casovy usek!!!!
      //if (date("Y-m-d H:i:s") > $datum) //pokud aktualni datum prekroci nastavene > !!
      //{
        //SELECT count(id) pocet, uzivatel FROM dynamicuser_last_login GROUP BY uzivatel HAVING pocet>=5
 //mel by kontrolovat a odmazavat zbytecne logy z DB
    //jednou za casovou jednotku!
//napsat propracovany sql dotaz

    //$this->countlogdel

    if (!file_exists($this->filelogdel))
    {
      $u = fopen($this->filelogdel, "w");
      //fwrite($u, date("Y-m-d H:i:s", strtotime("+{$this->timelogdel} day")));
      fclose($u);
    }
      else
    {
      $u = fopen($this->filelogdel, "r");
      $datum = fread($u, filesize($this->filelogdel));
      fclose($u);
/**
 *
 * Kontrola poctu radku po zadane casovem obdobi
 *
 * @param
 * @return
 */
  private function AutoCisteniLogu()
  {


        if ($res = $this->query("SELECT
                                count(id) pocet,
                                uzivatel
                                FROM {$this->dbpredpona}last_login
                                GROUP BY uzivatel HAVING pocet>{$this->countlogdel};", $error))  //id nesmi jit pres promennou ale primo
        {
          if ($this->numRows($res) != 0)
          {
            while ($data = $this->fetchObject($res))
            {
              $konec = $data->pocet - $this->countlogdel; //od,do (pocet presahujicich)
              if ($res1 = $this->query("SELECT id
                                        FROM {$this->dbpredpona}last_login
                                        WHERE uzivatel={$data->uzivatel}
                                        ORDER BY {$this->dbpredpona}last_login.last_active DESC
                                        LIMIT {$this->countlogdel},{$konec}", $error))  //id nesmi jit pres promennou ale primo
              {
                if ($this->numRows($res1) != 0)
                {
                  while ($data1 = $this->fetchObject($res1))
                  {
                    $logy[] = "id={$data1->id}";
                  }

                  $del = implode(" OR ", $logy);  //slopuci pole id na vymazani
                  if (!$this->queryExec("DELETE FROM {$this->dbpredpona}last_login WHERE {$del};", $error)) //provedeni dotazu
                  {
                    $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
                  }
                }
              }
                else
              {
                $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
              }
            }
          }
        }
          else
        {
          $this->var->main[0]->ErrorMsg($error, array(__LINE__, __METHOD__));
        }

  }
          $this->AutoCisteniLogu(); //jen testovaci provoz!!!!
var_dump("SELECT
                            count(id) pocet
                            FROM {$this->dbpredpona}last_login
                            WHERE uzivatel={$iduser};");
          //login, email, id, old pass, vygenerovane pass, expirace!
/*


            $obsahmessage = array("array_args",
                                  $this->absolutni_url,
                                  ($this->var->htaccess ? "{$this->idautorizace}/{$linkact}" : "?{$this->var->get_kam}={$this->idautorizace}&amp;{$this->iduserid}={$linkact}"),
                                  $login,
                                  $heslo,
                                  $newheslo,
                                  $email,
                                  $upraveno);

            $subject = $this->NactiUnikatniObsah($this->unikatni["normal_edit_pass_email_subject_{$tvar}"], $this->absolutni_url);
            $message = $this->NactiUnikatniObsah($this->unikatni["normal_edit_pass_email_message_{$tvar}"],
                                                $obsahmessage);

            $header = $this->NactiUnikatniObsah($this->unikatni["normal_edit_pass_email_header_{$tvar}"],  //hlavička
                                                $this->hlavicka);
  //var_dump($message);
            if (mail($email, $subject, $message, $header))
            {
              $ema = $this->NactiUnikatniObsah($this->unikatni["normal_edit_pass_send_email_{$tvar}"],
                                              $this->absolutni_url,
                                              $email);
            }
              else
            {
              $this->var->main[0]->ErrorMsg($this->NactiUnikatniObsah($this->unikatni["normal_edit_pass_send_email_error_{$tvar}"]), array(__LINE__, __METHOD__));
            }
*/
/*
            $data = $this->fetchObject($res);
            $id = $data->id;
            $pocet = $data->pocet + 1;  //pocitadlo prihlaseni
            SetCookie($this->cookiename, $this->ZakodujText("uzivatel:{$login}:jehoid:{$id}"), Time() + 31536000); //zápis do cookie

            $hlaska = $this->NactiUnikatniObsah($this->unikatni["normal_login_user_true_{$tvar}"],
                                                $this->absolutni_url,
                                                $login);

            $this->AddLogUser($id, $pocet); //zalogovani vstupu

            $this->var->main[0]->AutoClick($this->NactiUnikatniObsah($this->unikatni["normal_login_timeout_{$tvar}"]), $this->absolutni_url);  //auto kliknuti
*/
/*
            $hlaska = $this->NactiUnikatniObsah($this->unikatni["normal_login_user_false_{$tvar}"],
                                                $this->absolutni_url,
                                                $login);

            $this->var->main[0]->AutoClick($this->NactiUnikatniObsah($this->unikatni["normal_login_timeout_{$tvar}"]), $this->absolutni_url);  //auto kliknuti
*/
      //$hlaska = "...info o tom jestli se poslal email a nebo ne!...";
//dodelat!! - sahnut do DB, vygenerovani noveho hesla, poslany emailu + funkce na zmenu hesla ze zakodovaneho poslaneho linku
//+ vlastne napsat to heslo, posle se: email, login, id, stare heslo a nove vygenerovane nove heslo!!!
//stare heslo kvuli kontrole jestli si ekdo nechce spatecne zment zase nove heslo na stare

//o zmenu se postara funkce autorizace uzivatele!!
var_dump("SELECT id FROM {$this->dbpredpona}uzivatele
                            WHERE
                            id={$id} AND
                            login='{$login}' AND
                            heslo='{$pass}' AND
                            aktivni=1;");
          //$result["last_login"][] = $data->last_login;
          //$result["last_ip"][] = $data->last_ip;
          //$result["last_agent"][] = $data->last_agent;
CREATE TABLE {$this->dbpredpona}komentare (
                                  id INTEGER UNSIGNED AUTO_INCREMENTPRIMARY KEY,
                                  uzivatel INTEGER UNSIGNED,
                                  pridano DATETIME,
                                  zprava TEXT,
                                  ip VARCHAR(50),
                                  agent VARCHAR(300));
/*
  echo
  "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
  \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">
  <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"cs\" lang=\"cs\">
    <head>
      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />
      <meta http-equiv=\"Content-Language\" content=\"cs\" />
      <meta name=\"author\" content=\"Geniv &amp; Fugess (GF Design - www.gfdesign.cz)\" />
      <meta name=\"copyright\" content=\"Created by GFdesign (info@gfdesign.cz - www.gfdesign.cz)\" />
      <meta name=\"keywords\" content=\"Automatická galerie by GF Design\" />
      <meta name=\"description\" content=\"Automatická galerie by GF Design\" />
      <meta name=\"robots\" content=\"noindex, nofollow\" />
        <link rel=\"stylesheet\" type=\"text/css\" href=\"styles/global_styles.css\" media=\"screen\" />
      <title>Automatická galerie by GF Design - Wifi anténa na prodej</title>
    </head>
    <body>\n      <h1>Wifi anténa na prodej</h1>\n";

  $cesta = "./obr";
  $konc = "jpg";
  $w = 320;
  $h = 240;
  $mini = "mini";
  $handle = opendir($cesta);
  $obr = "";
  while($soub = readdir($handle))
  {
    $koncovka = explode(".", $soub);
    if ($soub != "." && $soub != ".." && filetype("{$cesta}/{$soub}") == "file" && strtolower($koncovka[count($koncovka) - 1]) == $konc)
    {
      echo
      "      <p class=\"polozka_obrazek\">
        <a href=\"{$cesta}/{$soub}\" title=\"{$cesta}/{$soub}\" class=\"highslide\" onclick=\"return hs.expand(this)\">
          <img src=\"{$mini}/{$soub}\" alt=\"{$mini}/{$soub}\" />
        </a>
        <span class=\"highslide-caption\">
          {$soub}
        </span>
      </p>\n";

      if (!file_exists("{$mini}/{$soub}"))
      {
        $obr = "{$cesta}/{$soub}";
        $nazev = $soub;
      }
    }
  }
  closedir($handle);

  if (!Empty($obr) && $konc == "jpg")
  {
    ini_set("memory_limit", "100M");
    list($old_w, $old_h) = getimagesize($obr);
    $img_old = imagecreatefromjpeg($obr);
    $img_new = imagecreatetruecolor($w, $h);
    imagecopyresampled($img_new, $img_old, 0, 0, 0, 0, $w, $h, $old_w, $old_h);
    imagejpeg($img_new, "{$mini}/{$nazev}", 100);
    imagedestroy($img_new);
  }

  echo
  "    </body>
  </html>
  ";
*/
Podívej se, podívej, náš strejda je vodivej. Způsobil nám zkrat, už jde z něho smrad. :D


co se tyce pripojovani do myslqi
tak se do promennych php narve super globalni promenna
do ktere si bude ukladat ukazatel dane relace pripojeni, s tim ze samotny connect
probehne na indexu a bude bud globalni a nebo jen pro indexy ktere jen potrebuji
vlastne stejme tabulky v databazi budou mist stejne predponu sveho modulu,
takze k zamene nedojde, a dotazy se budou generovat poloautomaticky, co se tyce
nazvu tabulky, to pujde z nazlu slozky nebo as nejlip ze |tridy|...
podle te si vlastne vezme predponu a udelat z predpony a tabulky konecme jmeno kterym
se bude dotazovat... kdyby bylo co... tak by se zdrejme pripojovani narvalo do kazdeho modulu
zvlast, ale to by s narustajicim poctem modulu rapidne rostlo... to neni dobra napad,
pripoji se to jednou (ale jen pokud bude alespon jedna databaze ma mysqli prepnuta),
jinak je zbytecny tam lezt...
co se samotneho prepinani tyce bude to delat zdrejme termarni podminka,
kde se vlastne podle nejake vnitrni podminky kterou pridam bude rozlsovat jestli mysqli,
nebi prave sqlite... obe dve nemaji stejny pristup k dotazum... tak by se to prepinalo..
a nebo kdyz to tak vidim tak se zpracuje sada dotazu ktere prave do te databaze polezou
tj vlastni volani unkce kde by se dejme tomu predaval prave typ aktualni databaze
a to by se interne podle toho taky zarozovalo a vracelo dane hodoty, nehlede k tomu
ze by se spolecne s typam bd taky predaval mistni ukazatel databaze a pak by se vlastne
podle toho co by to provedelo vracelo, cislo, text, bool nebo resource..
to se mus jeste promyslet

u uzivatelu dodelat upravu, vychytat bugy upravy a otestovat vsechny varianty,
zpracovat mazani
pak zpracovat registracni formular, editacni... a vsechyn veci kolem toho
jako je moznost pozadat o smazani, u registracky potvrzovaci emaily s expiraci (unikatni)
pak taky prihlasovani (session), vypis useru v poli, vypis daneho, vypis vsech ve stance,
a pak tak este takove ty sub podminky pri meneni udaju ze sveho rozhrani






udelat phpsqlite editor by geniv
graficke prostredi - mozaikove zobrazeni
