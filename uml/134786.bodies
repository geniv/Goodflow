class XmlStorage
!!!178690.php!!!	getAutoPath(inout dir : , inout class : )
      return sprintf('%s/.%s.xml', $dir, $class);
!!!178818.php!!!	checkExtension()
      try {

        if (!extension_loaded('simplexml')) {
          throw new ExceptionXmlStorage('Missing Apache extension SimpleXML!');
          exit(1);
        }

      } catch (ExceptionXmlStorage $e) {
        echo $e;
      }
!!!178946.php!!!	getData(inout path : )
      try {

        self::checkExtension();

        $result = NULL;
        if (!empty($path)) {
          if (file_exists($path)) {
            if (is_readable($path)) {
              $xml = simplexml_load_file($path);
              $result = self::recursiveToArray($xml);
            } else {
              throw new ExceptionXmlStorage('Path is not readable!');
            }
          }
        } else {
          throw new ExceptionXmlStorage('Path is not empty!');
        }

      } catch (ExceptionXmlStorage $e) {
        echo $e;
      }

      return $result;
!!!179074.php!!!	recursiveToArray(inout xml : )

      $result = array();
      foreach ($xml as $value) {
        $atr = $value->attributes();
        $key = (string) $atr->name;

        switch ($atr->type) {
          case 'array':
            $result[$key] = self::recursiveToArray($value);
          break;

          case 'string':
            $result[$key] = base64_decode($value);
          break;

          case 'boolean':
            $result[$key] = ($value == 1);
          break;

          case 'integer':
            $result[$key] = (integer) $value;
          break;

          case 'double':
            $result[$key] = (float) $value;
          break;

          case 'NULL':
          break;
        }
      }

      return $result;
!!!179202.php!!!	recursiveToXml(inout data : , inout xml :  = NULL)

      if ($xml == NULL) {
        $xml = new SimpleXMLElement('<xmlstorage></xmlstorage>');
      }

      foreach ($data as $key => $value) {
        $type = gettype($value);

        switch ($type) {
          case 'array':
            $node = $xml->addChild('key');
            $node->addAttribute('name', $key);
            $node->addAttribute('type', $type);
            self::recursiveToXml($value, $node);
          break;

          case 'string':
            $node = $xml->addChild('key', base64_encode($value));
            $node->addAttribute('name', $key);
            $node->addAttribute('type', $type);
          break;

          case 'boolean':
            $node = $xml->addChild('key', ($value ? 1 : 0));
            $node->addAttribute('name', $key);
            $node->addAttribute('type', $type);
          break;

          case 'integer':
          case 'double':
            $node = $xml->addChild('key', $value);
            $node->addAttribute('name', $key);
            $node->addAttribute('type', $type);
          break;

          case 'NULL':
            //slouzi pro mazani
          break;

          default:
            echo sprintf('neznami typ %s!', $type);
          break;
        }
      }

      return $xml;
!!!179330.php!!!	setData(inout path : , inout data : )
      try {

        self::checkExtension();

        $result = false;
        if (!empty($path)) {
          if (file_exists($path) && !is_writable($path)) {
            throw new ExceptionJsonStorage('Path is not writable!');
          }
          $xml = self::recursiveToXml($data);
          if (!$result = @$xml->asXML($path)) {
            throw new ExceptionXmlStorage(sprintf('Unable to write data to "%s"', $path));
          }
        } else {
          throw new ExceptionXmlStorage('The path must not be empty!');
        }

      } catch (ExceptionXmlStorage $e) {
        echo $e;
      }

      return $result;
