class Browscap
!!!131458.php!!!	__construct(inout cache_dir : string)
		// has to be set to reach E_STRICT compatibility, does not affect system/app settings
		date_default_timezone_set(date_default_timezone_get());

		if (!isset($cache_dir)) {
			throw new Browscap_Exception(
				'You have to provide a path to read/store the browscap cache file'
			);
		}

		$cache_dir = realpath($cache_dir);

		// Is the cache dir really the directory or is it directly the file?
		if (substr($cache_dir, -4) === '.php') {
			$this->cacheFilename = basename($cache_dir);
			$this->cacheDir = dirname($cache_dir);
		} else {
			$this->cacheDir = $cache_dir;
		}

		$this->cacheDir .= DIRECTORY_SEPARATOR;
!!!131586.php!!!	getBrowser(inout user_agent : string = null, inout return_array : bool = false) : stdObject
		// Load the cache at the first request
		if (!$this->_cacheLoaded) {
			$cache_file = $this->cacheDir . $this->cacheFilename;
			$ini_file	= $this->cacheDir . $this->iniFilename;

			// Set the interval only if needed
			if ($this->doAutoUpdate && file_exists($ini_file)) {
				$interval = time() - filemtime($ini_file);
			} else {
				$interval = 0;
			}

			// Find out if the cache needs to be updated
			if (!file_exists($cache_file) || !file_exists($ini_file) || ($interval > $this->updateInterval)) {
				try {
					$this->updateCache();
				} catch (Browscap_Exception $e) {
					if (file_exists($ini_file)) {
						// Adjust the filemtime to the $errorInterval
						touch($ini_file, time() - $this->updateInterval + $this->errorInterval);
					} else if ($this->silent) {
						// Return an array if silent mode is active and the ini db doesn't exsist
						return array();
					}

					if (!$this->silent) {
						throw $e;
					}
				}
			}

			$this->_loadCache($cache_file);
		}

		// Automatically detect the useragent
		if (!isset($user_agent)) {
			if (isset($_SERVER['HTTP_USER_AGENT'])) {
				$user_agent = $_SERVER['HTTP_USER_AGENT'];
			} else {
				$user_agent = '';
			}
		}

		$browser = array();
		foreach ($this->_patterns as $key => $pattern) {
			if (preg_match($pattern . 'i', $user_agent)) {
				$browser = array(
					$user_agent, // Original useragent
					trim(strtolower($pattern), self::REGEX_DELIMITER),
					$this->_userAgents[$key]
				);

				$browser = $value = $browser + $this->_browsers[$key];

				while (array_key_exists(3, $value) && $value[3]) {
					$value		=	$this->_browsers[$value[3]];
					$browser	+=	$value;
				}

				if (!empty($browser[3])) {
					$browser[3] = $this->_userAgents[$browser[3]];
				}

				break;
			}
		}

		// Add the keys for each property
		$array = array();
		foreach ($browser as $key => $value) {
      if ($value === 'true') {
        $value = true;
      } else if ($value === 'false') {
        $value = false;
      }

			$array[$this->_properties[$key]] = $value;
		}

		return $return_array ? $array : (object) $array;
!!!131714.php!!!	updateCache() : bool
		$ini_path			= $this->cacheDir . $this->iniFilename;
		$cache_path			= $this->cacheDir . $this->cacheFilename;

		// Choose the right url
		if ($this->_getUpdateMethod() == self::UPDATE_LOCAL) {
			$url = $this->localFile;
		} else {
			$url = $this->remoteIniUrl;
		}

		$this->_getRemoteIniFile($url, $ini_path);

		if (version_compare(PHP_VERSION, '5.3.0', '>=')){
			$browsers = parse_ini_file($ini_path, true, INI_SCANNER_RAW);
		} else {
			$browsers = parse_ini_file($ini_path, true);
		}

		array_shift($browsers);

		$this->_properties	= array_keys($browsers['DefaultProperties']);
		array_unshift(
			$this->_properties,
			'browser_name',
			'browser_name_regex',
			'browser_name_pattern',
			'Parent'
		);

		$this->_userAgents	= array_keys($browsers);
		usort(
			$this->_userAgents,
			create_function(self::ORDER_FUNC_ARGS, self::ORDER_FUNC_LOGIC)
		);

		$user_agents_keys	= array_flip($this->_userAgents);
		$properties_keys	= array_flip($this->_properties);

		$search				= array('\*', '\?');
		$replace			= array('.*', '.');

		foreach ($this->_userAgents as $user_agent) {
			$pattern = preg_quote($user_agent, self::REGEX_DELIMITER);
			$this->_patterns[]	= self::REGEX_DELIMITER
								. '^'
								. str_replace($search, $replace, $pattern)
								. '$'
								. self::REGEX_DELIMITER;

			if (!empty($browsers[$user_agent]['Parent'])) {
				$parent = $browsers[$user_agent]['Parent'];
				$browsers[$user_agent]['Parent'] = $user_agents_keys[$parent];
			}

			foreach ($browsers[$user_agent] as $key => $value) {
				$key = $properties_keys[$key] . ".0";
				$browser[$key] = $value;
			}

			$this->_browsers[] = $browser;
			unset($browser);
		}
		unset($user_agents_keys, $properties_keys, $browsers);

		// Save the keys lowercased if needed
		if ($this->lowercase) {
			$this->_properties = array_map('strtolower', $this->_properties);
		}

		// Get the whole PHP code
		$cache = $this->_buildCache();

		// Save and return
		return (bool) file_put_contents($cache_path, $cache, LOCK_EX);
!!!131842.php!!!	_loadCache(inout cache_file : ) : void
		require $cache_file;

		$this->_browsers	= $browsers;
		$this->_userAgents	= $userAgents;
		$this->_patterns	= $patterns;
		$this->_properties	= $properties;

		$this->_cacheLoaded = true;
!!!131970.php!!!	_buildCache() : string
		$cacheTpl = "<?php\n\$properties=%s;\n\$browsers=%s;\n\$userAgents=%s;\n\$patterns=%s;\n";

		$propertiesArray	= $this->_array2string($this->_properties);
		$patternsArray		= $this->_array2string($this->_patterns);
		$userAgentsArray	= $this->_array2string($this->_userAgents);
		$browsersArray		= $this->_array2string($this->_browsers);

		return sprintf(
			$cacheTpl,
			$propertiesArray,
			$browsersArray,
			$userAgentsArray,
			$patternsArray
		);
!!!132098.php!!!	_getRemoteIniFile(inout url : string, inout path : string) : bool
		// Check version
		if (file_exists($path) && filesize($path)) {
			$local_tmstp	= filemtime($path);

			if ($this->_getUpdateMethod() == self::UPDATE_LOCAL) {
				$remote_tmstp = $this->_getLocalMTime();
			} else {
				$remote_tmstp = $this->_getRemoteMTime();
			}

			if ($remote_tmstp < $local_tmstp) {
				// No update needed, return
				touch($path);
				return false;
			}
		}

		// Get updated .ini file
		$browscap = $this->_getRemoteData($url);


		$browscap = explode("\n", $browscap);

		$pattern = self::REGEX_DELIMITER
				 . '('
				 . self::VALUES_TO_QUOTE
				 . ')="?([^"]*)"?$'
				 . self::REGEX_DELIMITER;


		// Ok, lets read the file
		$content = '';
		foreach ($browscap as $subject) {
			$subject = trim($subject);
			$content .= preg_replace($pattern, '$1="$2"', $subject) . "\n";
		}

		if (!file_put_contents($path, $content)) {
			throw new Browscap_Exception("Could not write .ini content to $path");
		}

		return true;
!!!132226.php!!!	_getRemoteMTime() : int
		$remote_datetime = $this->_getRemoteData($this->remoteVerUrl);
		$remote_tmstp = strtotime($remote_datetime);

		if (!$remote_tmstp) {
			throw new Browscap_Exception("Bad datetime format from {$this->remoteVerUrl}");
		}

		return $remote_tmstp;
!!!132354.php!!!	_getLocalMTime() : int
		if (!is_readable($this->localFile) || !is_file($this->localFile)) {
			throw new Browscap_Exception("Local file is not readable");
		}

		return filemtime($this->localFile);
!!!132482.php!!!	_array2string(inout array : array) : string
		$strings = array();

		foreach ($array as $key => $value) {
			if (is_int($key)) {
				$key	= '';
			} else if (ctype_digit((string) $key) || strpos($key, '.0')) {
				$key	= intval($key) . '=>' ;
			} else {
				$key	= "'" . str_replace("'", "\'", $key) . "'=>" ;
			}

			if (is_array($value)) {
				$value	= $this->_array2string($value);
			} else if (ctype_digit((string) $value)) {
				$value	= intval($value);
			} else {
				$value	= "'" . str_replace("'", "\'", $value) . "'";
			}

			$strings[]	= $key . $value;
		}

		return 'array(' . implode(',', $strings) . ')';
!!!132610.php!!!	_getUpdateMethod() : string
		// Caches the result
		if ($this->updateMethod === null) {
			if ($this->localFile !== null) {
				$this->updateMethod = self::UPDATE_LOCAL;
			} else if (ini_get('allow_url_fopen') && function_exists('file_get_contents')) {
				$this->updateMethod = self::UPDATE_FOPEN;
			} else if (function_exists('fsockopen')) {
				$this->updateMethod = self::UPDATE_FSOCKOPEN;
			} else if (extension_loaded('curl')) {
				$this->updateMethod = self::UPDATE_CURL;
			} else {
				$this->updateMethod = false;
			}
		}

		return $this->updateMethod;
!!!132738.php!!!	_getRemoteData(inout url : string) : string
		ini_set('user_agent', $this->_getUserAgent());

		switch ($this->_getUpdateMethod()) {
			case self::UPDATE_LOCAL:
				$file = file_get_contents($url);

				if ($file !== false) {
					return $file;
				} else {
					throw new Browscap_Exception('Cannot open the local file');
				}
			case self::UPDATE_FOPEN:
				$file = file_get_contents($url);

				if ($file !== false) {
					return $file;
				} // else try with the next possibility (break omitted)
			case self::UPDATE_FSOCKOPEN:
				$remote_url		= parse_url($url);
				$remote_handler = fsockopen($remote_url['host'], 80, $c, $e, $this->timeout);

				if ($remote_handler) {
					stream_set_timeout($remote_handler, $this->timeout);

					if (isset($remote_url['query'])) {
						$remote_url['path'] .= '?' . $remote_url['query'];
					}

					$out = sprintf(
						self::REQUEST_HEADERS,
						$remote_url['path'],
						$remote_url['host'],
						$this->_getUserAgent()
					);

					fwrite($remote_handler, $out);

					$response = fgets($remote_handler);
					if (strpos($response, '200 OK') !== false) {
						$file = '';
						while (!feof($remote_handler)) {
							$file .= fgets($remote_handler);
						}

						$file = str_replace("\r\n", "\n", $file);
						$file = explode("\n\n", $file);
						array_shift($file);

						$file = implode("\n\n", $file);

						fclose($remote_handler);

						return $file;
					}
				} // else try with the next possibility
			case self::UPDATE_CURL:
				$ch = curl_init($url);

				curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $this->timeout);
				curl_setopt($ch, CURLOPT_USERAGENT, $this->_getUserAgent());

				$file = curl_exec($ch);

				curl_close($ch);

				if ($file !== false) {
					return $file;
				} // else try with the next possibility
			case false:
				throw new Browscap_Exception('Your server can\'t connect to external resources. Please update the file manually.');
		}
!!!132866.php!!!	_getUserAgent() : string
		$ua = str_replace('%v', self::VERSION, $this->userAgent);
		$ua = str_replace('%m', $this->_getUpdateMethod(), $ua);

		return $ua;
