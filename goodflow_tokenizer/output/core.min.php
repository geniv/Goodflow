'1.9'1035 namespace classes;use DirectoryIterator,RecursiveIteratorIterator,RecursiveDirectoryIterator,Exception;final class Core{ const PHPMIN='5.3.0'; const VERSION='1.9';private static$worktime;public static function enableDebug(){$error=error_get_last();if(!empty($error)){print_r($error);print_r(apache_request_headers());print_r(apache_response_headers());print_r($_SERVER);}}private static function getPartUrl(array$settings=array()){$query=self::isFill($settings,'query');$rewrite=self::isFill($settings,'rewrite',false);$link_path=self::isFill($settings,'path','');$amp=self::isFill($settings,'amp','&amp;');$end=(!empty($query)?($rewrite?sprintf('/%s',implode($amp,$query)):sprintf('?%s',http_build_query(($rewrite?array_values($query):$query),NULL,$amp))):NULL);return sprintf('%s%s',$link_path,$end);}public static function getUrl(array$settings=array()){$path=dirname($_SERVER['SCRIPT_NAME']);$end=self::getPartUrl($settings);return sprintf('http://%s%s/%s',$_SERVER['SERVER_NAME'],($path!='/'?$path:''),$end);}public static function getAbsoluteUrl(array$settings=array()){$script=explode('/',$_SERVER['SCRIPT_NAME']);$absolute_path=explode('/',self::getAbsoluteWebPath());$path=implode('/',array_intersect($script,$absolute_path));$end=self::getPartUrl($settings);return sprintf('http://%s%s/%s',$_SERVER['SERVER_NAME'],$path,$end);}public static function getWebPath(){return dirname($_SERVER['SCRIPT_FILENAME']);}public static function getAbsoluteWebPath(){$script=explode('/',$_SERVER['SCRIPT_FILENAME']);$dir=explode('/',__DIR__);return implode('/',array_intersect($script,$dir));}public static function calculateSize($size,$onlynum=false){$exp=0;$converted=0;$result=NULL;$symbol=array('b','kB','MB','GB','TB','PB','EB','ZB','YB');if($size>0){$exp=floor(log($size)/log(1024));$converted=($size/pow(1024,floor($exp)));$result=sprintf(($exp==0?'%d %s':'%.2f %s'),$converted,$symbol[$exp]);}return($onlynum?$converted:$result);}public static function startTime(){self::$worktime[0]=microtime(true);}public static function stopTime(){self::$worktime[1]=microtime(true);$symbol=array(-2=>'&mu;s',-1=>'ms',0=>'s');$conv=round(self::$worktime[1]-self::$worktime[0],10);$exp=floor(log($conv)/log(1000));$converted=($conv/pow(1000,floor($exp)));return sprintf('%.4f %s',$converted,$symbol[$exp]);}public static function encodeData($data,$url=false){$result=base64_encode($data);if($url){$result=urlencode($result);}return$result;}public static function decodeData($data,$url=false){if($url){$data=urldecode($data);}return base64_decode($data);}public static function easyEncode($data){$base=base64_encode($data);$pole=str_split($base);$func=function($value){return ord($value);};return implode('a',array_map($func,$pole));}public static function easyDecode($data){$pole=explode('a',$data);$func=function($value){return chr($value);};$base=implode('',array_map($func,$pole));return base64_decode($base);}public static function makeUrl($url,$param){$result=$url;if(!empty($param)){$result=sprintf('%s?%s',$url,http_build_query($param,NULL,'&amp;'));}return$result;}public static function getSizeDir($path,$recursive=false){$sum=0;if(file_exists($path)&&is_readable($path)){if($recursive){$it=new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));}else{$it=new DirectoryIterator($path);}foreach($it as$ifile){if($ifile->isFile()){$sum+=$ifile->getSize();}}}return$sum;}public static function isFill($array,$key,$default=''){return(!empty($array[$key])?$array[$key]:$default);}public static function isNull($array,$key,$default=''){return(is_array($array)&&array_key_exists($key,$array)?$array[$key]:$default);} const LIST_SORT_LOWER='strtolower'; const LIST_SORT_MTIME='filemtime'; const LIST_SORT_CTIME='filectime'; const LIST_SORT_SELF='self'; const LIST_SORT_ASC='asc'; const LIST_SORT_DESC='desc'; const LIST_SORT_REG='regular'; const LIST_SORT_NUM='numeric'; const LIST_SORT_STR='string';private static function applyListSort(array$items,array$param){$sort=self::isFill($param,'sort');if(!empty($sort)){$final=array();foreach($sort as$key=>$value){if($key==self::LIST_SORT_SELF&&is_array($value)){$value=$key;}switch($value){case self::LIST_SORT_LOWER:$final[0]=array_map('strtolower',$items);break;case self::LIST_SORT_MTIME:$final[0]=array_map('filemtime',$items);break;case self::LIST_SORT_CTIME:$final[0]=array_map('filectime',$items);break;case self::LIST_SORT_ASC:$final[1]=SORT_ASC;break;case self::LIST_SORT_DESC:$final[1]=SORT_DESC;break;case self::LIST_SORT_REG:$final[2]=SORT_REGULAR;break;case self::LIST_SORT_NUM:$final[2]=SORT_NUMERIC;break;case self::LIST_SORT_STR:$final[2]=SORT_STRING;break;case self::LIST_SORT_SELF:$selforder=$sort[self::LIST_SORT_SELF];$intersect=array_intersect($selforder,$items);$diff=array_diff($items,$selforder);$items=array_merge($intersect,$diff);break;}}if(!empty($final)){array_multisort(self::isFill($final,0,$items),self::isFill($final,1,$items),self::isFill($final,2,$items),$items);}}return$items;}private static function applyListFilter(array$items,array$param){$filterp=self::isFill($param,'filter+');$filterm=self::isFill($param,'filter-');if(!empty($filterp)||!empty($filterm)){$res=NULL;foreach($items as$row){$info=strtolower(pathinfo($row,PATHINFO_EXTENSION));if(!empty($filterp)&&in_array($info,$filterp)){$res[]=$row;}elseif(!empty($filterm)&&!in_array($info,$filterm)){$res[]=$row;}}$items=$res;}return$items;}public static function getListDir(array$param){$path=self::isFill($param,'path');$result=NULL;if(file_exists($path)){$result=array();$it=new DirectoryIterator($path);foreach($it as$row){if($row->isDir()&&!$row->isDot()){$result[]=$row->getFilename();}}$result=self::applyListSort($result,$param);}return$result;}public static function getListFile(array$param){$path=self::isFill($param,'path');$full=self::isFill($param,'full',false);$result=NULL;if(file_exists($path)){$result=array();$it=new DirectoryIterator($path);foreach($it as$row){if($row->isFile()&&!$row->isDot()){if($full){$result[]=$row->getPathname();}else{$result[]=$row->getFilename();}}}$result=self::applyListFilter($result,$param);$result=self::applyListSort($result,$param);}return$result;}public static function getCountListDir(array$param){$path=self::isFill($param,'path');$result=NULL;if(file_exists($path)){$result=0;$it=new DirectoryIterator($path);foreach($it as$row){if($row->isDir()&&!$row->isDot()){$result++;}}}return$result;}public static function getCountListFile(array$param){$path=self::isFill($param,'path');$result=NULL;if(file_exists($path)){$result=0;$it=new DirectoryIterator($path);foreach($it as$row){if($row->isFile()&&!$row->isDot()){$result++;}}}return$result;}public static function getListRecursiveAll(array$param){$path=self::isFill($param,'path');$full=self::isFill($param,'full',false);$onlydir=self::isFill($param,'onlydir',false);$onlyfile=self::isFill($param,'onlyfile',false);if(!$full){$lenreal=self::isFill($param,'_lengthreal',strlen($path)+1);}$result=NULL;if(file_exists($path)){$result=array();$resend=array();$items=scandir($path);foreach($items as$row){if($row!='.'&&$row!='..'){$fullpath=sprintf('%s/%s',$path,$row);if(!$full){$shortpath=substr($fullpath,$lenreal);}if(is_file($fullpath)&&!$onlydir){$result[]=(!$full?$shortpath:$fullpath);}if(is_dir($fullpath)){$param['path']=$fullpath;if(!$full){$param['_lengthreal']=$lenreal;}$res=self::getListRecursiveAll($param);$result=array_merge($result,$res);if(!$onlyfile){$resend[]=(!$full?$shortpath:$fullpath);}}}}$result=array_merge($result,$resend);}return$result;}public static function getIncNameFile($path,$concat='%s-%s'){$poc=1;if(file_exists($path)){$newpath=sprintf($concat,$path,$poc);while(file_exists($newpath)){$poc++;$newpath=sprintf($concat,$path,$poc);}}else{$newpath=$path;}return array('path'=>$newpath,'index'=>$poc);}public static function isFirefox($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('#(Firefox|Shiretoko)/([a-zA-Z0-9\.]+)#i',$ua);}public static function isChrome($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('#Chrome/([a-zA-Z0-9\.]+) Safari/([a-zA-Z0-9\.]+)#i',$ua);}public static function isSafari($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('#Safari/([a-zA-Z0-9\.]+)#i',$ua);}public static function isOpera($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('#Opera[ /]([a-zA-Z0-9\.]+)#i',$ua);}public static function isIExplorer($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('#MSIE ([a-zA-Z0-9\.]+)#i',$ua);}public static function isLinux($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('/(Linux)|(Android)/i',$ua);}public static function isMac($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('/(Mac OS)|(Mac OS X)|(Mac_PowerPC)|(Macintosh)/i',$ua);}public static function isWindows($agent=NULL){$ua=(!empty($agent)?$agent:$_SERVER['HTTP_USER_AGENT']);return(boolean)preg_match('/(Windows)/i',$ua);}public static function implodeTitle(array$array,$separe=' - '){$result=NULL;if(!empty($array)){$row=array();foreach($array as$value){if(!empty($value)){$row[]=$value;}}$result=implode($separe,$row);}return$result;}public static function getFilePermissions($path,$full=false){$result=NULL;$perms=fileperms($path);if($full){if(($perms&0xC000)==0xC000){$info='s';}elseif(($perms&0xA000)==0xA000){$info='l';}elseif(($perms&0x8000)==0x8000){$info='-';}elseif(($perms&0x6000)==0x6000){$info='b';}elseif(($perms&0x4000)==0x4000){$info='d';}elseif(($perms&0x2000)==0x2000){$info='c';}elseif(($perms&0x1000)==0x1000){$info='p';}else{$info='u';}$info.=(($perms&0x0100)?'r':'-');$info.=(($perms&0x0080)?'w':'-');$info.=(($perms&0x0040)?(($perms&0x0800)?'s':'x'):(($perms&0x0800)?'S':'-'));$info.=(($perms&0x0020)?'r':'-');$info.=(($perms&0x0010)?'w':'-');$info.=(($perms&0x0008)?(($perms&0x0400)?'s':'x'):(($perms&0x0400)?'S':'-'));$info.=(($perms&0x0004)?'r':'-');$info.=(($perms&0x0002)?'w':'-');$info.=(($perms&0x0001)?(($perms&0x0200)?'t':'x'):(($perms&0x0200)?'T':'-'));$result=$info;}else{$result=substr(sprintf('%o',$perms),-4);}return$result;}public static function getIP(){return self::isFill($_SERVER,'HTTP_X_FORWARDED_FOR',$_SERVER['REMOTE_ADDR']);}public static function checkPHP(){return version_compare(PHP_VERSION,self::PHPMIN,'>=');}public static function setCharset($char='UTF-8'){header(sprintf('Content-type: text/html; charset=%s',$char));}public static function getHoliday($date){try{$svatek=array(array('Nový rok','Karina','Radmila','Diana','Dalimil','Tři králové','Vilma','Čestmír','Vladan','Břetislav','Bohdana','Pravoslav','Edita','Radovan','Alice','Ctirad','Drahoslav','Vladislav','Doubravka','Ilona','Běla','Slavomír','Zdeněk','Milena','Miloš','Zora','Ingrid','Otýlie','Zdislava','Robin','Marika'),array('Hynek','Nela/Hromnice','Blažej','Jarmila','Dobromila','Vanda','Veronika','Milada','Apolena','Mojmír','Božena','Slavěna','Věnceslav','Valentýn','Jiřina','Ljuba','Miloslava','Gizela','Patrik','Oldřich','Lenka','Petr','Svatopluk','Matěj','Liliana','Dorota','Alexandr','Lumír','Horymír'),array('Bedřich','Anežka','Kamil','Stela','Kazimír','Miroslav','Tomáš','Gabriela','Františka','Viktorie','Anděla','Řehoř','Růžena','Rút/Matylda','Ida','Elena/Herbert','Vlastimil','Eduard','Josef','Světlana','Radek','Leona','Ivona','Gabriel','Marián','Emanuel','Dita','Soňa','Taťána','Arnošt','Kvido'),array('Hugo','Erika','Richard','Ivana','Miroslava','Vendula','Heřman/Hermína','Ema','Dušan','Darja','Izabela','Julius','Aleš','Vincenc','Anastázie','Irena','Rudolf','Valérie','Rostislav','Marcela','Alexandra','Evženie','Vojtěch','Jiří','Marek','Oto','Jaroslav','Vlastislav','Robert','Blahoslav'),array('Svátek práce','Zikmund','Alexej','Květoslav','Klaudie, Květnové povstání českého lidu','Radoslav','Stanisla','Den osvobození od fašismu','Ctibor','Blažena','Svatava','Pankrác','Servác','Bonifác','Žofie','Přemysl','Aneta','Nataša','Ivo','Zbyšek','Monika','Emil','Vladimír','Jana','Viola','Filip','Valdemar','Vilém','Maxmilián','Ferdinand','Kamila'),array('Laura','Jarmil','Tamara','Dalibor','Dobroslav','Norbert','Iveta/Slavoj','Medard','Stanislav','Gita','Bruno','Antonie','Antonín','Roland','Vít','Zbyněk','Adolf','Milan','Leoš','Květa','Alois','Pavla','Zdeňka','Jan','Ivan','Adriana','Ladislav','Lubomír','Petr a Pavel','Šárka'),array('Jaroslava','Patricie','Radomír','Prokop','Den slovanských věrozvěstů Cyrila a Metoděje','Upálení mistra Jana Husa','Bohuslava','Nora','Drahoslava','Libuše/Amálie','Olga','Bořek','Markéta','Karolína','Jindřich','Luboš','Martina','Drahomíra','Čeněk','Ilja','Vítězslav','Magdeléna','Libor','Kristýna','Jakub','Anna','Věroslav','Viktor','Marta','Bořivoj','Ignác'),array('Oskar','Gustav','Miluše','Dominik','Kristián','Oldřiška','Lada','Soběslav','Roman','Vavřinec','Zuzana','Klára','Alena','Alan','Hana','Jáchym','Petra','Helena','Ludvík','Bernard','Johana','Bohuslav','Sandra','Bartoloměj','Radim','Luděk','Otakar','Augustýn','Evelína','Vladěna','Pavlína'),array('Linda/Samuel','Adéla','Bronislav','Jindřiška','Boris','Boleslav','Regína','Mariana','Daniela','Irma','Denisa','Marie','Lubor','Radka','Jolana','Ludmila','Naděžda','Kryštof','Zita','Oleg','Matouš','Darina','Berta','Jaromír','Zlata','Andrea','Jonáš','Václav, Den české státnosti','Michal','Jeroným'),array('Igor','Olívie','Bohumil','František','Eliška','Hanuš','Justýna','Věra','Štefan/Sára','Marina','Andrej','Marcel','Renáta','Agáta','Tereza','Havel','Hedvika','Lukáš','Michaela','Vendelín','Brigita','Sabina','Teodor','Nina','Beáta','Erik','Šarlota/Zoe','Den vzniku samostatného československého státu','Silvie','Tadeáš','Štěpánka'),array('Felix','Památka zesnulých','Hubert','Karel','Miriam','Liběna','Saskie','Bohumír','Bohdan','Evžen','Martin','Benedikt','Tibor','Sáva','Leopold','Otmar','Mahulena, Den boje studentů za svobodu a demokracii','Romana','Alžběta','Nikola','Albert','Cecílie','Klement','Emílie','Kateřina','Artur','Xenie','René','Zina','Ondřej'),array('Iva','Blanka','Svatoslav','Barbora','Jitka','Mikuláš','Ambrož/Benjamín','Květoslava','Vratislav','Julie','Dana','Simona','Lucie','Lýdie','Radana','Albína','Daniel','Miloslav','Ester','Dagmar','Natálie','Šimon','Vlasta','Adam a Eva, Štědrý den','Boží hod vánoční - svátek vánoční','Štěpán - svátek vánoční','Žaneta','Bohumila','Judita','David','Silvestr - Nový rok'));$dat=strtotime($date);if(date('Y',$dat)>1970){return$svatek[date('n',$dat)-1][date('j',$dat)-1];}else{throw new ExceptionCore('Spatny format datumu!');}}catch(ExceptionCore$e){echo$e;}}public static function setRefresh($time,$path){$url=htmlspecialchars_decode($path);header(sprintf('Refresh: %s; URL=%s',$time,$url));}public static function setErrorCode($code=404){header(sprintf('HTTP/1.0 %s Not Found',$code));}public static function getCookie($name){return self::isFill($_COOKIE,$name);}public static function setCookie($name,$value,$deltatime=31536000){setcookie($name,$value,Time()+$deltatime);}public static function unsetCookie($name,$deltatime=31536000){setcookie($name,'',Time()-$deltatime);}public static function initSession($name=NULL){session_start();if(!empty($name)){session_name($name);}}public static function getSession($name){return self::isFill($_SESSION,$name);}public static function setSession($name,$value){$_SESSION[$name]=$value;}public static function getSessionId($id=NULL){$result=session_id();if(!empty($id)){$result=session_id($id);}return$result;}public static function setRenewSessionId(){session_regenerate_id();}public static function getSessionName(){return session_name();}public static function getUniqId(){return uniqid(__DIR__,true);}private static$alphabet=array('á'=>'a','Á'=>'A','ä'=>'a','Ä'=>'A','ǎ'=>'a','Ǎ'=>'A','ć'=>'c','Ć'=>'C','č'=>'c','Č'=>'C','ď'=>'d','Ď'=>'D','é'=>'e','É'=>'E','ě'=>'e','Ě'=>'E','ë'=>'e','Ë'=>'E','í'=>'i','Í'=>'I','ǐ'=>'i','Ǐ'=>'I','ï'=>'i','Ï'=>'I','ĺ'=>'l','Ĺ'=>'L','ľ'=>'l','Ľ'=>'L','ň'=>'n','Ň'=>'N','ń'=>'n','Ń'=>'N','ó'=>'o','Ó'=>'O','ǒ'=>'o','Ǒ'=>'O','ö'=>'o','Ö'=>'O','ŕ'=>'r','Ŕ'=>'R','ř'=>'r','Ř'=>'R','ś'=>'s','Ś'=>'S','š'=>'s','Š'=>'S','ť'=>'t','Ť'=>'T','ẗ'=>'t','ů'=>'u','Ů'=>'U','ú'=>'u','Ú'=>'U','ǔ'=>'u','Ǔ'=>'U','ü'=>'u','Ü'=>'U','ý'=>'y','Ý'=>'Y','ÿ'=>'y','Ÿ'=>'Y','ž'=>'z','Ž'=>'Z','ź'=>'z','Ź'=>'Z',);public static function getSafeText($text,$pattern='/[a-zA-Z0-9_\-\.\(\)]{1}/'){$result=NULL;if(!empty($text)){$prepis=self::$alphabet;$search=array_keys($prepis);$replace=array_values($prepis);$text=str_replace($search,$replace,$text);$row=array();$rozdel=str_split($text);foreach($rozdel as$pismeno){if(preg_match($pattern,$pismeno)){$row[]=$pismeno;}}$result=implode('',$row);}return$result;}public static function getInteligentRewrite($text){$result=NULL;if(!empty($text)){$alphabet=self::$alphabet;$search=array_keys($alphabet);$replace=array_values($alphabet);$safetext=str_replace($search,$replace,$text);$char=array();$index=0;$explode=str_split($safetext);foreach($explode as$letter){if(preg_match('/[a-zA-Z0-9]{1}/',$letter)){$char[]=$letter;}else{$char[]='-';}$index++;}$safechar=implode('',$char);$result=str_replace(array('--'),array(''),$safechar);if($result[0]=='-'){$result=substr($result,1);}if($result[strlen($result)-1]=='-'){$result=substr($result,0,-1);}}return$result;}public static function getSpaceNumber($cislo,$desetinna='.',$mezera=' '){return number_format($cislo,0,$desetinna,$mezera);}}class ExceptionCore extends Exception{}